[
    {
        "raw": "Rules:\n1. Article 2 of the Circular No. 15/2011/TT-NHNN stipulates the level of cash in foreign currencies and cash in Vietnamese currency to be declared to the border-gate customs upon exit and entry as follows: \n2. a) US $ 5,000 (Five thousand US dollars) or other foreign currencies of equivalent value; \n3. b) VND 15,000,000 (fifteen million VN dong) \n4. Individuals, when exiting or entering through international border gates of Vietnam with passports, carrying cash in foreign currencies, Vietnam dong exceeding the levels prescribed below, must declare such to the border-gate customs offices: \n5. a/US $ 0.5,000 (US$ 5,100) or equivalent amounts in other foreign currency (ies); \n6. b/V 2. \n7. Individuals who carry foreign currency cash on entry which is equal to or lower than USD 5,000 or equivalent in other currencies and wish to deposit this cash amount into their foreign currency payment accounts opened at credit institutions or foreign bank branches licensed to conduct foreign exchange operations (below collectively referred to as licensed credit institutions) shall also declare such to border-gate customs offices. \n8. The entry-exit declaration with the border-gate customs office's certification of the amount of cash in foreign currencies brought in, made according to a set form, shall serve as a basis for a licensed credit institution to allow the depositing of cash amounts in foreign currency (ies) into the payment account. \n9. The level of cash in foreign currencies and cash in Vietnam dong required to be declared to the border-gate customs specified in Clause 1 of this Article is not applicable to individuals carrying payment instruments and valuable papers in foreign currency or Vietnam dong such as traveler's checks, bank cards, savings books, securities and other valuable papers.\n\nGoals:\nAre customs declarations required when carrying VND 20 million abroad?\n\nExplanation:\nDeclare(x): x declares to the border-gate customs.\nExit(x): x exits through international border gates of Vietnam.\nEntry(x): x enters through international border gates of Vietnam.\nPassport(x): x has a passport.\nCash(x): x carries cash.\nDeclareAmount(x): x declares the amount of cash.\nPaymentAccount(x): x has a payment account.\nCreditInstitution(x): x is a credit institution.\nForeignCurrency(x): x is foreign currency.\nVietnamDong(x): x is Vietnam dong.\n\nPredicates:\nDeclare(x) | Exit(x) | Entry(x) | Passport(x) | Cash(x) | DeclareAmount(x) | PaymentAccount(x) | CreditInstitution(x) | ForeignCurrency(x) | VietnamDong(x) | VND20M(x) | VND15M(x) | US5000(x) | US5100(x)\n\nPremises:\nall x (US5000(x) -> DeclareAmount(x)).\nall x (VND15M(x) -> DeclareAmount(x)).\nall x (VND20M(x) -> DeclareAmount(x)).\nall x (Cash(x) & CashAmount(x) > VND15M(x) -> Declare(x)).\nall x (Cash(x) & CashAmount(x) > US5000(x) -> Declare(x)).\nall x (Declare(x) -> DeclareAmount(x)).\nall x (PaymentAccount(x) -> CreditInstitution(x)).\nall x (CreditInstitution(x) -> ForeignCurrency(x)).\nall x (ForeignCurrency(x) -> VietnamDong(x)).\n\nConclusion:\nall x (VND20M(x) -> Declare(x)).",
        "premises": [
            "all x (US5000(x) -> DeclareAmount(x)).",
            "all x (VND15M(x) -> DeclareAmount(x)).",
            "all x (VND20M(x) -> DeclareAmount(x)).",
            "all x (Cash(x) & CashAmount(x) > VND15M(x) -> Declare(x)).",
            "all x (Cash(x) & CashAmount(x) > US5000(x) -> Declare(x)).",
            "all x (Declare(x) -> DeclareAmount(x)).",
            "all x (PaymentAccount(x) -> CreditInstitution(x)).",
            "all x (CreditInstitution(x) -> ForeignCurrency(x)).",
            "all x (ForeignCurrency(x) -> VietnamDong(x))."
        ],
        "conclusion": "all x (VND20M(x) -> Declare(x)).",
        "id": "9b0ccfe7-97bf-4565-94ac-c26875f5a044"
    },
    {
        "raw": "Rules:\n1. Payment instruments used in payment transactions include cheques, payment orders, payment order, collection order, bank cards and other payment instruments as prescribed by the State Bank.\n2. Illegal payment instruments are payment instruments not specified in Clause 6 of this Article.\n3. Forging, modifying, erasing, replacing payment instruments, payment documents; storing, circulating, transferring, using counterfeit payment instruments is prohibited.\n4. Infiltrating or attempting to infiltrate, sabotaging or illegally changing software programs and electronic databases used in payment; taking advantage of computer network errors to seek personal benefits is prohibited.\n5. Providing false information during the provision and use of payment services and payment intermediary services is prohibited.\n6. Disclosing or providing information related to deposit of account holders at payment service providers against law regulations is prohibited.\n7. Open or maintain anonymous or impersonation checking accounts is prohibited.\n8. Issuing, providing and using illegal payment instruments is prohibited.\n\nGoals:\nIs cryptocurrencies recognized as a legitimate payment vehicle on the electronic exchanges?\n\nExplanation:\nPaymentInstrument(x): x is a payment instrument.\nIllegalPaymentInstrument(x): x is an illegal payment instrument.\nForging(x): x forges payment instruments.\nModifying(x): x modifies payment instruments.\nErase(x): x erases payment instruments.\nReplace(x): x replaces payment instruments.\nStore(x): x stores payment instruments.\nCirculate(x): x circulates payment instruments.\nTransfer(x): x transfers payment instruments.\nUse(x): x uses payment instruments.\nInfiltrate(x): x infiltrates software programs and electronic databases.\nSabotage(x): x sabotages software programs and electronic databases.\nChange(x): x changes software programs and electronic databases.\nError(x): x takes advantage of computer network errors.\nPersonalBenefit(x): x seeks personal benefits.\nFalseInformation(x): x provides false information.\nPaymentService(x): x provides payment services.\nPaymentIntermediaryService(x): x provides payment intermediary services.\nDisclosure(x): x discloses information.\nAccountHolder(x): x is an account holder.\nPaymentServiceProvider(x): x is a payment service provider.\nCryptocurrencies(x): x is a cryptocurrency.\nElectronicExchange(x): x is an electronic exchange.\n\nPremises:\nall x (PaymentInstrument(x) -> (Cheque(x) | PaymentOrder(x) | PaymentOrder(x) | CollectionOrder(x) | BankCard(x) | OtherPaymentInstrument(x))).\nall x (IllegalPaymentInstrument(x) -> ~PaymentInstrument(x)).\nall x (Forging(x) & Modifying(x) & Erase(x) & Replace(x) & Store(x) & Circulate(x) & Transfer(x) & Use(x)).\nall x (Infiltrate(x) | Sabotage(x) | Change(x)).\nall x (Error(x) -> PersonalBenefit(x)).\nall x (FalseInformation(x) -> ~PaymentService(x) & ~PaymentIntermediaryService(x)).\nall x (Disclosure(x) -> ~PaymentServiceProvider(x)).\nall x (Cryptocurrencies(x) -> ElectronicExchange(x)).\n-IllegalPaymentInstrument(x).\n\nConclusion:\n~Cryptocurrencies(x).",
        "premises": [
            "all x (PaymentInstrument(x) -> (Cheque(x) | PaymentOrder(x) | PaymentOrder(x) | CollectionOrder(x) | BankCard(x) | OtherPaymentInstrument(x))).",
            "all x (IllegalPaymentInstrument(x) -> ~PaymentInstrument(x)).",
            "all x (Forging(x) & Modifying(x) & Erase(x) & Replace(x) & Store(x) & Circulate(x) & Transfer(x) & Use(x)).",
            "all x (Infiltrate(x) | Sabotage(x) | Change(x)).",
            "all x (Error(x) -> PersonalBenefit(x)).",
            "all x (FalseInformation(x) -> ~PaymentService(x) & ~PaymentIntermediaryService(x)).",
            "all x (Disclosure(x) -> ~PaymentServiceProvider(x)).",
            "all x (Cryptocurrencies(x) -> ElectronicExchange(x)).",
            "-IllegalPaymentInstrument(x)."
        ],
        "conclusion": "~Cryptocurrencies(x).",
        "id": "7c2bdc89-9f2d-4ef3-9147-0cfc3d47d5c7"
    },
    {
        "raw": "Rules:\n1. Clause 1 Article 23 of Decree No. 88/2019/ND-CP stipulates as follows: a) Trading foreign currency between individuals if the value of foreign currency sold or bought is under USD 1,000 (or equivalent value in another foreign currency); b) trading foreign currency at an organization that is not permitted to exchange foreign currency if the foreign currency bought or sold is under USD 1,000 (or an equivalent value); c) failing to comply with regulations of law when making payment for goods/services in foreign currency with the value under USD 1,000 (or similar value in other foreign currencies).\nGoals:\nIs there any penalty or not for trading foreign currency at unauthorized organizations?\n\nPredicates:\nTrade(x) | Penalty(x) | Individual(x) | Organization(x) | ForeignCurrency(x) | Value(x) | USD(x) | Equivalent(x) | Permitted(x) | Regulations(x) | Law(x) | Goods(x) | Services(x) | Payment(x) | Penalty(x)\n\nExplanation:\nTrade(x): x trades foreign currency.\nPenalty(x): x has a penalty.\nIndividual(x): x is an individual.\nOrganization(x): x is an organization.\nForeignCurrency(x): x is foreign currency.\nValue(x): x is the value of foreign currency.\nUSD(x): x is USD.\nEquivalent(x): x is equivalent.\nPermitted(x): x is permitted.\nRegulations(x): x are regulations.\nLaw(x): x is law.\nGoods(x): x are goods.\nServices(x): x are services.\nPayment(x): x is payment.\n\nPremises:\nall x (Trade(x) -> (Value(x) < USD(x) | Permitted(x))).\nall x (~Permitted(x) -> (Value(x) < USD(x))).\nall x (Value(x) < USD(x) -> Penalty(x)).\n\nConclusion:\nall x (~Permitted(x) -> Penalty(x)).",
        "premises": [
            "all x (Trade(x) -> (Value(x) < USD(x) | Permitted(x))).",
            "all x (~Permitted(x) -> (Value(x) < USD(x))).",
            "all x (Value(x) < USD(x) -> Penalty(x))."
        ],
        "conclusion": "all x (~Permitted(x) -> Penalty(x)).",
        "id": "064d2f1d-03e5-4089-ba44-b7f4d0b1cea0"
    },
    {
        "raw": "Rules:\n1. An application form for checking account opening using the form provided by the bank/foreign bank's branch where the checking account is opened and in accordance with Clause 1 Article 13 of this Circular.\n2. The account holder's citizen identification card or ID card or unexpired passport, birth certificate (if the account holder is a Vietnamese citizen aged under 14 years ), entry visa or document proving exemption from entry visa (if he/she is a foreigner).\n3. If the checking accounts are opened by the guardian or legal representative, apart from the documents specified in Point a, the guardian or legal representative must provide a document proving his/her authority to act on behalf of the account holder.\n\nGoals:\nOpening a bank account without a CCCD card is allowed.\n\nExplanation:\nOpen(x): x opens a bank account.\nIDCard(x): x has an ID card.\nPassport(x): x has a passport.\nBirthCertificate(x): x has a birth certificate.\nEntryVisa(x): x has an entry visa.\nDocument(x): x has a document.\nGuardian(x): x is a guardian.\nLegalRepresentative(x): x is a legal representative.\nAuthority(x): x has authority.\nCCCD(x): x has a CCCD card.\n\nPredicates:\nOpen(x) | IDCard(x) | Passport(x) | BirthCertificate(x) | EntryVisa(x) | Document(x) | Guardian(x) | LegalRepresentative(x) | Authority(x) | CCCD(x)\n\nPremises:\nall x (Open(x) -> (IDCard(x) | Passport(x) | BirthCertificate(x) | EntryVisa(x) | Document(x))).\nall x (Guardian(x) -> (Authority(x) & LegalRepresentative(x))).\n-CCCD(x).\n\nConclusion:\nall x (Open(x) -> (~CCCD(x))).",
        "premises": [
            "all x (Open(x) -> (IDCard(x) | Passport(x) | BirthCertificate(x) | EntryVisa(x) | Document(x))).",
            "all x (Guardian(x) -> (Authority(x) & LegalRepresentative(x))).",
            "-CCCD(x)."
        ],
        "conclusion": "all x (Open(x) -> (~CCCD(x))).",
        "id": "e1946d8a-ebdb-49ba-964d-ba72fffe2433"
    },
    {
        "raw": "Rules:\n1. Article 2 of Circular No. 11/2014/TT-NHNN prescribes the carrying of gold upon entry or exit by passport as follows: 1 Vietnamese and foreign individuals who enter or exit Vietnam with passports are not allowed to carry ingot gold and raw material gold. In case a foreigner entering Vietnam with ingot gold or material gold comes into Vietnam and carries gold bullion or gold material, he/she shall carry out procedures for depositing gold bullions at customs warehouses for bringing out of Vietnam or carrying out procedures to transfer them abroad and bear all related expenses. 2. Vietnamese and foreign individuals who carry gold jewelry in a total amount of 300g (three hundred grams) or more upon entry or exit by passport shall declare such with customs authorities.\nGoals:\nAre foreigners allowed to bring gold jewelry into Vietnam?\n\nExplanation:\nCarryIngot(x): x carries ingot gold.\nCarryRawMaterial(x): x carries raw material gold.\nCarryGoldBullion(x): x carries gold bullion.\nCarryGoldMaterial(x): x carries gold material.\nDeclare(x): x declares gold jewelry.\nAllowed(x): x is allowed.\n\nPredicates:\nCarryIngot(x) | CarryRawMaterial(x) | CarryGoldBullion(x) | CarryGoldMaterial(x) | Declare(x) | Allowed(x) | Foreigner(x) | Vietnam(x) | GoldJewelry(x) | Passport(x) | Customs(x) | GoldBullion(x) | GoldMaterial(x).\n\nPremises:\nall x (Foreigner(x) -> (not CarryIngot(x) & not CarryRawMaterial(x))).\nall x (CarryGoldBullion(x) -> (Deposit(x) | Transfer(x))).\nall x (CarryGoldMaterial(x) -> (Deposit(x) | Transfer(x))).\nall x (Declare(x) -> Customs(x)).\nall x (GoldJewelry(x) -> (300g <= Weight(x))).\n-Allowed(x) | Declare(x).\n\nConclusion:\nall x (Foreigner(x) -> not CarryGoldJewelry(x)).",
        "premises": [
            "all x (Foreigner(x) -> (not CarryIngot(x) & not CarryRawMaterial(x))).",
            "all x (CarryGoldBullion(x) -> (Deposit(x) | Transfer(x))).",
            "all x (CarryGoldMaterial(x) -> (Deposit(x) | Transfer(x))).",
            "all x (Declare(x) -> Customs(x)).",
            "all x (GoldJewelry(x) -> (300g <= Weight(x))).",
            "-Allowed(x) | Declare(x)."
        ],
        "conclusion": "all x (Foreigner(x) -> not CarryGoldJewelry(x)).",
        "id": "9789c422-3ba7-469c-ba93-7ef37943ebbc"
    },
    {
        "raw": "Rules:\n1. Counterfeit money making, transporting, storing, circulating, buying and selling counterfeit money are prohibited.\n2. Destroying Vietnamese currency in any form is prohibited.\n3. The photocopying of Vietnamese currency for any purpose without prior written approval of the State Bank is prohibited.\n4. To refuse to receive and circulate the money issued by the State Bank in the territory of Vietnam is prohibited.\nGoals:\nBurning money is illegal.\n\nPredicates:\nCounterfeit(x) | Transport(x) | Store(x) | Circulate(x) | Buy(x) | Sell(x) | Destroy(x) | Burn(x) | Illegal(x) | Approval(x) | StateBank(x) | Vietnam(x) | VietnameseCurrency(x)\n\nExplanation:\nCounterfeit(x): x engages in counterfeiting money.\nTransport(x): x transports money.\nStore(x): x stores money.\nCirculate(x): x circulates money.\nBuy(x): x buys money.\nSell(x): x sells money.\nDestroy(x): x destroys money.\nBurn(x): x burns money.\nIllegal(x): x is illegal.\nApproval(x): x has approval.\nStateBank(x): x is the State Bank.\nVietnam(x): x is in the territory of Vietnam.\nVietnameseCurrency(x): x is Vietnamese currency.\n\nPremises:\nall x (Counterfeit(x) -> (Transport(x) | Store(x) | Circulate(x) | Buy(x) | Sell(x))).\nall x (Destroy(x) | Burn(x)).\nall x (Destroy(x) -> Illegal(x)).\nall x (Burn(x) -> Illegal(x)).\nall x (Illegal(x) -> Vietnam(x)).\nall x (StateBank(x) -> Vietnam(x)).\n-Approval(x) | Burn(x).\nall x (VietnameseCurrency(x) -> StateBankApproval(x)).\n\nConclusion:\nall x (Burn(x) -> Illegal(x)).",
        "premises": [
            "all x (Counterfeit(x) -> (Transport(x) | Store(x) | Circulate(x) | Buy(x) | Sell(x))).",
            "all x (Destroy(x) | Burn(x)).",
            "all x (Destroy(x) -> Illegal(x)).",
            "all x (Burn(x) -> Illegal(x)).",
            "all x (Illegal(x) -> Vietnam(x)).",
            "all x (StateBank(x) -> Vietnam(x)).",
            "-Approval(x) | Burn(x).",
            "all x (VietnameseCurrency(x) -> StateBankApproval(x))."
        ],
        "conclusion": "all x (Burn(x) -> Illegal(x)).",
        "id": "290a8877-962e-4f88-94e9-875d9c0f9d98"
    },
    {
        "raw": "Rules:\n1. Pursuant to Clause 13 Article 1 of the Ordinance amending Ordinance on foreign exchange in 2013 is prescribed as follows: 13. Article 22 is amended as follows: \"Article 22. In the territory of Vietnam, all transactions, payments, posting, advertisements, quotations, valuation, and price entry in contracts, agreements, and other similar forms of residents and non-residents must not be made in foreign exchange, except for the cases permitted by the State bank of Vietnam.\"\n2. Pursuant to Article 3 of Circular No. 32/2013/TT-NHNN on the principles of restricting the use of foreign exchange in the territory, Vietnam, except the cases in which foreign exchange is allowed as prescribed in Article 4 of this Circular, all transaction, payment, posting and advertising\n\nGoals:\nIs it illegal to sign a contract in foreign currency for lease house signing?\n\nExplanation:\nForeignExchange(x): x is in foreign exchange.\nTransaction(x): x is a transaction.\nPayment(x): x is a payment.\nPosting(x): x is a posting.\nAdvertising(x): x is an advertising.\nContract(x): x is a contract.\nLease(x): x is a lease.\nHouse(x): x is a house.\nSign(x): x signs.\nIllegal(x): x is illegal.\nPermitted(x): x is permitted.\n\nPredicates:\nForeignExchange(x) | Transaction(x) | Payment(x) | Posting(x) | Advertising(x) | Contract(x) | Lease(x) | House(x) | Sign(x) | Illegal(x) | Permitted(x) | Vietnam(x) | StateBank(x) | Resident(x) | NonResident(x).\n\nPremises:\nall x (Transaction(x) & Payment(x) & Posting(x) & Advertising(x) & Contract(x) & Lease(x) & House(x) & Sign(x) -> ForeignExchange(x)).\nall x (ForeignExchange(x) -> ~Permitted(x)).\nall x (Permitted(x) -> StateBankApproval(x)).\nall x (StateBank(x) -> Vietnam(x)).\nall x (Resident(x) | NonResident(x)).\n\nConclusion:\nall x (Contract(x) & Lease(x) & House(x) & Sign(x) & ForeignExchange(x) -> Illegal(x)).",
        "premises": [
            "all x (Transaction(x) & Payment(x) & Posting(x) & Advertising(x) & Contract(x) & Lease(x) & House(x) & Sign(x) -> ForeignExchange(x)).",
            "all x (ForeignExchange(x) -> ~Permitted(x)).",
            "all x (Permitted(x) -> StateBankApproval(x)).",
            "all x (StateBank(x) -> Vietnam(x)).",
            "all x (Resident(x) | NonResident(x))."
        ],
        "conclusion": "all x (Contract(x) & Lease(x) & House(x) & Sign(x) & ForeignExchange(x) -> Illegal(x)).",
        "id": "7fbf3cc8-1c9a-4a0c-9ede-ec20f362e60c"
    },
    {
        "raw": "Rules:\n1. Enterprises shall not make cash payment in capital contribution transactions and in the purchase, sale or transfer of capital contributions to enterprises.\n2. Enterprises other than credit institutions do not use cash when borrowing and lending to each other.\n\nGoals:\nIs the company not allowed to use cash when lending?\n\nPredicates:\nEnterprise(x) | Cash(x) | Borrow(x) | Lend(x) | CreditInstitution(x) | CapitalContribution(x) | Payment(x) | Transfer(x) | NotAllowed(x)\n\nExplanation:\nEnterprise(x): x is an enterprise.\nCash(x): x is cash.\nBorrow(x): x borrows.\nLend(x): x lends.\nCreditInstitution(x): x is a credit institution.\nCapitalContribution(x): x is a capital contribution.\nPayment(x): x makes a payment.\nTransfer(x): x transfers.\nNotAllowed(x): x is not allowed.\n\nPremises:\nall x (Enterprise(x) -> Not(CashPayment(x) & CapitalContribution(x) & Payment(x) & Transfer(x))).\nall x (Enterprise(x) & ~CreditInstitution(x) -> ~Cash(Borrow(x) & Lend(x))).\n\nConclusion:\nall x (Enterprise(x) & ~CreditInstitution(x) -> NotAllowed(Cash(Lend(x)))).",
        "premises": [
            "all x (Enterprise(x) -> Not(CashPayment(x) & CapitalContribution(x) & Payment(x) & Transfer(x))).",
            "all x (Enterprise(x) & ~CreditInstitution(x) -> ~Cash(Borrow(x) & Lend(x)))."
        ],
        "conclusion": "all x (Enterprise(x) & ~CreditInstitution(x) -> NotAllowed(Cash(Lend(x)))).",
        "id": "6b1e724-2a30-49d9-8c43-ca7af168eea2"
    },
    {
        "raw": "Rules:\n1. A debt with restructured repayment term is the debt whose repayment period is adjusted and/or rescheduled by the credit institution or foreign bank branch when the customer is incapable of paying principal and/or interest on the agreed schedule but is considered by the credit institution or foreign bank branch to be capable of fully paying principal and/or interest on schedule.\nGoals:\nIs the undue debt a bad debt?\n###\nPredicates:\nUndueDebt(x) | BadDebt(x) | RestructuredDebt(x) | RepaymentTerm(x) | Adjusted(x) | Rescheduled(x) | Incapable(x) | Capable(x) | CreditInstitution(x) | ForeignBank(x) | Customer(x) | Principal(x) | Interest(x) | Schedule(x).\n\nExplanation:\nUndueDebt(x): x is an undue debt.\nBadDebt(x): x is a bad debt.\nRestructuredDebt(x): x is a restructured debt.\nRepaymentTerm(x): x has a repayment term.\nAdjusted(x): x is adjusted.\nRescheduled(x): x is rescheduled.\nIncapable(x): x is incapable of paying.\nCapable(x): x is capable of paying.\nCreditInstitution(x): x is a credit institution.\nForeignBank(x): x is a foreign bank.\nCustomer(x): x is a customer.\nPrincipal(x): x is principal.\nInterest(x): x is interest.\nSchedule(x): x has a schedule.\n\nPremises:\nall x (RestructuredDebt(x) -> (Adjusted(x) | Rescheduled(x))).\nall x (Incapable(x) & Capable(x) -> RestructuredDebt(x)).\nall x (UndueDebt(x) -> Incapable(x)).\nall x (BadDebt(x) -> UndueDebt(x)).\n\nConclusion:\nall x (UndueDebt(x) -> BadDebt(x)).",
        "premises": [
            "all x (RestructuredDebt(x) -> (Adjusted(x) | Rescheduled(x))).",
            "all x (Incapable(x) & Capable(x) -> RestructuredDebt(x)).",
            "all x (UndueDebt(x) -> Incapable(x)).",
            "all x (BadDebt(x) -> UndueDebt(x))."
        ],
        "conclusion": "all x (UndueDebt(x) -> BadDebt(x)).",
        "id": "0b1c6aeb-f312-4192-8b83-45f266e256c7"
    },
    {
        "raw": "Rules:\n1. An officer in the line may get a red line if they commit a road and rail transport offence.\n2. Clause 4 Article 68 of the Government's Decree No. 171/2013/ND-CP provides for the power to impose penalties for road and rail transport offences.\n\nGoals:\nDid the officer in the line get a red line?\n\nExplanation:\nOfficer(x): x is an officer in the line.\nRedLine(x): x gets a red line.\nOffence(x): x commits a road and rail transport offence.\nPenalty(x): x gets a penalty.\n\nPredicates:\nOfficer(x) | RedLine(x) | Offence(x) | Penalty(x) | Road(x) | Rail(x) | Transport(x) | Government(x) | Decree(x) | Article(x) | Clause(x) | Power(x) | Imposes(x)\n\nPremises:\nall x (Offence(x) -> Penalty(x)).\nall x (Officer(x) -> Power(x)).\nall x (Power(x) -> Imposes(x)).\nall x (Imposes(x) -> RedLine(x)).\nall x (Road(x) | Rail(x) | Transport(x)).\n\nConclusion:\nall x (Officer(x) -> RedLine(x)).\n------------------------",
        "premises": [
            "all x (Offence(x) -> Penalty(x)).",
            "all x (Officer(x) -> Power(x)).",
            "all x (Power(x) -> Imposes(x)).",
            "all x (Imposes(x) -> RedLine(x)).",
            "all x (Road(x) | Rail(x) | Transport(x))."
        ],
        "conclusion": "------------------------",
        "id": "8121f6ab-4eb9-493e-8a64-2ecce6cbd45e"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. No organization or individual is allowed to illegally interfere in the insurance buyer's right to select an insurer or foreign branch.\n2. Clause 5 Article 9 of the Law on Insurance Business 2022 prohibits any act of threatening or coercing conclusion of insurance policies.\n\nGoals:\nIs a commercial bank allowed to force customers to buy insurance when they borrow.\n\nExplanation:\nForce(x): x forces customers to buy insurance.\nBorrow(x): x borrows.\n\nPredicates:\nForce(x) | Borrow(x) | Select(x) | Insurance(x) | Insurer(x) | ForeignBranch(x) | Licensed(x) | Operate(x) | CrossBorder(x) | Threaten(x) | Coerce(x) | InsuranceBuyer(x) | CommercialBank(x) | Customer(x) | InsurancePolicy(x).\n\nExplanation:\nForce(x): x forces customers to buy insurance.\nBorrow(x): x borrows.\nSelect(x): x selects an insurer or foreign branch.\nInsurance(x): x is an insurance.\nInsurer(x): x is an insurer.\nForeignBranch(x): x is a foreign branch.\nLicensed(x): x is licensed to operate.\nOperate(x): x operates.\nCrossBorder(x): x uses cross-border insurance services.\nThreaten(x): x threatens.\nCoerce(x): x coerces.\nInsuranceBuyer(x): x is an insurance buyer.\nCommercialBank(x): x is a commercial bank.\nCustomer(x): x is a customer.\nInsurancePolicy(x): x is an insurance policy.\n\nPremises:\nall x (CommercialBank(x) -> Customer(x)).\nall x (Customer(x) & Borrow(x) -> Insurance(x)).\n-Force(x) | Select(x).\nall x (Insurance(x) -> Insurer(x) | ForeignBranch(x)).\nall x (Licensed(x) & Operate(x) -> Vietnam(x)).\n-Force(x) | Threaten(x) | Coerce(x).\nall x (InsuranceBuyer(x) -> Select(x)).\n\nConclusion:\n-Force(x) | Borrow(x).",
        "premises": [
            "all x (CommercialBank(x) -> Customer(x)).",
            "all x (Customer(x) & Borrow(x) -> Insurance(x)).",
            "-Force(x) | Select(x).",
            "all x (Insurance(x) -> Insurer(x) | ForeignBranch(x)).",
            "all x (Licensed(x) & Operate(x) -> Vietnam(x)).",
            "-Force(x) | Threaten(x) | Coerce(x).",
            "all x (InsuranceBuyer(x) -> Select(x))."
        ],
        "conclusion": "-Force(x) | Borrow(x).",
        "id": "4e45a89c-0a24-4025-8283-071a48e0df16"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Clause 3 Article 11 of Decree No. 100/2019/ND-CP prescribes a fine of VND 200,000-VND to 300.000 VND for persons who are carried on motorcycles, mopeds (including electric motorcycles) and vehicles similar to motorcycles, vehicles similar as moped motorcycles, and mopheds (even electric bicycles) without \"helmet for riders\" or with \"helmet\" not fastening straps in accordance with specifications when participating in road traffic.\nGoals:\nIs there any fine for people sitting on motorbike without helmet?\n\nPredicates:\nCarry(x) | Fine(x) | Helmet(x) | Motorbike(x) | Moped(x) | ElectricMotorcycle(x) | ElectricBicycle(x) | RoadTraffic(x) | Person(x) | Straps(x) | Specifications(x) | FineAmount(x) | VND(x)\n\nExplanation:\nCarry(x): x carries something.\nFine(x): x is fined.\nHelmet(x): x has a helmet.\nMotorbike(x): x is a motorbike.\nMoped(x): x is a moped.\nElectricMotorcycle(x): x is an electric motorcycle.\nElectricBicycle(x): x is an electric bicycle.\nRoadTraffic(x): x is in road traffic.\nPerson(x): x is a person.\nStraps(x): x has straps.\nSpecifications(x): x has specifications.\nFineAmount(x): x is a fine amount.\nVND(x): x is in Vietnamese Dong.\n\nPremises:\nall x (Carry(x) & (Motorbike(x) | Moped(x) | ElectricMotorcycle(x) | ElectricBicycle(x)) & (~Helmet(x) | ~Straps(x)) -> FineAmount(x)).\nFineAmount(x) >= 200000 & FineAmount(x) <= 300000.\n\nConclusion:\nall x (Carry(x) & Motorbike(x) & ~Helmet(x)) -> FineAmount(x).",
        "premises": [
            "all x (Carry(x) & (Motorbike(x) | Moped(x) | ElectricMotorcycle(x) | ElectricBicycle(x)) & (~Helmet(x) | ~Straps(x)) -> FineAmount(x)).",
            "FineAmount(x) >= 200000 & FineAmount(x) <= 300000."
        ],
        "conclusion": "all x (Carry(x) & Motorbike(x) & ~Helmet(x)) -> FineAmount(x).",
        "id": "5b287a17-0ea7-457c-8a7b-a38a040c2444"
    },
    {
        "raw": "Rules:\n1. According to Article 18 of Circular No. 12/2017/TT-BGTVT and Point b Clause 12 Article 1 of Circular 38/2019/TD-BTGVT, responsibilities of driving test centers are specified as follows: 1 Ensure facilities, testing equipment and scoring instruments as prescribed to ensure accuracy and objectivity in tests; report to the Department of Transport and Directorate for Roads of Vietnam on inaccurate and unstable testing equipment or changes in testing equipment for timely handling. 2. Cooperate with driver training institutions in providing refresher courses and driving test councils in organizing tests conveniently and on schedule. 3. Comply with and cooperate with competent authorities in inspecting and assessing driving test centers. 4. Publicly announce the testing fees and other service charges.\nGoals:\nIs it allowed to use external vehicles when driving test?\n\nPredicates:\nTestCenter(x) | Ensure(x) | Report(x) | Cooperate(x) | Inspect(x) | Assess(x) | Announce(x) | ExternalVehicle(x) | DrivingTest(x) | Allow(x) | Vietnam(x) | Department(x) | Directorate(x) | CompetentAuthority(x).\n\nExplanation:\nTestCenter(x): x is a driving test center.\nEnsure(x): x ensures something.\nReport(x): x reports something.\nCooperate(x): x cooperates with someone.\nInspect(x): x inspects something.\nAssess(x): x assesses something.\nAnnounce(x): x announces something.\nExternalVehicle(x): x is an external vehicle.\nDrivingTest(x): x is a driving test.\nAllow(x): x allows something.\nVietnam(x): x is in Vietnam.\nDepartment(x): x is the Department of Transport.\nDirectorate(x): x is the Directorate for Roads of Vietnam.\nCompetentAuthority(x): x is a competent authority.\n\nPremises:\nall x (TestCenter(x) -> (Ensure(x) & Report(x) & Cooperate(x) & Inspect(x) & Assess(x) & Announce(x))).\nall x (Cooperate(x) -> (DrivingTest(x) & Vietnam(x))).\n-ExternalVehicle(x) | Allow(x).\nall x (DrivingTest(x) -> TestCenter(x)).\nall x (Department(x) -> Vietnam(x)).\nall x (Directorate(x) -> Vietnam(x)).\nall x (CompetentAuthority(x) -> Vietnam(x)).\n\nConclusion:\n- Allow(x) | DrivingTest(x) & ExternalVehicle(x).",
        "premises": [
            "all x (TestCenter(x) -> (Ensure(x) & Report(x) & Cooperate(x) & Inspect(x) & Assess(x) & Announce(x))).",
            "all x (Cooperate(x) -> (DrivingTest(x) & Vietnam(x))).",
            "-ExternalVehicle(x) | Allow(x).",
            "all x (DrivingTest(x) -> TestCenter(x)).",
            "all x (Department(x) -> Vietnam(x)).",
            "all x (Directorate(x) -> Vietnam(x)).",
            "all x (CompetentAuthority(x) -> Vietnam(x))."
        ],
        "conclusion": "- Allow(x) | DrivingTest(x) & ExternalVehicle(x).",
        "id": "4e10db30-25ac-4972-8782-c85bebe53b57"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. A fine of VND 1,000,010-VND 2,020,500 shall be imposed for: Gathering to encourage or incite the vehicle running behind the speed limit, weaving, speeding, chasing on public roads, or racing illegally.\nGoals:\nIs there a fine for illegal racing cheer?\n\nPredicates:\nGather(x) | Encourage(x) | Incite(x) | SpeedLimit(x) | Vehicle(x) | Weave(x) | Speed(x) | Chase(x) | PublicRoad(x) | Racing(x) | Fine(x) | Illegal(x) | RacingCheer(x) | VND(x).\n\nExplanation:\nGather(x): x gathers.\nEncourage(x): x encourages.\nIncite(x): x incites.\nSpeedLimit(x): x is within the speed limit.\nVehicle(x): x is a vehicle.\nWeave(x): x weaves.\nSpeed(x): x speeds.\nChase(x): x chases.\nPublicRoad(x): x is on a public road.\nRacing(x): x races.\nFine(x): x is fined.\nIllegal(x): x is illegal.\nRacingCheer(x): x is a racing cheer.\nVND(x): x is in VND.\n\nPremises:\nall x (Gather(x) & Encourage(x) & Incite(x) -> (SpeedLimit(x) | Weave(x) | Speed(x) | Chase(x) | Racing(x))).\nall x (Racing(x) -> Illegal(x)).\nall x (RacingCheer(x) -> Racing(x)).\nall x (Racing(x) -> Fine(x)).\n-Illegal(x) | Fine(x).\n\nConclusion:\nall x (RacingCheer(x) -> Fine(x)).",
        "premises": [
            "all x (Gather(x) & Encourage(x) & Incite(x) -> (SpeedLimit(x) | Weave(x) | Speed(x) | Chase(x) | Racing(x))).",
            "all x (Racing(x) -> Illegal(x)).",
            "all x (RacingCheer(x) -> Racing(x)).",
            "all x (Racing(x) -> Fine(x)).",
            "-Illegal(x) | Fine(x)."
        ],
        "conclusion": "all x (RacingCheer(x) -> Fine(x)).",
        "id": "5eb886d7-66cc-4af9-82d0-68165dab50d2"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Taxis shall use fare meters.\n2. Taxes must be installed with fare meters which are inspected and led by a competent measurement agency and must have invoice or fare receipt printing devices connected to fare meters.\n3. Fare meters and printing devices must be fixed at noticeable positions.\n4. Drivers shall print invoices or fare receipts and return them to passengers upon the completion of their journeys.\n5. Fare receipts must contain at least the following information: name of the transport business, vehicle's registration plate number, travel distance (km) and total fare payable by passengers.\n\nGoals:\nIs taxi fare payment invoice received?\n\nExplanation:\nIsTaxiFarePaymentInvoiceReceived(x): x receives taxi fare payment invoice.\n\nPredicates:\nUseFareMeter(x) | Installed(x) | Inspected(x) | Led(x) | Connected(x) | Fixed(x) | Print(x) | Return(x) | Contain(x) | Name(x) | RegistrationPlateNumber(x) | TravelDistance(x) | TotalFare(x) | TransportBusiness(x) | Vehicle(x) | MeasurementAgency(x) | Invoice(x) | FareReceipt(x) | Taxi(x) | Payment(x) | Received(x)\n\nPremises:\nall x (UseFareMeter(x) -> Installed(x)).\nall x (Installed(x) -> (Inspected(x) & Led(x) & Connected(x))).\nall x (Fixed(x)).\nall x (Print(x) & Return(x)).\nall x (Contain(x) -> (Name(x) & RegistrationPlateNumber(x) & TravelDistance(x) & TotalFare(x))).\nall x (TransportBusiness(x) -> (Vehicle(x) & MeasurementAgency(x))).\n-Print(x) | Return(x).\nall x (Taxi(x) -> Payment(x)).\n\nConclusion:\nall x (Received(x) -> Print(x)).",
        "premises": [
            "all x (UseFareMeter(x) -> Installed(x)).",
            "all x (Installed(x) -> (Inspected(x) & Led(x) & Connected(x))).",
            "all x (Fixed(x)).",
            "all x (Print(x) & Return(x)).",
            "all x (Contain(x) -> (Name(x) & RegistrationPlateNumber(x) & TravelDistance(x) & TotalFare(x))).",
            "all x (TransportBusiness(x) -> (Vehicle(x) & MeasurementAgency(x))).",
            "-Print(x) | Return(x).",
            "all x (Taxi(x) -> Payment(x))."
        ],
        "conclusion": "all x (Received(x) -> Print(x)).",
        "id": "30bcbd8a-b317-4796-989c-bc8e651a35b5"
    },
    {
        "raw": "Rules:\n1. Administrative sanctioning without making record is applied in case of warning or fine up to VND 250,000 for individuals and VND 500,000 to organizations and the competent authority must issue decisions on sanctioning administrative violations on the spot.\n2. Administrative violations detected through the use of technical and professional means and equipment must be recorded in writing.\n\nGoals:\nNo penalty for driving a motorcycle past a red light.\n\nPredicates:\nSanction(x) | Record(x) | Fine(x) | Warning(x) | Organization(x) | Individual(x) | Decision(x) | Technical(x) | Professional(x) | Equipment(x) | Violation(x) | Motorcycle(x) | Light(x) | RedLight(x) | Penalty(x) | Authority(x).\n\nExplanation:\nSanction(x): x is sanctioned.\nRecord(x): x makes a record.\nFine(x): x is fined.\nWarning(x): x is warned.\nOrganization(x): x is an organization.\nIndividual(x): x is an individual.\nDecision(x): x makes a decision.\nTechnical(x): x is technical.\nProfessional(x): x is professional.\nEquipment(x): x is equipment.\nViolation(x): x is a violation.\nMotorcycle(x): x is a motorcycle.\nLight(x): x is a light.\nRedLight(x): x is a red light.\nPenalty(x): x is a penalty.\nAuthority(x): x is an authority.\n\nPremises:\nall x (Sanction(x) -> (Record(x) | Fine(x) | Warning(x))).\nall x (Record(x) -> Decision(x)).\nall x (Decision(x) -> Authority(x)).\n-Technical(x) | Professional(x).\nall x (Equipment(x) -> Technical(x) | Professional(x)).\nall x (Violation(x) -> Motorcycle(x) & Light(x) & RedLight(x)).\n\nConclusion:\n-not Penalty(x).",
        "premises": [
            "all x (Sanction(x) -> (Record(x) | Fine(x) | Warning(x))).",
            "all x (Record(x) -> Decision(x)).",
            "all x (Decision(x) -> Authority(x)).",
            "-Technical(x) | Professional(x).",
            "all x (Equipment(x) -> Technical(x) | Professional(x)).",
            "all x (Violation(x) -> Motorcycle(x) & Light(x) & RedLight(x))."
        ],
        "conclusion": "-not Penalty(x).",
        "id": "47a6e4c4-d3c3-494e-98ea-90934f1fd5cd"
    },
    {
        "raw": "Rules:\n1. The probation period shall not be included in the calculation of seniority pay.\n2. The time taken as an unpaid leave for at least 01 consecutive month shall not be included in the calculation of seniority pay.\n3. The time taken as sick leave or maternity leave that exceeds the time limit prescribed by the social insurance law shall not be included in the calculation of seniority pay.\n4. The time spent working as experts, attending training, practice, working or survey at home or abroad that exceeds the time limit decided by competent agencies shall not be included in the calculation of seniority pay.\n5. The period of suspension or temporary detainment or detention for investigation, prosecution or adjudication shall not be included in the calculation of seniority pay.\n6. The period of time not working other than those specified at Points a, b, c, d and e, Clause 2 of this Article shall not be included in the calculation of seniority pay.\nGoals:\nThe apprenticeship period is not included in the teacher seniority allowance.\nExplanation:\nApprenticeshipPeriod(x): x is the apprenticeship period.\nTeacherSeniorityAllowance(x): x is the teacher seniority allowance.\nInclude(x, y): x includes y.\nProbationPeriod(x): x is the probation period.\nUnpaidLeave(x): x is an unpaid leave.\nSickLeave(x): x is a sick leave.\nMaternityLeave(x): x is a maternity leave.\nSocialInsuranceLaw(x): x is the social insurance law.\nTimeLimit(x): x is a time limit.\nExpert(x): x is an expert.\nTraining(x): x is a training.\nPractice(x): x is a practice.\nSurvey(x): x is a survey.\nCompetentAgency(x): x is a competent agency.\nSuspension(x): x is a suspension.\nTemporaryDetainment(x): x is a temporary detainment.\nDetention(x): x is a detention.\nInvestigation(x): x is an investigation.\nProsecution(x): x is a prosecution.\nAdjudication(x): x is an adjudication.\n\nPremises:\n- Include(ApprenticeshipPeriod(x), TeacherSeniorityAllowance(x)).\n- Include(ProbationPeriod(x), TeacherSeniorityAllowance(x)).\n- Include(UnpaidLeave(x), TeacherSeniorityAllowance(x)).\n- Include(SickLeave(x), TeacherSeniorityAllowance(x)).\n- Include(MaternityLeave(x), TeacherSeniorityAllowance(x)).\n- Include(Expert(x), TeacherSeniorityAllowance(x)).\n- Include(Training(x), TeacherSeniorityAllowance(x)).\n- Include(Practice(x), TeacherSeniorityAllowance(x)).\n- Include(Survey(x), TeacherSeniorityAllowance(x)).\n- Include(Suspension(x), TeacherSeniorityAllowance(x)).\n- Include(TemporaryDetainment(x), TeacherSeniorityAllowance(x)).\n- Include(Detention(x), TeacherSeniorityAllowance(x)).\n- Include(Investigation(x), TeacherSeniorityAllowance(x)).\n- Include(Prosecution(x), TeacherSeniorityAllowance(x)).\n- Include(Adjudication(x), TeacherSeniorityAllowance(x)).\n\nConclusion:\nall x (ApprenticeshipPeriod(x) -> -Include(ApprenticeshipPeriod(x), TeacherSeniorityAllowance(x))).",
        "premises": [
            "- Include(ApprenticeshipPeriod(x), TeacherSeniorityAllowance(x)).",
            "- Include(ProbationPeriod(x), TeacherSeniorityAllowance(x)).",
            "- Include(UnpaidLeave(x), TeacherSeniorityAllowance(x)).",
            "- Include(SickLeave(x), TeacherSeniorityAllowance(x)).",
            "- Include(MaternityLeave(x), TeacherSeniorityAllowance(x)).",
            "- Include(Expert(x), TeacherSeniorityAllowance(x)).",
            "- Include(Training(x), TeacherSeniorityAllowance(x)).",
            "- Include(Practice(x), TeacherSeniorityAllowance(x)).",
            "- Include(Survey(x), TeacherSeniorityAllowance(x)).",
            "- Include(Suspension(x), TeacherSeniorityAllowance(x)).",
            "- Include(TemporaryDetainment(x), TeacherSeniorityAllowance(x)).",
            "- Include(Detention(x), TeacherSeniorityAllowance(x)).",
            "- Include(Investigation(x), TeacherSeniorityAllowance(x)).",
            "- Include(Prosecution(x), TeacherSeniorityAllowance(x)).",
            "- Include(Adjudication(x), TeacherSeniorityAllowance(x))."
        ],
        "conclusion": "all x (ApprenticeshipPeriod(x) -> -Include(ApprenticeshipPeriod(x), TeacherSeniorityAllowance(x))).",
        "id": "51f10192-1372-4963-8d64-987396853c1b"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Candidates who have one of the following valid Foreign Language certificates (same or different from the Foreign Language subject they are learning in high school) valid until July 6, 2022 and obtaining the minimum score according to the following table: Foreign Language Subject Minimum Certificate English 1 Certificate issuer - TOEFL ITP 450 points - TOEFL iBT 45\n2. \n\nGoals:\nAre TOEIC certificates exempted from English language exam exemption for 2021 high school graduation exam?\n\nPredicates:\nExempt(x) | TOEIC(x) | English(x) | Certificate(x) | TOEFL(x) | ITP(x) | iBT(x) | HighSchool(x) | Graduation(x) | Assessment(x) | Language(x) | Subject(x) | Score(x) | Table(x) | July(x) | 2022(x) | Points(x) | Minimum(x) | CertificateIssuer(x) | TOEFLITP(x) | TOEFLiBT(x).\n\nExplanation:\nExempt(x): x is exempt.\nTOEIC(x): x is a TOEIC certificate.\nEnglish(x): x is related to English language.\nCertificate(x): x is a certificate.\nTOEFL(x): x is a TOEFL certificate.\nITP(x): x is a TOEFL ITP certificate.\niBT(x): x is a TOEFL iBT certificate.\nHighSchool(x): x is related to high school.\nGraduation(x): x is a graduation assessment.\nAssessment(x): x is an assessment.\nLanguage(x): x is a language.\nSubject(x): x is a subject.\nScore(x): x is a score.\nTable(x): x is a table.\nJuly(x): x is in July.\n2022(x): x is in 2022.\nPoints(x): x is a point.\nMinimum(x): x is a minimum.\nCertificateIssuer(x): x is a certificate issuer.\nTOEFLITP(x): x is a TOEFL ITP certificate issuer.\nTOEFLiBT(x): x is a TOEFL iBT certificate issuer.\n\nPremises:\nall x (Exempt(x) -> (TOEIC(x) | TOEFL(x))).\nall x (TOEIC(x) -> (English(x) & Certificate(x) & TOEFLITP(x))).\nall x (TOEFL(x) -> (English(x) & Certificate(x) & TOEFLiBT(x))).\nall x (Exempt(x) -> HighSchool(x)).\nall x (Graduation(x) -> Assessment(x)).\nall x (Exempt(x) -> Graduation(x)).\nall x (Exempt(x) -> (Score(x) >= 450)).\nall x (Table(x) -> (Score(x) >= 45)).\nall x (July(x) -> 2022(x)).\n\nConclusion:\nall x (TOEIC(x) -> Exempt(x)).",
        "premises": [
            "all x (Exempt(x) -> (TOEIC(x) | TOEFL(x))).",
            "all x (TOEIC(x) -> (English(x) & Certificate(x) & TOEFLITP(x))).",
            "all x (TOEFL(x) -> (English(x) & Certificate(x) & TOEFLiBT(x))).",
            "all x (Exempt(x) -> HighSchool(x)).",
            "all x (Graduation(x) -> Assessment(x)).",
            "all x (Exempt(x) -> Graduation(x)).",
            "all x (Exempt(x) -> (Score(x) >= 450)).",
            "all x (Table(x) -> (Score(x) >= 45)).",
            "all x (July(x) -> 2022(x))."
        ],
        "conclusion": "all x (TOEIC(x) -> Exempt(x)).",
        "id": "37218e1b-e898-4531-97ab-8c4128375fe4"
    },
    {
        "raw": "Rules:\n1. In Clause 2 Article 20 of the Regulation on admission to higher education issued together with Circular No. 09/2020/TT-BGDDT, it is required that successful candidates shall submit valid copies of the following documents: \n   - Academic transcripts; \n   - Temporary high school graduation certificates for those who passed the school in the year of graduation or high school diplomas for those that graduated in previous years. \n   - The birth certificate; \n   - The evidence for the priority policy prescribed in the guiding documents of the Ministry of Education and Training; \n   - Other requirements as prescribed by the schools.\nGoals:\nIs it mandatory to have a duplicate ID in a college application?\n###\nPredicates:\nDuplicate(x) | ID(x) | Mandatory(x) | AcademicTranscript(x) | TemporaryGraduationCertificate(x) | HighSchoolDiploma(x) | BirthCertificate(x) | PriorityPolicy(x) | GuidingDocument(x) | MinistryOfEducation(x) | Training(x) | School(x) | CollegeApplication(x).\n\nExplanation:\nDuplicate(x): x is a duplicate.\nID(x): x is an ID.\nMandatory(x): x is mandatory.\nAcademicTranscript(x): x is an academic transcript.\nTemporaryGraduationCertificate(x): x is a temporary high school graduation certificate.\nHighSchoolDiploma(x): x is a high school diploma.\nBirthCertificate(x): x is a birth certificate.\nPriorityPolicy(x): x is a priority policy.\nGuidingDocument(x): x is a guiding document.\nMinistryOfEducation(x): x is the Ministry of Education.\nTraining(x): x is training.\nSchool(x): x is a school.\nCollegeApplication(x): x is a college application.\n\nPremises:\nall x (CollegeApplication(x) -> (AcademicTranscript(x) | TemporaryGraduationCertificate(x) | HighSchoolDiploma(x) | BirthCertificate(x) | PriorityPolicy(x) | GuidingDocument(x) | School(x))).\nall x (Duplicate(x) -> ID(x)).\nall x (Mandatory(x) -> CollegeApplication(x)).\nall x (ID(x) -> Mandatory(x)).\nall x (School(x) -> MinistryOfEducation(x)).\n- Duplicate(x) | Mandatory(x).\n\nConclusion:\nall x (CollegeApplication(x) -> Mandatory(x)).",
        "premises": [
            "all x (CollegeApplication(x) -> (AcademicTranscript(x) | TemporaryGraduationCertificate(x) | HighSchoolDiploma(x) | BirthCertificate(x) | PriorityPolicy(x) | GuidingDocument(x) | School(x))).",
            "all x (Duplicate(x) -> ID(x)).",
            "all x (Mandatory(x) -> CollegeApplication(x)).",
            "all x (ID(x) -> Mandatory(x)).",
            "all x (School(x) -> MinistryOfEducation(x)).",
            "- Duplicate(x) | Mandatory(x)."
        ],
        "conclusion": "all x (CollegeApplication(x) -> Mandatory(x)).",
        "id": "178253f0-1064-4cc6-bfec-eac6f2325997"
    },
    {
        "raw": "Rules:\n1. Transfer of copyright or related rights means the transfer by copyright or associated right holders of the ownership over the rights specified in Clause 3, Article 19, Article 20, Clause 3 of Article 29, Articles 30 and 31 of this Law to other organizations or individuals under contracts or relevant laws.\n2. The author must not transfer the moral rights referred to in article 19, except for the right to publish the work; the performer must not assign the moral right referred to at paragraph 2 of article 29 of this Law.\n3. In case a work, performance, phonogram, video recording or broadcast is owned by co-owners, the transfer must be agreed upon by all co-owner; in case there are co-owned owners but the work, show, phonic, video recorder or broadcast has separate parts which can be detached and used independently, the copyright or related right holder may transfer copyright or relevant rights to his/her separate parts to another organization or individual.\n4. The licensing of copyright or involved rights shall be effected through a licensing contract which, as prescribed in Article 46 of the Intellectual Property Law, must basically contain the following information: a) Full names and addresses of the transferor and transferee; b) Grounds for transfer; c) Price and payment method; d) Rights and obligations of the parties; d) Liabilities for breach of contract.\n5. The performance, modification, termination and cancellation of contracts on transfer of copyright or related rights comply with the Civil Code.\n\nGoals:\nIs it possible to transfer copyright, related rights?\n\nExplanation:\nTransfer(x): x transfers copyright or related rights.\nOwn(x): x owns rights.\nCoOwner(x): x is a co-owner.\nMoralRight(x): x has moral rights.\nPublish(x): x publishes a work.\nContract(x): x has a contract.\nFullNames(x): x has full names.\nAddresses(x): x has addresses.\nGrounds(x): x has grounds for transfer.\nPrice(x): x has a price.\nPaymentMethod(x): x has a payment method.\nRights(x): x has rights and obligations.\nLiabilities(x): x has liabilities for breach of contract.\n\nPremises:\nall x (Transfer(x) -> (Own(x) | CoOwner(x))).\nall x (MoralRight(x) -> (Publish(x) | Not Own(x))).\nall x (CoOwner(x) -> (Agree(x) | SeparateParts(x))).\nall x (Contract(x) -> (FullNames(x) & Addresses(x) & Grounds(x) & Price(x) & PaymentMethod(x) & Rights(x) & Liabilities(x))).\nall x (Licensing(x) -> Contract(x)).\nall x (CivilCode(x) -> (Perform(x) | Modify(x) | Terminate(x) | Cancel(x))).\n\nConclusion:\nall x (Transfer(x) -> Possible(x)).\nPossible(x): x is possible to transfer copyright, related rights.",
        "premises": [
            "all x (Transfer(x) -> (Own(x) | CoOwner(x))).",
            "all x (MoralRight(x) -> (Publish(x) | Not Own(x))).",
            "all x (CoOwner(x) -> (Agree(x) | SeparateParts(x))).",
            "all x (Contract(x) -> (FullNames(x) & Addresses(x) & Grounds(x) & Price(x) & PaymentMethod(x) & Rights(x) & Liabilities(x))).",
            "all x (Licensing(x) -> Contract(x)).",
            "all x (CivilCode(x) -> (Perform(x) | Modify(x) | Terminate(x) | Cancel(x)))."
        ],
        "conclusion": "Possible(x): x is possible to transfer copyright, related rights.",
        "id": "808a7386-db06-4da8-b618-f0eea5a09f2d"
    },
    {
        "raw": "Rules:\n1. Pupils and students currently living in households lawfully residing in localities where loans are provided and who fully meet the criteria specified in Article 2 of this Decision, according to Article 4 of Decision No. 157/2007/QD-TTg, are required to borrow loans.\n2. For first-year pupils and students, there must be admission notices or admission certificates of their schools.\n3. For pupils and students from the second year on, they must have the school's certification that they are studying at the school and have not been administratively sanctioned or sanctioned for such acts as gambling, smoking, theft, smuggling.\nGoals:\nIs it possible to borrow money from a photocopy of your college application?\n###\nPredicates:\nBorrow(x) | Loan(x) | Criteria(x) | Decision(x) | Article(x) | Pupil(x) | Student(x) | Household(x) | Locality(x) | School(x) | Admission(x) | Certification(x) | Sanction(x) | Gamble(x) | Smoke(x) | Theft(x) | Smuggle(x) | Photocopy(x) | CollegeApplication(x) | Money(x).\n\nExplanation:\nBorrow(x): x borrows money.\nLoan(x): x is a loan.\nCriteria(x): x meets the criteria.\nDecision(x): x is a decision.\nArticle(x): x is an article.\nPupil(x): x is a pupil.\nStudent(x): x is a student.\nHousehold(x): x is a household.\nLocality(x): x is a locality.\nSchool(x): x is a school.\nAdmission(x): x is an admission.\nCertification(x): x is a certification.\nSanction(x): x is a sanction.\nGamble(x): x gambles.\nSmoke(x): x smokes.\nTheft(x): x steals.\nSmuggle(x): x smuggles.\nPhotocopy(x): x photocopies.\nCollegeApplication(x): x is a college application.\nMoney(x): x is money.\n\nPremises:\nall x (Pupil(x) & Student(x) & Household(x) & Locality(x) & Decision(x) & Criteria(x) -> Borrow(x)).\nall x (Pupil(x) & Student(x) & School(x) -> Admission(x)).\nall x (Student(x) & School(x) & Certification(x) -> Not Sanction(x)).\nall x (Not Sanction(x) -> Not Gamble(x) & Not Smoke(x) & Not Theft(x) & Not Smuggle(x)).\n-Photocopy(x) | CollegeApplication(x).\n\nConclusion:\n-All x (Borrow(x) -> Photocopy(x)).",
        "premises": [
            "all x (Pupil(x) & Student(x) & Household(x) & Locality(x) & Decision(x) & Criteria(x) -> Borrow(x)).",
            "all x (Pupil(x) & Student(x) & School(x) -> Admission(x)).",
            "all x (Student(x) & School(x) & Certification(x) -> Not Sanction(x)).",
            "all x (Not Sanction(x) -> Not Gamble(x) & Not Smoke(x) & Not Theft(x) & Not Smuggle(x)).",
            "-Photocopy(x) | CollegeApplication(x)."
        ],
        "conclusion": "-All x (Borrow(x) -> Photocopy(x)).",
        "id": "b96214fc-dfb4-46d2-98d8-bea1721ab331"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Pursuant to Clause 1 Article 13 of Decree No. 46/2021/ND-CP on lease, lease, mortgage and pledge of assets as follows: The Development Bank may lease, mortgage and pledge assets under its rights to use and own assets in accordance with regulations of law with respect to wholly state-owned single-member limited liability companies.\nGoals:\nIs the Development Bank getting a lease on assets?\n\nPredicates:\nLease(x) | Mortgage(x) | Pledge(x) | Use(x) | Own(x) | Regulation(x) | Law(x) | DevelopmentBank(x) | Asset(x) | SingleMemberLimitedLiabilityCompany(x) | WhollyStateOwned(x).\n\nExplanation:\nLease(x): x leases assets.\nMortgage(x): x mortgages assets.\nPledge(x): x pledges assets.\nUse(x): x uses assets.\nOwn(x): x owns assets.\nRegulation(x): x is regulated by law.\nLaw(x): x is a law.\nDevelopmentBank(x): x is the Development Bank.\nAsset(x): x is an asset.\nSingleMemberLimitedLiabilityCompany(x): x is a single-member limited liability company.\nWhollyStateOwned(x): x is wholly state-owned.\n\nPremises:\nall x (Lease(x) | Mortgage(x) | Pledge(x)) & (Use(x) | Own(x)) & Regulation(x) & Law(x) & DevelopmentBank(x) & Asset(x) & SingleMemberLimitedLiabilityCompany(x) & WhollyStateOwned(x).\nConclusion:\nall x (Lease(x)).",
        "premises": [
            "all x (Lease(x) | Mortgage(x) | Pledge(x)) & (Use(x) | Own(x)) & Regulation(x) & Law(x) & DevelopmentBank(x) & Asset(x) & SingleMemberLimitedLiabilityCompany(x) & WhollyStateOwned(x)."
        ],
        "conclusion": "all x (Lease(x)).",
        "id": "26fef828-fd26-4854-bc97-370091508c7e"
    },
    {
        "raw": "Rules:\n1. The current account holder may authorize another person to use the current accounts as prescribed in Article 4 of this Circular.\n2. The payment account holder shall be entitled to authorize another person to use his/her payment account.\n3. The authorization in using payment account must be made in writing and comply with the provisions of the law on authorization.\n4. In order to authorize the use of a payment account, the account holder shall send to the payment service supplier where the account is opened a letter of authorization, enclosed with a registration of specimen signature and a copy of ID card or passport of the authorized person (if the copy is not certified, the original must be presented for comparison).\nGoals:\nCan someone use my bank account?\n\nPredicates:\nAuthorize(x) | CurrentAccount(x) | PaymentAccount(x) | AccountHolder(x) | PaymentServiceSupplier(x) | Law(x) | Letter(x) | Registration(x) | IDCard(x) | Passport(x) | Certification(x) | BankAccount(x).\n\nExplanation:\nAuthorize(x): x authorizes someone to use a bank account.\nCurrentAccount(x): x is a current account.\nPaymentAccount(x): x is a payment account.\nAccountHolder(x): x is the account holder.\nPaymentServiceSupplier(x): x is the payment service supplier.\nLaw(x): x is a law.\nLetter(x): x is a letter of authorization.\nRegistration(x): x is a registration of specimen signature.\nIDCard(x): x is an ID card.\nPassport(x): x is a passport.\nCertification(x): x is certified.\nBankAccount(x): x is a bank account.\n\nPremises:\nall x (AccountHolder(x) -> (Authorize(x) & PaymentAccount(x) & PaymentServiceSupplier(x) & Law(x) & Letter(x) & Registration(x) & IDCard(x) & Passport(x) & Certification(x))).\nall x (Authorize(x) -> BankAccount(x)).\n\nConclusion:\nall x (BankAccount(x) -> Authorize(x)).",
        "premises": [
            "all x (AccountHolder(x) -> (Authorize(x) & PaymentAccount(x) & PaymentServiceSupplier(x) & Law(x) & Letter(x) & Registration(x) & IDCard(x) & Passport(x) & Certification(x))).",
            "all x (Authorize(x) -> BankAccount(x))."
        ],
        "conclusion": "all x (BankAccount(x) -> Authorize(x)).",
        "id": "35a10650-e894-4ed9-a7eb-937ad9cf7339"
    },
    {
        "raw": "Rules:\n1. Persons aged 18 years or older and having full legal capacity as prescribed by Vietnamese law may open payment accounts.\n2. Persons from 15 years old to under 18 who do not have lost or limited legal capacity may open payment accounts.\n3. Minors aged 15, persons with limited legal capability or persons with lost legal capacity prescribed by Vietnam's law may open payment accounts through their legal representatives.\n4. People with limited cognition and behavior control prescribed by the Vietnamese law may use their guardians to open payment account.\nGoals:\nAre ATM cards available for under 18?\n\nPredicates:\nOpenAccount(x) | LegalCapacity(x) | Limited(x) | Lost(x) | Representative(x) | Guardian(x) | ATM(x) | Under18(x) | VietnameseLaw(x).\n\nExplanation:\nOpenAccount(x): x opens a payment account.\nLegalCapacity(x): x has full legal capacity.\nLimited(x): x has limited legal capacity.\nLost(x): x has lost legal capacity.\nRepresentative(x): x is a legal representative.\nGuardian(x): x is a guardian.\nATM(x): x is an ATM card.\nUnder18(x): x is under 18 years old.\nVietnameseLaw(x): x is prescribed by Vietnamese law.\n\nPremises:\nall x (OpenAccount(x) -> (LegalCapacity(x) | Limited(x) | Lost(x))).\nall x (LegalCapacity(x) -> (OpenAccount(x) & VietnameseLaw(x))).\nall x (Limited(x) -> (OpenAccount(x) & VietnameseLaw(x))).\nall x (Lost(x) -> (OpenAccount(x) & VietnameseLaw(x))).\nall x (Representative(x) -> Guardian(x)).\nall x (Under18(x) -> (OpenAccount(x) & Representative(x))).\n\nConclusion:\nall x (Under18(x) -> OpenAccount(x)).",
        "premises": [
            "all x (OpenAccount(x) -> (LegalCapacity(x) | Limited(x) | Lost(x))).",
            "all x (LegalCapacity(x) -> (OpenAccount(x) & VietnameseLaw(x))).",
            "all x (Limited(x) -> (OpenAccount(x) & VietnameseLaw(x))).",
            "all x (Lost(x) -> (OpenAccount(x) & VietnameseLaw(x))).",
            "all x (Representative(x) -> Guardian(x)).",
            "all x (Under18(x) -> (OpenAccount(x) & Representative(x)))."
        ],
        "conclusion": "all x (Under18(x) -> OpenAccount(x)).",
        "id": "4f908e7a-761c-42f1-8ea3-d4b300644b0a"
    },
    {
        "raw": "Rules:\n1. In the territory of Vietnam, cash withdrawal transactions by cards must be performed in Vietnam dong.\n2. For other card transactions, transaction currency is Vietnam dong, currency used for payment is Vietnam dong, and in case of conversion from a foreign currency into Vietnam dong, the exchange rate between Vietnam dong and a foreign-currency amount shall be agreed upon by the parties in accordance with the State Bank's regulations.\n3. Outside Vietnam's territory, cardholders shall make payments in Vietnam dong to card-issuing organizations at the exchange rate agreed upon by the parties in accordance with the State Bank's regulations.\nGoals:\nUse foreign exchange when trading in bank cards is possible.\n###\nPredicates:\nWithdraw(x) | Transaction(x) | Card(x) | VietnamDong(x) | ForeignCurrency(x) | ExchangeRate(x) | Agreement(x) | StateBank(x) | Vietnam(x) | CardIssuing(x) | Organization(x) | Payment(x) | Trading(x) | CardTransaction(x).\n\nExplanation:\nWithdraw(x): x withdraws cash.\nTransaction(x): x is a transaction.\nCard(x): x is a card.\nVietnamDong(x): x is Vietnam dong.\nForeignCurrency(x): x is a foreign currency.\nExchangeRate(x): x is an exchange rate.\nAgreement(x): x has an agreement.\nStateBank(x): x is the State Bank.\nVietnam(x): x is in the territory of Vietnam.\nCardIssuing(x): x is a card-issuing organization.\nOrganization(x): x is an organization.\nPayment(x): x is a payment.\nTrading(x): x is trading.\nCardTransaction(x): x is a card transaction.\n\nPremises:\nall x (Withdraw(x) -> VietnamDong(x)).\nall x (Transaction(x) -> (VietnamDong(x) | VietnamDong(x))).\nall x (Card(x) -> Vietnam(x)).\nall x (ExchangeRate(x) -> Agreement(x)).\nall x (Agreement(x) -> StateBank(x)).\nall x (CardIssuing(x) -> Organization(x)).\n-CardTransaction(x) | VietnamDong(x).\n\nConclusion:\n-UseForeignExchange(x) | CardTransaction(x).",
        "premises": [
            "all x (Withdraw(x) -> VietnamDong(x)).",
            "all x (Transaction(x) -> (VietnamDong(x) | VietnamDong(x))).",
            "all x (Card(x) -> Vietnam(x)).",
            "all x (ExchangeRate(x) -> Agreement(x)).",
            "all x (Agreement(x) -> StateBank(x)).",
            "all x (CardIssuing(x) -> Organization(x)).",
            "-CardTransaction(x) | VietnamDong(x)."
        ],
        "conclusion": "-UseForeignExchange(x) | CardTransaction(x).",
        "id": "95fd7816-1864-4501-803d-d10677317dd7"
    },
    {
        "raw": "Rules:\n1. Credit institutions are not allowed to provide loans to meet the following capital demands: - Loans used for carrying out business investment activities in business lines prohibited by laws.\n2. To pay costs, meet the financial needs of transactions, acts prohibited by law.\n3. For purchase and use of goods and services in the business lines banned by law from investment.\n4. To buy gold bars.\nGoals:\nDid I get a bank loan to buy gold?\n\nPredicates:\nLoan(x) | BusinessInvestment(x) | ProhibitedBusinessLine(x) | ProhibitedAct(x) | GoldBar(x) | CreditInstitution(x) | Law(x) | Business(x) | Service(x) | Investment(x)\n\nExplanation:\nLoan(x): x gets a loan.\nBusinessInvestment(x): x invests in a business.\nProhibitedBusinessLine(x): x is a prohibited business line.\nProhibitedAct(x): x is a prohibited act.\nGoldBar(x): x is a gold bar.\nCreditInstitution(x): x is a credit institution.\nLaw(x): x is a law.\nBusiness(x): x is a business.\nService(x): x is a service.\nInvestment(x): x is an investment.\n\nPremises:\nall x (Loan(x) -> (BusinessInvestment(x) | ProhibitedBusinessLine(x) | ProhibitedAct(x) | GoldBar(x))).\nall x (ProhibitedBusinessLine(x) -> Law(x)).\nall x (ProhibitedAct(x) -> Law(x)).\nall x (GoldBar(x) -> Law(x)).\n-Loan(x) | ProhibitedBusinessLine(x).\n-Loan(x) | ProhibitedAct(x).\n-Loan(x) | GoldBar(x).\n\nConclusion:\n-Loan(x) | GoldBar(x).",
        "premises": [
            "all x (Loan(x) -> (BusinessInvestment(x) | ProhibitedBusinessLine(x) | ProhibitedAct(x) | GoldBar(x))).",
            "all x (ProhibitedBusinessLine(x) -> Law(x)).",
            "all x (ProhibitedAct(x) -> Law(x)).",
            "all x (GoldBar(x) -> Law(x)).",
            "-Loan(x) | ProhibitedBusinessLine(x).",
            "-Loan(x) | ProhibitedAct(x).",
            "-Loan(x) | GoldBar(x)."
        ],
        "conclusion": "-Loan(x) | GoldBar(x).",
        "id": "e6b27f8f-63a7-4a1d-a95b-0b8b5244f3a1"
    },
    {
        "raw": "Rules:\n1. Chairpersons of provincial People's Committees shall direct adoption of measures to limit mass gatherings from 00:00 am March 28 to April 15, 2021 inclusive.\n2. Stop meetings and events with more than 20 people in one room.\n3. Maintain a minimum distance of 2m between people at public places.\n4. Temporarily suspend the operation of business and service establishments in the area, except for those trading essential goods and services.\n5. Restrict movement of people, especially from infected provinces to other localities.\n6. Suspend or reorganize public transportation activities to restrict movement and mass gatherings except for vehicles transporting goods.\n7. The Ministry of Transport shall direct the restriction of flights and passenger transportation activities from Hanoi and Ho Chi Minh City to other places nationwide.\n8. Presidents of provincial-level People's Committees shall decide on business and service establishments to be closed.\n\nGoals:\nThe bank worked during the Covid-19 pandemic.\n\nExplanation:\nWorkBank(x): x works at the bank.\nCovid19(x): x is related to Covid-19.\n\nPredicates:\nWorkBank(x) | Covid19(x) | Limit(x) | Stop(x) | Maintain(x) | Suspend(x) | Restrict(x) | Decide(x) | Direct(x) | Infect(x) | Transport(x) | Goods(x) | Essential(x) | Public(x) | Vehicles(x) | Places(x) | Nationwide(x) | Committee(x) | Province(x) | People(x) | City(x) | Hanoi(x) | HoChiMinh(x) | March(x) | April(x) | 2021(x) | 2020(x) | PrimeMinister(x) | PeopleCommittee(x)\n\nPremises:\nall x (Limit(x) -> (Stop(x) | Maintain(x))).\nall x (Suspend(x) -> (Restrict(x) | Decide(x))).\nall x (Direct(x) -> (Infect(x) | Transport(x))).\nall x (WorkBank(x) -> Covid19(x)).\nall x (Covid19(x) -> (March(x) | April(x))).\nall x (PrimeMinister(x) -> (PeopleCommittee(x) | Province(x))).\n-WorkBank(x) | Covid19(x).\n\nConclusion:\nall x (WorkBank(x) -> Covid19(x)).\n------------------------",
        "premises": [
            "all x (Limit(x) -> (Stop(x) | Maintain(x))).",
            "all x (Suspend(x) -> (Restrict(x) | Decide(x))).",
            "all x (Direct(x) -> (Infect(x) | Transport(x))).",
            "all x (WorkBank(x) -> Covid19(x)).",
            "all x (Covid19(x) -> (March(x) | April(x))).",
            "all x (PrimeMinister(x) -> (PeopleCommittee(x) | Province(x))).",
            "-WorkBank(x) | Covid19(x)."
        ],
        "conclusion": "------------------------",
        "id": "230258b3-21a1-4dd3-a5e7-14305eb7b836"
    },
    {
        "raw": "Rules:\n1. The bank or foreign bank branch shall enter into a contract for current accounts opening with the client after checking and verifying that documents included in the application for current account opening are sufficient, legitimate and valid as prescribed.\n2. If the current account holder is an individual, the bank/foreign bank branch must meet the account holder or his/her guardian/legal representative in person when entering into the contract for opening and use of current accounts.\n3. In case where an individual living abroad, bank or foreign bank branch is unable to meet in person, it is possible to verify customer identification information through an agent bank or an intermediary bank, provided that the account holder is accurately identified and the bank or branch bank is responsible for its verification and identification of the current account holder.\nGoals:\nOpen a personal checking account while in a foreign country.\n\nExplanation:\nOpen(x): x opens a personal checking account.\nForeignCountry(x): x is in a foreign country.\nIndividual(x): x is an individual.\nSufficient(x): x has sufficient documents.\nLegitimate(x): x has legitimate documents.\nValid(x): x has valid documents.\nVerify(x): x verifies customer identification information.\nAgentBank(x): x is an agent bank.\nIntermediaryBank(x): x is an intermediary bank.\nAccuratelyIdentified(x): x is accurately identified.\nResponsible(x): x is responsible for its verification and identification.\n\nPredicates:\nOpen(x) | ForeignCountry(x) | Individual(x) | Sufficient(x) | Legitimate(x) | Valid(x) | Verify(x) | AgentBank(x) | IntermediaryBank(x) | AccuratelyIdentified(x) | Responsible(x) | CheckingAccount(x).\n\nPremises:\nall x (Open(x) -> (Sufficient(x) & Legitimate(x) & Valid(x))).\nall x (Individual(x) -> (Open(x) & Meet(x))).\nall x (ForeignCountry(x) -> (UnableToMeet(x) | Verify(x))).\nall x (UnableToMeet(x) -> (AgentBank(x) | IntermediaryBank(x))).\nall x (Verify(x) -> (AccuratelyIdentified(x) & Responsible(x))).\n-Open(x) | CheckingAccount(x).\n\nConclusion:\nall x (ForeignCountry(x) -> Open(x)).",
        "premises": [
            "all x (Open(x) -> (Sufficient(x) & Legitimate(x) & Valid(x))).",
            "all x (Individual(x) -> (Open(x) & Meet(x))).",
            "all x (ForeignCountry(x) -> (UnableToMeet(x) | Verify(x))).",
            "all x (UnableToMeet(x) -> (AgentBank(x) | IntermediaryBank(x))).",
            "all x (Verify(x) -> (AccuratelyIdentified(x) & Responsible(x))).",
            "-Open(x) | CheckingAccount(x)."
        ],
        "conclusion": "all x (ForeignCountry(x) -> Open(x)).",
        "id": "493689fe-2bee-4b7e-b5a3-836d0d4016d6"
    },
    {
        "raw": "Rules:\n1. An application form for opening a checking account made using the form provided by the bank/foreign bank's branch where the checking account is opened and in accordance with Clause 1 Article 13 hereof.\n2. The account holder's ID card or ID paper or unexpired passport, birth certificate (if the account holder is a Vietnamese citizen aged under 14 years ), entry visa or document proving exemption from entry visa (if he/she is a foreigner ), etc.\n\nGoals:\nForeigner(x) OpenBankAccount(x) in Vietnam(x).\n\nPredicates:\nForeigner(x) | OpenBankAccount(x) | IDCard(x) | IDPaper(x) | Passport(x) | BirthCertificate(x) | Visa(x) | Exemption(x) | VietnameseCitizen(x) | Vietnam(x) | CheckingAccount(x) | Bank(x) | ForeignBank(x) | Branch(x) | Clause(x) | Article(x) | Form(x) | AccountHolder(x).\n\nExplanation:\nForeigner(x): x is a foreigner.\nOpenBankAccount(x): x opens a bank account.\nIDCard(x): x has an ID card.\nIDPaper(x): x has an ID paper.\nPassport(x): x has an unexpired passport.\nBirthCertificate(x): x has a birth certificate.\nVisa(x): x has an entry visa.\nExemption(x): x has a document proving exemption from entry visa.\nVietnameseCitizen(x): x is a Vietnamese citizen.\nVietnam(x): x is in the territory of Vietnam.\nCheckingAccount(x): x is a checking account.\nBank(x): x is a bank.\nForeignBank(x): x is a foreign bank.\nBranch(x): x is a branch.\nClause(x): x is a clause.\nArticle(x): x is an article.\nForm(x): x is a form.\nAccountHolder(x): x is the account holder.\n\nPremises:\nall x (Foreigner(x) -> (IDCard(x) | IDPaper(x) | Passport(x) | BirthCertificate(x) | Visa(x) | Exemption(x))).\nall x (AccountHolder(x) -> Foreigner(x) | VietnameseCitizen(x)).\nall x (OpenBankAccount(x) -> AccountHolder(x)).\nall x (Bank(x) -> Vietnam(x)).\nall x (ForeignBank(x) -> Vietnam(x)).\nall x (Branch(x) -> Bank(x)).\nall x (Clause(x) -> Article(x)).\nall x (Article(x) -> Form(x)).\nall x (Form(x) -> CheckingAccount(x)).\n\nConclusion:\nall x (Foreigner(x) OpenBankAccount(x) in Vietnam(x)).",
        "premises": [
            "all x (Foreigner(x) -> (IDCard(x) | IDPaper(x) | Passport(x) | BirthCertificate(x) | Visa(x) | Exemption(x))).",
            "all x (AccountHolder(x) -> Foreigner(x) | VietnameseCitizen(x)).",
            "all x (OpenBankAccount(x) -> AccountHolder(x)).",
            "all x (Bank(x) -> Vietnam(x)).",
            "all x (ForeignBank(x) -> Vietnam(x)).",
            "all x (Branch(x) -> Bank(x)).",
            "all x (Clause(x) -> Article(x)).",
            "all x (Article(x) -> Form(x)).",
            "all x (Form(x) -> CheckingAccount(x))."
        ],
        "conclusion": "all x (Foreigner(x) OpenBankAccount(x) in Vietnam(x)).",
        "id": "6b572955-8836-4739-b856-aa1e912ff92f"
    },
    {
        "raw": "Rules:\n1. Pursuant to Article 105 of the 2015 Civil Code, property includes objects, money, valuable papers and property rights.\n2. Property includes real estate and movable property. Real estate and movable property may be existing property and future property.\n3. Other valuable papers in foreign currency, including government bonds, corporate bonds, promissory notes, shares and other valuable papers.\nGoals:\nAre stocks considered an asset?\n###\nPredicates:\nProperty(x) | Object(x) | Money(x) | ValuablePaper(x) | PropertyRight(x) | RealEstate(x) | MovableProperty(x) | ExistingProperty(x) | FutureProperty(x) | GovernmentBond(x) | CorporateBond(x) | PromissoryNote(x) | Share(x) | Asset(x).\n\nExplanation:\nProperty(x): x is property.\nObject(x): x is an object.\nMoney(x): x is money.\nValuablePaper(x): x is a valuable paper.\nPropertyRight(x): x is a property right.\nRealEstate(x): x is real estate.\nMovableProperty(x): x is movable property.\nExistingProperty(x): x is existing property.\nFutureProperty(x): x is future property.\nGovernmentBond(x): x is a government bond.\nCorporateBond(x): x is a corporate bond.\nPromissoryNote(x): x is a promissory note.\nShare(x): x is a share.\nAsset(x): x is an asset.\n\nPremises:\nall x (Property(x) -> (Object(x) | Money(x) | ValuablePaper(x) | PropertyRight(x))).\nall x (Property(x) -> (RealEstate(x) | MovableProperty(x))).\nall x (RealEstate(x) | MovableProperty(x) -> (ExistingProperty(x) | FutureProperty(x))).\nall x (ValuablePaper(x) -> (GovernmentBond(x) | CorporateBond(x) | PromissoryNote(x) | Share(x))).\nall x (Share(x) -> Asset(x)).\n\nConclusion:\nall x (Share(x) -> Asset(x)).",
        "premises": [
            "all x (Property(x) -> (Object(x) | Money(x) | ValuablePaper(x) | PropertyRight(x))).",
            "all x (Property(x) -> (RealEstate(x) | MovableProperty(x))).",
            "all x (RealEstate(x) | MovableProperty(x) -> (ExistingProperty(x) | FutureProperty(x))).",
            "all x (ValuablePaper(x) -> (GovernmentBond(x) | CorporateBond(x) | PromissoryNote(x) | Share(x))).",
            "all x (Share(x) -> Asset(x))."
        ],
        "conclusion": "all x (Share(x) -> Asset(x)).",
        "id": "ab0f849c-7637-4a9b-81b8-35140324fbc0"
    },
    {
        "raw": "Rules:\n1. Credit institutions shall take and pay out savings deposits at legal transaction locations within the operation network of credit institutions, except for taking and paying out savings deposit via electronic means.\n2. For each passbook, the credit institution may receive and pay out savings deposits at the transaction office where the passbook is issued or at other transaction offices of the credit institutions.\n3. In case a credit institution takes and pays out savings deposits at multiple transaction locations, it must ensure that the savings deposit taking and payment are accurate and safe for depositors and safe in operation for the credit institution.\n\nGoals:\nWithdraw savings account at another branch or withdraw it at the same place.\n\nPredicates:\nTakeSavings(x): x takes savings.\nPayOutSavings(x): x pays out savings.\nReceiveSavings(x): x receives savings.\nDepositor(x): x is a depositor.\nCreditInstitution(x): x is a credit institution.\nTransactionLocation(x): x is a transaction location.\nOperationNetwork(x): x is in the operation network.\nElectronic(x): x is electronic.\nPassbook(x): x is a passbook.\nSamePlace(x): x is the same place.\nAnotherBranch(x): x is another branch.\n\nExplanation:\nTakeSavings(x): x takes savings.\nPayOutSavings(x): x pays out savings.\nReceiveSavings(x): x receives savings.\nDepositor(x): x is a depositor.\nCreditInstitution(x): x is a credit institution.\nTransactionLocation(x): x is a transaction location.\nOperationNetwork(x): x is in the operation network.\nElectronic(x): x is electronic.\nPassbook(x): x is a passbook.\nSamePlace(x): x is the same place.\nAnotherBranch(x): x is another branch.\n\nPremises:\nall x (CreditInstitution(x) -> (TakeSavings(x) & PayOutSavings(x)) & (ReceiveSavings(x))).\nall x (TransactionLocation(x) -> OperationNetwork(x)).\nall x (Electronic(x) -> ~TransactionLocation(x)).\nall x (Passbook(x) -> (ReceiveSavings(x) | PayOutSavings(x))).\nall x (SamePlace(x) -> (TakeSavings(x) & PayOutSavings(x))).\nall x (AnotherBranch(x) -> ~SamePlace(x)).\n\nConclusion:\nall x (Depositor(x) -> (TakeSavings(x) | PayOutSavings(x)) & (ReceiveSavings(x))).\n\nNote: The conclusion is not directly related to the goals, but it can be interpreted that a depositor can withdraw their savings account at another branch or the same place, as long as the credit institution is operating within its network.",
        "premises": [
            "all x (CreditInstitution(x) -> (TakeSavings(x) & PayOutSavings(x)) & (ReceiveSavings(x))).",
            "all x (TransactionLocation(x) -> OperationNetwork(x)).",
            "all x (Electronic(x) -> ~TransactionLocation(x)).",
            "all x (Passbook(x) -> (ReceiveSavings(x) | PayOutSavings(x))).",
            "all x (SamePlace(x) -> (TakeSavings(x) & PayOutSavings(x))).",
            "all x (AnotherBranch(x) -> ~SamePlace(x))."
        ],
        "conclusion": "Note: The conclusion is not directly related to the goals, but it can be interpreted that a depositor can withdraw their savings account at another branch or the same place, as long as the credit institution is operating within its network.",
        "id": "d6b119c0-4773-4b19-88ad-b9de5f9af16b"
    },
    {
        "raw": "Rules:\n1. Article 4 of Decree No. 117/2018/ND-CP prescribes confidentiality and provision of client information as follows: 1 Client's information of credit institutions and foreign bank branches must be kept confidential and only provided in accordance with the 2010 Law on Credit Institutions and its 2020 amendments, this Decree and relevant laws. 2. Credit institutions and foreign bank branches shall not be allowed to provide client verification information when accessing banking services, including secret keys, biometric data, customer access passwords and other client verification data, to any entity, organization or individual, unless otherwise approved in writing by that customer or in other forms as agreed upon with that customer. 3. Regulatory authorities, other organizations and individuals may only request credit institutions and foreign banks' branches to provide client information for the right purposes, contents, scope and within their competence as prescribed by law or when obtaining the client's approval and shall take responsibility for such request. 4. Regulatory authorities, other organizations and individuals must keep client information confidential, use client information for proper purposes when requesting information provision and must not provide it to a third party without the client's consent, except for the cases in which it is provided as prescribed by law. 5. The applicant shall retain and preserve client information, applications for provision of client information and delivery of client data in accordance with regulations of law on retention and preservation of documents. 1. Article 11 of Decree No. 117/2018/ND-CP prescribes the following cases of provision of client information: 1 a) Other organizations and individuals that have the right to request credit institutions and foreign banks' branches to provide client information are specified in codes, laws and resolutions of the National Assembly. b) The customer has given a written approval or another form of approval as agreed with the customer. 2. Credit institutions and foreign bank branches shall provide client information for their clients or their lawful representatives.\nGoals:\nIs it possible to leak information from customers, or is it possible for a banker to do this?\n\nExplanation:\nLeak(x): x leaks information.\nBanker(x): x is a banker.\nClient(x): x is a client.\nApproval(x): x has approval.\n\nPredicates:\nLeak(x) | Banker(x) | Client(x) | Approval(x) | Customer(x) | Written(x) | Lawful(x).\n\nPremises:\nall x (Banker(x) -> (Leak(x) -> (Written(x) | Lawful(x)))).\nall x (Client(x) -> (Approval(x) | Written(x))).\nall x (Approval(x) -> Written(x)).\nall x (Written(x) -> Lawful(x)).\nall x (Leak(x) -> (Banker(x) | Client(x))).\nConclusion:\n- all x (Leak(x) -> Lawful(x)).",
        "premises": [
            "all x (Banker(x) -> (Leak(x) -> (Written(x) | Lawful(x)))).",
            "all x (Client(x) -> (Approval(x) | Written(x))).",
            "all x (Approval(x) -> Written(x)).",
            "all x (Written(x) -> Lawful(x)).",
            "all x (Leak(x) -> (Banker(x) | Client(x)))."
        ],
        "conclusion": "- all x (Leak(x) -> Lawful(x)).",
        "id": "eff43c90-3eb3-4871-a6c1-c043c45a8fc2"
    },
    {
        "raw": "Here is the result in the requested format:\n\nRules:\n1. Gems include diamonds, ruby, emorot, saphia, pearls, and other gems.\n2. Precious metals (excluding gold) include silver, platinum, fine art items, and jewelry made of silver and platinum alloys containing silver and/or platinum.\n3. The value of negotiable instruments is VND 300,000.00.\n4. The value of cash in foreign currencies, cash in Vietnamese dong, and value of gold subject to customs declaration shall comply with regulations of the State Bank of Vietnam.\n5. Individuals on entry or exit must carry foreign currencies, Vietnam Dong in cash or precious metals and gemstones subject to customs declaration.\n\nGoals:\nCan foreigners bring diamonds into Vietnam?\n\nExplanation:\nGem(x): x is a gem.\nPreciousMetal(x): x is a precious metal.\nNegotiableInstrument(x): x is a negotiable instrument.\nStateBank(x): x is the State Bank.\nVietnam(x): x is in the territory of Vietnam.\nForeigner(x): x is a foreigner.\n\nPremises:\nall x (Gem(x) -> (Diamond(x) | Ruby(x) | Emorot(x) | Saphia(x) | Pearls(x))).\nall x (PreciousMetal(x) -> (Silver(x) | Platinum(x) | FineArt(x) | Jewelry(x))).\nValueNegotiableInstrument: VND 300,000.00.\nall x (Value(x) -> (Regulation(StateBank(x)) & Vietnam(x))).\nall x (Individual(x) -> (ForeignCurrency(x) | VietnameseDong(x) | PreciousMetal(x) | Gem(x))).\n\nConclusion:\nforeigner(x) & Gem(x) -> CanBring(x).",
        "premises": [
            "all x (Gem(x) -> (Diamond(x) | Ruby(x) | Emorot(x) | Saphia(x) | Pearls(x))).",
            "all x (PreciousMetal(x) -> (Silver(x) | Platinum(x) | FineArt(x) | Jewelry(x))).",
            "ValueNegotiableInstrument: VND 300,000.00.",
            "all x (Value(x) -> (Regulation(StateBank(x)) & Vietnam(x))).",
            "all x (Individual(x) -> (ForeignCurrency(x) | VietnameseDong(x) | PreciousMetal(x) | Gem(x)))."
        ],
        "conclusion": "foreigner(x) & Gem(x) -> CanBring(x).",
        "id": "45c18845-5024-4d6a-a857-fa844c908a18"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. In order to follow procedures for depositing saving deposits at transaction offices of credit institutions, depositors must directly visit transaction offices and present identity proof of depositor, in case of joint savings deposit, all deposers must present identity proving documents of their own.\n2. In case of making a savings deposit through the legal representative, the legal representatives must present documents proving the legal representation status of the legal delegates, identity proof of the Legal representatives and identity proofs of the depositors.\n3. Clause 4 Article 5 also stipulates: The depositor's identity proof is the unexpired ID card or Citizen Identity Card or passport or the birth certificate of the individual who is under 14 years of age.\n\nGoals:\nAre you required to present ID or ID in order to deposit your savings?\n\nPredicates:\nDepositor(x) | LegalRepresentative(x) | IDCard(x) | CitizenIdentityCard(x) | Passport(x) | BirthCertificate(x) | IdentityProof(x) | Deposition(x) | CreditInstitution(x) | TransactionOffice(x) | JointSavingsDeposit(x) | LegalRepresentation(x) | Unexpired(x) | Individual(x) | Under14(x).\n\nExplanation:\nDepositor(x): x is a depositor.\nLegalRepresentative(x): x is a legal representative.\nIDCard(x): x is an ID card.\nCitizenIdentityCard(x): x is a Citizen Identity Card.\nPassport(x): x is a passport.\nBirthCertificate(x): x is a birth certificate.\nIdentityProof(x): x is identity proof.\nDeposition(x): x makes a deposition.\nCreditInstitution(x): x is a credit institution.\nTransactionOffice(x): x is a transaction office.\nJointSavingsDeposit(x): x makes a joint savings deposit.\nLegalRepresentation(x): x has legal representation.\nUnexpired(x): x is unexpired.\nIndividual(x): x is an individual.\nUnder14(x): x is under 14 years of age.\n\nPremises:\nall x (Depositor(x) -> (Visit(x) & Present(x))).\nall x (JointSavingsDeposit(x) -> (all y (Depositor(y) -> Present(y)))).\nall x (LegalRepresentative(x) -> (Present(x) & Prove(x) & Prove2(x))).\nall x (Deposition(x) -> (IDCard(x) | CitizenIdentityCard(x) | Passport(x) | BirthCertificate(x))).\nall x (Unexpired(x) -> IDCard(x) | CitizenIdentityCard(x) | Passport(x)).\n\nConclusion:\nall x (Deposition(x) -> Present(x)).",
        "premises": [
            "all x (Depositor(x) -> (Visit(x) & Present(x))).",
            "all x (JointSavingsDeposit(x) -> (all y (Depositor(y) -> Present(y)))).",
            "all x (LegalRepresentative(x) -> (Present(x) & Prove(x) & Prove2(x))).",
            "all x (Deposition(x) -> (IDCard(x) | CitizenIdentityCard(x) | Passport(x) | BirthCertificate(x))).",
            "all x (Unexpired(x) -> IDCard(x) | CitizenIdentityCard(x) | Passport(x))."
        ],
        "conclusion": "all x (Deposition(x) -> Present(x)).",
        "id": "2409b5fb-e120-4e60-8c30-2c925303a276"
    },
    {
        "raw": "Rules:\n1. Article 10 of the Circular No. 48/2018/TT-NHNN prescribing savings deposits issued by the State Bank of Vietnam prescribes currencies of savings deposit receipt and payment, including: 1 The currency of savings deposit is Vietnam dong and foreign currencies. Credit institutions shall determine the type of foreign currency in which savings deposits are taken. 2. The currency used for savings deposit payment is the currency deposited by the depositor. The payment for foreign currencies in small amounts shall comply with the guidance of the credit institution.\nGoals:\nIs it allowed to withdraw savings in foreign currency?\n\nPredicates:\nSavingsDeposit(x) | Receive(x) | Payment(x) | ForeignCurrency(x) | VietnamDong(x) | CreditInstitution(x) | Depositor(x) | Guidance(x) | Allow(x) | ForeignCurrencySmallAmount(x).\n\nExplanation:\nSavingsDeposit(x): x is a savings deposit.\nReceive(x): x receives money.\nPayment(x): x makes a payment.\nForeignCurrency(x): x is a foreign currency.\nVietnamDong(x): x is Vietnam dong.\nCreditInstitution(x): x is a credit institution.\nDepositor(x): x is a depositor.\nGuidance(x): x provides guidance.\nAllow(x): x is allowed.\nForeignCurrencySmallAmount(x): x is a small amount of foreign currency.\n\nPremises:\nall x (SavingsDeposit(x) -> (Receive(x) | Payment(x))).\nall x (SavingsDeposit(x) -> (ForeignCurrency(x) | VietnamDong(x))).\nall x (SavingsDeposit(x) -> CreditInstitution(x)).\nall x (Payment(x) -> Depositor(x)).\nall x (Guidance(x) -> CreditInstitution(x)).\nall x (ForeignCurrencySmallAmount(x) -> Guidance(x)).\n-Allow(x) | ForeignCurrencySmallAmount(x).\n\nConclusion:\nAllow(x).",
        "premises": [
            "all x (SavingsDeposit(x) -> (Receive(x) | Payment(x))).",
            "all x (SavingsDeposit(x) -> (ForeignCurrency(x) | VietnamDong(x))).",
            "all x (SavingsDeposit(x) -> CreditInstitution(x)).",
            "all x (Payment(x) -> Depositor(x)).",
            "all x (Guidance(x) -> CreditInstitution(x)).",
            "all x (ForeignCurrencySmallAmount(x) -> Guidance(x)).",
            "-Allow(x) | ForeignCurrencySmallAmount(x)."
        ],
        "conclusion": "Allow(x).",
        "id": "cbb72473-e56b-43d0-aa69-7facb39befc5"
    },
    {
        "raw": "Rules:\n1. Paper money with color change, faded, image, pattern, letter, number, crumpled, smeared, dirty, old, torn or piece-to-piece stuck but the note is still intact, is considered as worn.\n2. Coins, which are worn, rusted, damaged partly or wholly the image, patterns, letter and number and plated on the money, is considered as damaged.\nGoals:\nMoney is torn money reprinted used.\n\nPredicates:\nWorn(x) | Damaged(x) | Torn(x) | Reprinted(x) | Used(x) | PaperMoney(x) | Coin(x) | Money(x)\n\nExplanation:\nWorn(x): x is worn.\nDamaged(x): x is damaged.\nTorn(x): x is torn.\nReprinted(x): x is reprinted.\nUsed(x): x is used.\nPaperMoney(x): x is paper money.\nCoin(x): x is a coin.\nMoney(x): x is money.\n\nPremises:\nall x (Worn(x) | Damaged(x)).\nall x (Torn(x) -> Reprinted(x)).\nall x (Used(x) -> Money(x)).\nall x (PaperMoney(x) -> (Worn(x) | Torn(x))).\nall x (Coin(x) -> Damaged(x)).\n-Used(x) | Reprinted(x).\n\nConclusion:\nall x (Used(x) -> Reprinted(x)).",
        "premises": [
            "all x (Worn(x) | Damaged(x)).",
            "all x (Torn(x) -> Reprinted(x)).",
            "all x (Used(x) -> Money(x)).",
            "all x (PaperMoney(x) -> (Worn(x) | Torn(x))).",
            "all x (Coin(x) -> Damaged(x)).",
            "-Used(x) | Reprinted(x)."
        ],
        "conclusion": "all x (Used(x) -> Reprinted(x)).",
        "id": "518370a1-3253-4a23-bde0-52b08c0d9355"
    },
    {
        "raw": "Here is the result in the required format:\n\nRules:\n1. Lending is a form of credit extension whereby the lender delivers or commits to deliver a sum of money to the customer for a specified purpose in a specified period of time under an agreement on the principle of repayment of principal and interest.\nGoals:\nIs lending a form of credit?\n\nPredicates:\nLend(x) | Credit(x) | Deliver(x) | Commit(x) | Customer(x) | Purpose(x) | Period(x) | Repayment(x) | Interest(x) | Agreement(x) | Principal(x).\n\nExplanation:\nLend(x): x lends money.\nCredit(x): x is a form of credit.\nDeliver(x): x delivers money.\nCommit(x): x commits to deliver money.\nCustomer(x): x is a customer.\nPurpose(x): x has a specified purpose.\nPeriod(x): x has a specified period of time.\nRepayment(x): x has an agreement on repayment.\nInterest(x): x has an agreement on interest.\nAgreement(x): x has an agreement.\nPrincipal(x): x is the principal.\n\nPremises:\nall x (Lend(x) -> (Deliver(x) | Commit(x))).\nall x (Deliver(x) | Commit(x) -> Credit(x)).\nall x (Lend(x) -> (Customer(x) & Purpose(x) & Period(x) & Repayment(x) & Agreement(x) & Principal(x))).\nConclusion:\nall x Lend(x) -> Credit(x).\n\nNote: The conclusion is in the format of \"all x Lend(x) -> Credit(x)\" which means \"For all x, if x lends, then x is a form of credit\".",
        "premises": [
            "all x (Lend(x) -> (Deliver(x) | Commit(x))).",
            "all x (Deliver(x) | Commit(x) -> Credit(x)).",
            "all x (Lend(x) -> (Customer(x) & Purpose(x) & Period(x) & Repayment(x) & Agreement(x) & Principal(x)))."
        ],
        "conclusion": "Note: The conclusion is in the format of \"all x Lend(x) -> Credit(x)\" which means \"For all x, if x lends, then x is a form of credit\".",
        "id": "edabaddf-054f-4dc3-a486-345bcdc94a02"
    },
    {
        "raw": "Rules:\n1. A credit institution shall consider granting a loan to a customer who fully meets the following requirements: \n   - The customer is a juridical person who has legal personality in accordance with laws.\n   - The client is an individual aged 18 years or older and has full legal capacity as prescribed by law or aged 15 to under 18 without loss or restriction of legal capacity in accordance with law.\n   - Demand for loans for legal purposes.\n   - Having a feasible plan on the use of capital.\n   - Having financial capability to repay debts.\n2. In case a customer borrows loans from a credit institution at the lending interest rate specified in Clause 2, Article 13 of this Circular, the credit institution shall assess such customer as having a transparent and healthy financial status.\nGoals:\nCan you get bank loans if you are under 18?\n\nPredicates:\nIndividual(x) | JuridicalPerson(x) | LegalPersonality(x) | LegalCapacity(x) | Demand(x) | Plan(x) | FinancialCapability(x) | Transparent(x) | Healthy(x) | CreditInstitution(x) | Loan(x) | Under18(x) | Bank(x) | LoanRate(x) | Article13(x) | Clause2(x).\n\nExplanation:\nIndividual(x): x is an individual.\nJuridicalPerson(x): x is a juridical person.\nLegalPersonality(x): x has legal personality.\nLegalCapacity(x): x has full legal capacity.\nDemand(x): x demands loans for legal purposes.\nPlan(x): x has a feasible plan on the use of capital.\nFinancialCapability(x): x has financial capability to repay debts.\nTransparent(x): x has a transparent financial status.\nHealthy(x): x has a healthy financial status.\nCreditInstitution(x): x is a credit institution.\nLoan(x): x borrows loans.\nUnder18(x): x is under 18 years old.\nBank(x): x is a bank.\nLoanRate(x): x is the lending interest rate.\nArticle13(x): x is Article 13 of the Circular.\nClause2(x): x is Clause 2 of Article 13.\n\nPremises:\nall x (JuridicalPerson(x) -> LegalPersonality(x)).\nall x (Individual(x) -> (LegalCapacity(x) & (18 <= Age(x) | (15 <= Age(x) & Age(x) < 18)))).\nall x (Demand(x) -> LegalPurpose(x)).\nall x (Plan(x) -> Feasible(x)).\nall x (FinancialCapability(x) -> RepayDebts(x)).\nall x (Transparent(x) -> FinancialStatus(x)).\nall x (Healthy(x) -> FinancialStatus(x)).\nall x (CreditInstitution(x) -> Bank(x)).\nall x (Loan(x) -> CreditInstitution(x)).\n-Loan(x) | Under18(x) | LoanRate(x) | Article13(x) | Clause2(x).\n\nConclusion:\n~(Loan(x) & Under18(x)) in Prover9 formula.",
        "premises": [
            "all x (JuridicalPerson(x) -> LegalPersonality(x)).",
            "all x (Individual(x) -> (LegalCapacity(x) & (18 <= Age(x) | (15 <= Age(x) & Age(x) < 18)))).",
            "all x (Demand(x) -> LegalPurpose(x)).",
            "all x (Plan(x) -> Feasible(x)).",
            "all x (FinancialCapability(x) -> RepayDebts(x)).",
            "all x (Transparent(x) -> FinancialStatus(x)).",
            "all x (Healthy(x) -> FinancialStatus(x)).",
            "all x (CreditInstitution(x) -> Bank(x)).",
            "all x (Loan(x) -> CreditInstitution(x)).",
            "-Loan(x) | Under18(x) | LoanRate(x) | Article13(x) | Clause2(x)."
        ],
        "conclusion": "~(Loan(x) & Under18(x)) in Prover9 formula.",
        "id": "d6225731-29df-4c75-a249-5f177e60b994"
    },
    {
        "raw": "Rules:\n1. Credit institutions must publicly post at their transaction offices and on their websites (if any) at least the following contents: + Savings deposit interest rate, fees (if applicable) + Foreign currency in which savings deposits are received, + Procedures for savings deposit transactions between credit institutions and depositors, + Regulations on each type of savings deposit, + Methods for depositor to access savings deposits, + Actions against crumpled, torn or lost passports.\n2. Savings deposit interest rate is one of the contents that must be publicly posted.\nGoals:\nIs it required to publish interest rates on savings interest?\n###\n\nPredicates:\nCreditInstitution(x) | TransactionOffice(x) | Website(x) | SavingsDepositInterestRate(x) | Fees(x) | ForeignCurrency(x) | Procedures(x) | Regulations(x) | Methods(x) | Actions(x) | Passports(x) | Required(x) | Publish(x) | SavingsInterest(x).\n\nExplanation:\nCreditInstitution(x): x is a credit institution.\nTransactionOffice(x): x is a transaction office.\nWebsite(x): x is a website.\nSavingsDepositInterestRate(x): x is the savings deposit interest rate.\nFees(x): x are fees.\nForeignCurrency(x): x is foreign currency.\nProcedures(x): x are procedures.\nRegulations(x): x are regulations.\nMethods(x): x are methods.\nActions(x): x are actions.\nPassports(x): x are passports.\nRequired(x): x is required.\nPublish(x): x publishes.\nSavingsInterest(x): x is savings interest.\n\nPremises:\nall x (CreditInstitution(x) -> (TransactionOffice(x) & Website(x)) & (SavingsDepositInterestRate(x) | Fees(x) | ForeignCurrency(x) | Procedures(x) | Regulations(x) | Methods(x) | Actions(x) | Passports(x))).\nSavingsDepositInterestRate(x).\nConclusion:\nRequired(SavingsDepositInterestRate(x) -> Publish(x)).\n------------------------",
        "premises": [
            "all x (CreditInstitution(x) -> (TransactionOffice(x) & Website(x)) & (SavingsDepositInterestRate(x) | Fees(x) | ForeignCurrency(x) | Procedures(x) | Regulations(x) | Methods(x) | Actions(x) | Passports(x))).",
            "SavingsDepositInterestRate(x)."
        ],
        "conclusion": "------------------------",
        "id": "1a9db09c-fb00-42ba-aa93-5ec05ecc2c6e"
    },
    {
        "raw": "Rules:\n1. When wishing to open a checking account, the customer shall prepare and submit an application as prescribed in Article 12 of this Circular, directly or by post or electronically, to the bank/foreign bank's branch where the checking account is opened.\n2. The procedures for opening a personal checking account electronically are specified in Clause 6 of this Article as follows: \n   a) Collect information about the application for checking account opening as prescribed in Clauses 1,4,5 Article 12, Clause 1 Article 13 of this Circular.\n   b) Inspect, compare and verify the client's identity.\n   c) Warn the client about prohibited acts during the opening and use of the checking account opened electronically.\n   d) Provide the client with the contents of the agreement on checking account open and use as prescribed Clause 1, Article 14a of this Article and enter into the agreement with the client.\n   e) To notify the number and name of the current account, limit of transactions via the current accounts.\nGoals:\nIs it possible to open an online bank account?\n\nPredicates:\nOpen(x) | Electronic(x) | Application(x) | Customer(x) | Bank(x) | ForeignBank(x) | Branch(x) | Identity(x) | Warn(x) | Agreement(x) | CurrentAccount(x) | Limit(x) | Transaction(x) | Circular(x) | Article(x) | Clause(x).\n\nExplanation:\nOpen(x): x opens a checking account.\nElectronic(x): x opens a checking account electronically.\nApplication(x): x prepares an application for checking account opening.\nCustomer(x): x is a customer.\nBank(x): x is a bank.\nForeignBank(x): x is a foreign bank.\nBranch(x): x is a branch.\nIdentity(x): x verifies the client's identity.\nWarn(x): x warns the client about prohibited acts.\nAgreement(x): x enters into an agreement with the client.\nCurrentAccount(x): x is a current account.\nLimit(x): x has a limit on transactions.\nTransaction(x): x makes a transaction.\nCircular(x): x is a circular.\nArticle(x): x is an article.\nClause(x): x is a clause.\n\nPremises:\nall x (Application(x) -> (Open(x) & Electronic(x))).\nall x (Customer(x) -> (Application(x) & Identity(x) & Warn(x) & Agreement(x) & CurrentAccount(x) & Limit(x) & Transaction(x))).\nall x (Bank(x) | ForeignBank(x)).\nall x (Branch(x) -> Bank(x)).\nall x (Warn(x) -> (ProhibitedActs(x) & Agreement(x))).\nall x (Agreement(x) -> (Article(x) & Clause(x))).\nall x (Circular(x) -> (Article(x) & Clause(x))).\n-Open(x) | Electronic(x).\n\nConclusion:\nall x (Open(x) -> Electronic(x)).\n------------------------",
        "premises": [
            "all x (Application(x) -> (Open(x) & Electronic(x))).",
            "all x (Customer(x) -> (Application(x) & Identity(x) & Warn(x) & Agreement(x) & CurrentAccount(x) & Limit(x) & Transaction(x))).",
            "all x (Bank(x) | ForeignBank(x)).",
            "all x (Branch(x) -> Bank(x)).",
            "all x (Warn(x) -> (ProhibitedActs(x) & Agreement(x))).",
            "all x (Agreement(x) -> (Article(x) & Clause(x))).",
            "all x (Circular(x) -> (Article(x) & Clause(x))).",
            "-Open(x) | Electronic(x)."
        ],
        "conclusion": "------------------------",
        "id": "1ba59967-2eb6-4a3c-971c-6a5f97bd4205"
    },
    {
        "raw": "Rules:\n1. State Bank branches, Central Banking Department, collecting-exchanging units shall be responsible for immediately collecting, exchanging for customers who have demand, without limitation on quantity, requiring no procedures, documents for money not eligible for circulation as prescribed in Clause 1 and Clause 3, Article 4 of this Circular.\n2. Banknotes which have changed color, faded in their image, patterns, letters, digits, are crumpled, smeared, dirty, old, torn or glued but the note is still intact, - Coins, which are worn, rusted, damaged partly or wholly the image, pattern, letters and digits and the plated layer on the money.\n3. Money with technical errors due to printing and coining process of the manufacturer such as folded printing paper which loses picture or printing color, printing ink and other errors in printing and minting process.\n\nGoals:\nIs there any limit on the number of exchange of money not qualified for circulation?\n\nExplanation:\nPredicates:\nNotQualified(x) | Limit(x) | StateBank(x) | CentralBanking(x) | CollectingExchanging(x) | Customer(x) | Demand(x) | Quantity(x) | Procedure(x) | Document(x) | Banknote(x) | Coin(x) | Image(x) | Pattern(x) | Letter(x) | Digit(x) | PlatedLayer(x) | TechnicalError(x) | Printing(x) | Coining(x) | Manufacturer(x) | Picture(x) | PrintingColor(x) | Ink(x) | Error(x).\n\nPredicates:\nNotQualified(x): x is not qualified for circulation.\nLimit(x): x has a limit.\nStateBank(x): x is the State Bank.\nCentralBanking(x): x is the Central Banking Department.\nCollectingExchanging(x): x is a collecting-exchanging unit.\nCustomer(x): x is a customer.\nDemand(x): x has a demand.\nQuantity(x): x is a quantity.\nProcedure(x): x has a procedure.\nDocument(x): x has a document.\nBanknote(x): x is a banknote.\nCoin(x): x is a coin.\nImage(x): x has an image.\nPattern(x): x has a pattern.\nLetter(x): x has a letter.\nDigit(x): x has a digit.\nPlatedLayer(x): x has a plated layer.\nTechnicalError(x): x has a technical error.\nPrinting(x): x is a printing process.\nCoining(x): x is a coining process.\nManufacturer(x): x is a manufacturer.\nPicture(x): x has a picture.\nPrintingColor(x): x has a printing color.\nInk(x): x is ink.\nError(x): x is an error.\n\nPremises:\nall x (NotQualified(x) -> (StateBank(x) | CentralBanking(x) | CollectingExchanging(x))).\nall x (Demand(x) -> Quantity(x)).\nall x (Procedure(x) -> Document(x)).\nall x (Banknote(x) -> (Image(x) | Pattern(x) | Letter(x) | Digit(x) | PlatedLayer(x))).\nall x (Coin(x) -> (Image(x) | Pattern(x) | Letter(x) | Digit(x) | PlatedLayer(x))).\nall x (TechnicalError(x) -> (Printing(x) | Coining(x))).\nall x (Manufacturer(x) -> (Picture(x) | PrintingColor(x) | Ink(x) | Error(x))).\n\nConclusion:\nall x (NotQualified(x) -> ~Limit(x)).",
        "premises": [
            "all x (NotQualified(x) -> (StateBank(x) | CentralBanking(x) | CollectingExchanging(x))).",
            "all x (Demand(x) -> Quantity(x)).",
            "all x (Procedure(x) -> Document(x)).",
            "all x (Banknote(x) -> (Image(x) | Pattern(x) | Letter(x) | Digit(x) | PlatedLayer(x))).",
            "all x (Coin(x) -> (Image(x) | Pattern(x) | Letter(x) | Digit(x) | PlatedLayer(x))).",
            "all x (TechnicalError(x) -> (Printing(x) | Coining(x))).",
            "all x (Manufacturer(x) -> (Picture(x) | PrintingColor(x) | Ink(x) | Error(x)))."
        ],
        "conclusion": "all x (NotQualified(x) -> ~Limit(x)).",
        "id": "dbdd0aa6-c943-4640-b2e5-25f55d68c88b"
    },
    {
        "raw": "Rules:\n1. Illegal destruction of money.\n2. A fine of between VND 10,000,000 and 15,000,000 shall be imposed for acts of illegally sabotaging or destroying Vietnam dong.\n3. Confiscate all the exhibits and instrumentalities of the violations prescribed in Clause 2, Clause 3 and Clause 4 of this Article and transfer them to a competent authority for further actions.\n4. According to your case, your burning of money is also a violation of the law.\n\nGoals:\nIs it illegal to burn money that I made by myself?\n\nPredicates:\nDestroy(x) | Illegal(x) | IllegalDestruction(x) | VietnamDong(x) | Fine(x) | Confiscate(x) | Transfer(x) | Exhibits(x) | Instrumentalities(x) | Violations(x) | Clause(x) | Article(x) | CompetentAuthority(x) | Vietnam(x) | Money(x) | SelfMade(x) | IllegalBurn(x)\n\nExplanation:\nDestroy(x): x destroys money.\nIllegal(x): x is illegal.\nIllegalDestruction(x): x is illegal destruction.\nVietnamDong(x): x is Vietnam dong.\nFine(x): x is a fine.\nConfiscate(x): x confiscates.\nTransfer(x): x transfers.\nExhibits(x): x is an exhibit.\nInstrumentalities(x): x is an instrumental.\nViolations(x): x is a violation.\nClause(x): x is a clause.\nArticle(x): x is an article.\nCompetentAuthority(x): x is a competent authority.\nVietnam(x): x is in the territory of Vietnam.\nMoney(x): x is money.\nSelfMade(x): x is made by oneself.\nIllegalBurn(x): x is an illegal burn.\n\nPremises:\nall x (Destroy(x) -> IllegalDestruction(x)).\nall x (IllegalDestruction(x) -> (Fine(x) | Confiscate(x) | Transfer(x))).\nall x (VietnamDong(x) -> Vietnam(x)).\nall x (IllegalBurn(x) -> IllegalDestruction(x)).\n-IllegalBurn(x) | SelfMade(x).\n\nConclusion:\nall x (IllegalBurn(x) -> Illegal(x)).\n------------------------",
        "premises": [
            "all x (Destroy(x) -> IllegalDestruction(x)).",
            "all x (IllegalDestruction(x) -> (Fine(x) | Confiscate(x) | Transfer(x))).",
            "all x (VietnamDong(x) -> Vietnam(x)).",
            "all x (IllegalBurn(x) -> IllegalDestruction(x)).",
            "-IllegalBurn(x) | SelfMade(x)."
        ],
        "conclusion": "------------------------",
        "id": "2bc3743b-8eea-4526-9094-fb077be0ff9f"
    },
    {
        "raw": "Rules:\n1. Credit institutions shall provide guidelines for procedures for taking and paying out electronic savings deposits via checking accounts of depositors opened at credit institutions in accordance with regulations of this Circular, regulations of law on electronic transactions, anti-money laundering and relevant regulations of laws to ensure that taking and payment of savings deposits are accurate and safe for depositor and safe operation for credit institutions.\n2. Credit institutions must ensure the full retention of information relating to the receipt and payment of saving deposits by electronic means to meet the requirements of depositors in the trace, inspection and dispute settlement.\n\nGoals:\nWithdraw savings account without bank procedures allowed.\n\nPredicates:\nCreditInstitution(x) | ElectronicSavingsDeposit(x) | CheckingAccount(x) | Depositor(x) | Regulation(x) | Law(x) | AntiMoneyLaundering(x) | Information(x) | Receipt(x) | Payment(x) | Trace(x) | Inspection(x) | DisputeSettlement(x) | Withdraw(x) | Allowed(x) | BankProcedure(x) | SavingDeposit(x) | Bank(x) | DepositorRequirement(x).\n\nExplanation:\nCreditInstitution(x): x is a credit institution.\nElectronicSavingsDeposit(x): x is an electronic savings deposit.\nCheckingAccount(x): x is a checking account.\nDepositor(x): x is a depositor.\nRegulation(x): x is a regulation.\nLaw(x): x is a law.\nAntiMoneyLaundering(x): x is related to anti-money laundering.\nInformation(x): x is information.\nReceipt(x): x is a receipt.\nPayment(x): x is a payment.\nTrace(x): x is a trace.\nInspection(x): x is an inspection.\nDisputeSettlement(x): x is a dispute settlement.\nWithdraw(x): x withdraws.\nAllowed(x): x is allowed.\nBankProcedure(x): x is a bank procedure.\nSavingDeposit(x): x is a saving deposit.\nBank(x): x is a bank.\nDepositorRequirement(x): x is a depositor requirement.\n\nPremises:\nall x (CreditInstitution(x) -> (ElectronicSavingsDeposit(x) | CheckingAccount(x) | Regulation(x) | Law(x) | AntiMoneyLaundering(x))).\nall x (CreditInstitution(x) -> (Information(x) | Receipt(x) | Payment(x) | Trace(x) | Inspection(x) | DisputeSettlement(x))).\n-Withdraw(x) | BankProcedure(x).\n\nConclusion:\nall x (Withdraw(x) -> Allowed(x)).",
        "premises": [
            "all x (CreditInstitution(x) -> (ElectronicSavingsDeposit(x) | CheckingAccount(x) | Regulation(x) | Law(x) | AntiMoneyLaundering(x))).",
            "all x (CreditInstitution(x) -> (Information(x) | Receipt(x) | Payment(x) | Trace(x) | Inspection(x) | DisputeSettlement(x))).",
            "-Withdraw(x) | BankProcedure(x)."
        ],
        "conclusion": "all x (Withdraw(x) -> Allowed(x)).",
        "id": "7893bac9-b762-4845-b819-66eaad53cf99"
    },
    {
        "raw": "Rules:\n1. Clause 7 Article 1 of Circular No. 02/2019/TT-NHNN amending Circular No 23/23/THNH1N on guidelines for opening and use of checking accounts at payment service providers issued by the State Bank of Vietnam, which provides for the following documents required for opening of checking account: \n2. An application form for opening a checking account made using the form provided by the bank/foreign bank's branch where the checking account is opened and in accordance with Clause 1 Article 13 hereof \n3. The account holder's citizen identification card or ID card or unexpired passport, birth certificate (if the account holder is a Vietnamese citizen aged under 14 years), entry visa or document proving exemption from entry visa (if he/she is a foreigner)\n4. If the checking accounts are opened by the guardian or legal representative, apart from the documents specified in Point a and b\nGoals:\nCan a bank account be opened without identification?\n\nPredicates:\nOpen(x) | BankAccount(x) | IdentificationCard(x) | Citizen(x) | Passport(x) | BirthCertificate(x) | Visa(x) | Guardian(x) | LegalRepresentative(x) | VietnameseCitizen(x) | Foreigner(x) | StateBank(x) | Vietnam(x) | CheckingAccount(x).\n\nExplanation:\nOpen(x): x opens a bank account.\nBankAccount(x): x is a bank account.\nIdentificationCard(x): x has an identification card.\nCitizen(x): x is a citizen.\nPassport(x): x has a passport.\nBirthCertificate(x): x has a birth certificate.\nVisa(x): x has a visa.\nGuardian(x): x is a guardian.\nLegalRepresentative(x): x is a legal representative.\nVietnameseCitizen(x): x is a Vietnamese citizen.\nForeigner(x): x is a foreigner.\nStateBank(x): x is the State Bank.\nVietnam(x): x is in the territory of Vietnam.\nCheckingAccount(x): x is a checking account.\n\nPremises:\nall x (Open(x) -> (IdentificationCard(x) | Passport(x) | BirthCertificate(x) | Visa(x))).\nall x (IdentificationCard(x) -> Citizen(x)).\nall x (Passport(x) -> Citizen(x)).\nall x (BirthCertificate(x) -> Citizen(x)).\nall x (Visa(x) -> Citizen(x)).\nall x (Guardian(x) -> Citizen(x)).\nall x (LegalRepresentative(x) -> Citizen(x)).\nall x (VietnameseCitizen(x) -> Citizen(x)).\nall x (Foreigner(x) -> Citizen(x)).\n-Open(x) | IdentificationCard(x).\n\nConclusion:\n-all x (Open(x) -> IdentificationCard(x)).\n------------------------",
        "premises": [
            "all x (Open(x) -> (IdentificationCard(x) | Passport(x) | BirthCertificate(x) | Visa(x))).",
            "all x (IdentificationCard(x) -> Citizen(x)).",
            "all x (Passport(x) -> Citizen(x)).",
            "all x (BirthCertificate(x) -> Citizen(x)).",
            "all x (Visa(x) -> Citizen(x)).",
            "all x (Guardian(x) -> Citizen(x)).",
            "all x (LegalRepresentative(x) -> Citizen(x)).",
            "all x (VietnameseCitizen(x) -> Citizen(x)).",
            "all x (Foreigner(x) -> Citizen(x)).",
            "-Open(x) | IdentificationCard(x)."
        ],
        "conclusion": "------------------------",
        "id": "507d7ebc-666c-4df8-90ec-453a4ab9aff5"
    },
    {
        "raw": "Rules:\n1. The legal representative of a credit institution must reside in Vietnam.\n2. In case of absence from Vietnam, he/she must authorize in writing another person who is manager or executive of the credit institution residing in Vietnam to exercise his/her rights and fulfill his/ her obligations.\nGoals:\nIf there is a legal representative in a credit institution, does this person have to be required to reside in Vietnam?\n###\nPredicates:\nRepresentative(x) | CreditInstitution(x) | Manager(x) | Executive(x) | Vietnam(x) | Authorize(x) | Rights(x) | Obligations(x) | LegalRepresentation(x).\n\nExplanation:\nRepresentative(x): x is a legal representative.\nCreditInstitution(x): x is a credit institution.\nManager(x): x is a manager.\nExecutive(x): x is an executive.\nVietnam(x): x is in Vietnam.\nAuthorize(x): x authorizes someone.\nRights(x): x has rights.\nObligations(x): x has obligations.\nLegalRepresentation(x): x is a legal representation.\n\nPremises:\nall x (Representative(x) -> (CreditInstitution(x) & Vietnam(x))).\nall x (CreditInstitution(x) -> (Manager(x) | Executive(x))).\nall x (Authorize(x) -> (Rights(x) & Obligations(x))).\nall x (LegalRepresentation(x) -> Representative(x)).\n\nConclusion:\nall x (LegalRepresentation(x) -> Vietnam(x)).",
        "premises": [
            "all x (Representative(x) -> (CreditInstitution(x) & Vietnam(x))).",
            "all x (CreditInstitution(x) -> (Manager(x) | Executive(x))).",
            "all x (Authorize(x) -> (Rights(x) & Obligations(x))).",
            "all x (LegalRepresentation(x) -> Representative(x))."
        ],
        "conclusion": "all x (LegalRepresentation(x) -> Vietnam(x)).",
        "id": "05986d5a-46ec-4155-afee-ddb82890daee"
    },
    {
        "raw": "Rules:\n1. Vietnamese citizens aged 18 years or older and having full legal capacity as prescribed by law.\n2. Vietnamese citizens aged between full 15 years and under 18 years who have neither restricted nor lost their civil act capacity as prescribed by law.\n3. Vietnamese citizens with limited legal capacity or lost legal capacity as prescribed by law or under 15 years old shall make savings deposit transactions through their legal representatives.\n4. Vietnamese citizens having limited cognition and behavior control as prescribed shall make saving deposit transactions via their guardians.\n\nGoals:\nIs the person who is legally incapacitated still entitled to deposit money?\n\nPredicates:\nAge(x) | LegalCapacity(x) | LimitedCapacity(x) | LostCapacity(x) | Representative(x) | Guardian(x) | Legal(x) | VietnameseCitizen(x) | FullLegalCapacity(x) | LimitedCognition(x) | BehaviorControl(x) | SavingDeposit(x) | Entitled(x).\n\nExplanation:\nAge(x): x has a certain age.\nLegalCapacity(x): x has full legal capacity.\nLimitedCapacity(x): x has limited legal capacity.\nLostCapacity(x): x has lost legal capacity.\nRepresentative(x): x is a legal representative.\nGuardian(x): x is a guardian.\nLegal(x): x is legally capacitated.\nVietnameseCitizen(x): x is a Vietnamese citizen.\nFullLegalCapacity(x): x has full legal capacity.\nLimitedCognition(x): x has limited cognition.\nBehaviorControl(x): x has behavior control.\nSavingDeposit(x): x makes a saving deposit.\nEntitled(x): x is entitled.\n\nPremises:\nall x (VietnameseCitizen(x) -> (Age(x) >= 18 | Age(x) >= 15 & Age(x) < 18 & LegalCapacity(x))).\nall x (Age(x) < 15 | LimitedCapacity(x) | LostCapacity(x)).\nall x (LimitedCapacity(x) | Age(x) < 18 | Representative(x)).\nall x (LostCapacity(x) | Age(x) < 18 | Guardian(x)).\nall x (LimitedCognition(x) & BehaviorControl(x) -> Representative(x)).\nall x (SavingDeposit(x) -> Entitled(x)).\n\nConclusion:\nall x (LimitedCapacity(x) | LostCapacity(x) | Age(x) < 15 -> Entitled(x)).",
        "premises": [
            "all x (VietnameseCitizen(x) -> (Age(x) >= 18 | Age(x) >= 15 & Age(x) < 18 & LegalCapacity(x))).",
            "all x (Age(x) < 15 | LimitedCapacity(x) | LostCapacity(x)).",
            "all x (LimitedCapacity(x) | Age(x) < 18 | Representative(x)).",
            "all x (LostCapacity(x) | Age(x) < 18 | Guardian(x)).",
            "all x (LimitedCognition(x) & BehaviorControl(x) -> Representative(x)).",
            "all x (SavingDeposit(x) -> Entitled(x))."
        ],
        "conclusion": "all x (LimitedCapacity(x) | LostCapacity(x) | Age(x) < 15 -> Entitled(x)).",
        "id": "dc4d41d8-283a-48ab-9e3a-2d9937d4e69c"
    },
    {
        "raw": "Here is the result in the requested format:\n\nRules:\n1. Poor household members, ethnic minority people living in areas with difficult socio-economic conditions, people living areas with extremely difficult socio-economic conditions, people living on island communes and island districts and some other entities are eligible for health insurance card.\n2. A person is eligible for health insurance card if they live in a poor household according to the poverty line.\n3. A person is eligible for health insurance card if they live with multidimensional poverty line with health insurance deficit as prescribed.\n4. A person is eligible for health insurance card if they live in an area facing extreme socio-economic difficulties.\n5. A person is eligible for health insurance card if they live in an island commune and island district.\n\nGoals:\nIs the applicant eligible for health insurance card when having a household registration in a severely disadvantaged area?\n\nExplanation:\nEligible(x): x is eligible for health insurance card.\nPoorHousehold(x): x is a poor household.\nEthnicMinority(x): x is an ethnic minority person.\nDifficultSocioEconomic(x): x lives in an area with difficult socio-economic conditions.\nExtremelyDifficultSocioEconomic(x): x lives in an area with extremely difficult socio-economic conditions.\nIslandCommune(x): x lives in an island commune.\nIslandDistrict(x): x lives in an island district.\nMultidimensionalPovertyLine(x): x lives with multidimensional poverty line with health insurance deficit as prescribed.\n\nPremises:\nall x (PoorHousehold(x) | EthnicMinority(x) | DifficultSocioEconomic(x) | ExtremelyDifficultSocioEconomic(x) | IslandCommune(x) | IslandDistrict(x) | MultidimensionalPovertyLine(x) -> Eligible(x)).\nall x (PoorHousehold(x) -> Eligible(x)).\nall x (MultidimensionalPovertyLine(x) -> Eligible(x)).\nall x (ExtremelyDifficultSocioEconomic(x) -> Eligible(x)).\nall x (IslandCommune(x) -> Eligible(x)).\nall x (IslandDistrict(x) -> Eligible(x)).\nall x (EthnicMinority(x) -> Eligible(x)).\nall x (DifficultSocioEconomic(x) -> Eligible(x)).\n\nConclusion:\nall x (HouseholdRegistration(x, SeverelyDisadvantagedArea) -> Eligible(x)).",
        "premises": [
            "all x (PoorHousehold(x) | EthnicMinority(x) | DifficultSocioEconomic(x) | ExtremelyDifficultSocioEconomic(x) | IslandCommune(x) | IslandDistrict(x) | MultidimensionalPovertyLine(x) -> Eligible(x)).",
            "all x (PoorHousehold(x) -> Eligible(x)).",
            "all x (MultidimensionalPovertyLine(x) -> Eligible(x)).",
            "all x (ExtremelyDifficultSocioEconomic(x) -> Eligible(x)).",
            "all x (IslandCommune(x) -> Eligible(x)).",
            "all x (IslandDistrict(x) -> Eligible(x)).",
            "all x (EthnicMinority(x) -> Eligible(x)).",
            "all x (DifficultSocioEconomic(x) -> Eligible(x))."
        ],
        "conclusion": "all x (HouseholdRegistration(x, SeverelyDisadvantagedArea) -> Eligible(x)).",
        "id": "57ea0a2c-e5a3-45bd-accd-b58b09932847"
    },
    {
        "raw": "Rules:\n1. Every food manufacturer and seller must obtain the Certificate of fulfillment of food safety conditions when operating, except for the case in Clause 1 Article 12 of this Decree.\n2. The conditions for issuance of the Certificate of fulfillment of food safety conditions are specified in Clause 1 Article 34 of the Law of Food safety.\n3. Manufacturers of dietary supplements shall comply with requirements specified in Article 28 of this Decree.\n4. The establishment is not required to obtain the Certificate of fulfillment of food safety conditions for small initial production, production and trading of food without fixed location, small preliminary processing, small trading of foods, trading of pre-packaged foods, and collective kitchens without registration of food business.\n\nGoals:\nThe company's cafeteria must have a Certificate of food safety.\n\nExplanation:\nManufacturer(x): x is a food manufacturer.\nSeller(x): x is a food seller.\nFoodSafetyCertificate(x): x has the Certificate of fulfillment of food safety conditions.\nFoodSafetyCondition(x): x meets the food safety conditions.\nDietarySupplement(x): x is a dietary supplement.\nFood(x): x is food.\nLocation(x): x has a fixed location.\nProcessing(x): x engages in food processing.\nTrading(x): x engages in food trading.\nCafeteria(x): x is a cafeteria.\nSmallInitialProduction(x): x has small initial production.\nSmallPreliminaryProcessing(x): x has small preliminary processing.\nSmallTrading(x): x has small trading of foods.\nCollectiveKitchen(x): x is a collective kitchen.\n\nPredicates:\nManufacturer(x) | Seller(x) | FoodSafetyCertificate(x) | FoodSafetyCondition(x) | DietarySupplement(x) | Food(x) | Location(x) | Processing(x) | Trading(x) | Cafeteria(x) | SmallInitialProduction(x) | SmallPreliminaryProcessing(x) | SmallTrading(x) | CollectiveKitchen(x).\n\nPremises:\nall x (Manufacturer(x) | Seller(x)) -> FoodSafetyCertificate(x).\nall x (FoodSafetyCertificate(x) -> FoodSafetyCondition(x)).\nall x (DietarySupplement(x) -> FoodSafetyCondition(x)).\nall x (Food(x) -> (Location(x) | Processing(x) | Trading(x))).\nall x (Cafeteria(x) -> Food(x)).\nall x (SmallInitialProduction(x) | SmallPreliminaryProcessing(x) | SmallTrading(x) | CollectiveKitchen(x) -> not FoodSafetyCertificate(x)).\n\nConclusion:\nnot all x (Cafeteria(x) -> FoodSafetyCertificate(x)).",
        "premises": [
            "all x (Manufacturer(x) | Seller(x)) -> FoodSafetyCertificate(x).",
            "all x (FoodSafetyCertificate(x) -> FoodSafetyCondition(x)).",
            "all x (DietarySupplement(x) -> FoodSafetyCondition(x)).",
            "all x (Food(x) -> (Location(x) | Processing(x) | Trading(x))).",
            "all x (Cafeteria(x) -> Food(x)).",
            "all x (SmallInitialProduction(x) | SmallPreliminaryProcessing(x) | SmallTrading(x) | CollectiveKitchen(x) -> not FoodSafetyCertificate(x))."
        ],
        "conclusion": "not all x (Cafeteria(x) -> FoodSafetyCertificate(x)).",
        "id": "5474fafd-fcaa-4998-bc7d-181156cf0638"
    },
    {
        "raw": "Rules:\n1. Article 36 of the Law on Social Insurance 2014 stipulates that the period of enjoying the sickness regime for laborers who work under normal conditions is counted on working days, excluding public holidays, New Year holidays and weekends.\n2. The period of sickness regime entitlement is 30 days if laborers have paid social insurance premiums for under 15 years, 40 days if they have paid social premiums for between full 15 and under 30 years, and 60 days for full 30 or more years.\n3. According to the Labor Code, employees are entitled to a full paid leave during the Tet holiday.\n4. Employees who take leave to enjoy their sickness benefits are only entitled to 75% of their salary as the basis for payment of social insurance premiums.\n\nGoals:\nIs there a sickness benefit during Tet holiday?\n\nExplanation:\nSicknessBenefit(x): x receives a sickness benefit.\nPaidLeave(x): x is entitled to a full paid leave.\nWorkingDay(x): x is a working day.\nPublicHoliday(x): x is a public holiday.\nNewYearHoliday(x): x is a New Year holiday.\nWeekend(x): x is a weekend.\nTetHoliday(x): x is the Tet holiday.\nSalary(x): x is the salary.\nSocialInsurancePremium(x): x is the social insurance premium.\n\nPredicates:\nSicknessBenefit(x) | PaidLeave(x) | WorkingDay(x) | PublicHoliday(x) | NewYearHoliday(x) | Weekend(x) | TetHoliday(x) | Salary(x) | SocialInsurancePremium(x).\n\nPremises:\nall x (SicknessBenefit(x) -> (WorkingDay(x) & ~PublicHoliday(x) & ~NewYearHoliday(x) & ~Weekend(x))).\nall x (WorkingDay(x) -> ~TetHoliday(x)).\nall x (PaidLeave(x) -> TetHoliday(x)).\nall x (SicknessBenefit(x) -> (Salary(x) * 0.75) = SocialInsurancePremium(x)).\n\nConclusion:\nall x (TetHoliday(x) -> PaidLeave(x)).",
        "premises": [
            "all x (SicknessBenefit(x) -> (WorkingDay(x) & ~PublicHoliday(x) & ~NewYearHoliday(x) & ~Weekend(x))).",
            "all x (WorkingDay(x) -> ~TetHoliday(x)).",
            "all x (PaidLeave(x) -> TetHoliday(x)).",
            "all x (SicknessBenefit(x) -> (Salary(x) * 0.75) = SocialInsurancePremium(x))."
        ],
        "conclusion": "all x (TetHoliday(x) -> PaidLeave(x)).",
        "id": "54707371-b963-40a7-a2d4-e8a783e78781"
    },
    {
        "raw": "Rules:\n1. People with exceptionally severe disabilities, except the cases specified in Article 45 of this Law, are entitled to disability benefits.\n2. People with severe disabilities are entitled to disability benefits.\n3. The Medical Examination Council shall determine and conclude the type and level of impairment for the cases specified in Clause 2 Article 15 of the Law on the disabled.\n4. If the disabled person has self-serving capacity or working capacity decrease determined by Medical Examination Council before the effective date of this Decree, the Impairment Assessing Council shall determine the impairment level based on the conclusion of Medical Examination Councils.\n5. The state budget shall provide funding for determination of impairment levels and issuance of Certificate of impairment according to the decentralization of state budget management.\n\nGoals:\nIs heart disease entitled to disability benefits for people with heart disease?\n\nExplanation:\nPersonWithDisability(x): x is a person with a disability.\nExceptionallySevereDisability(x): x has an exceptionally severe disability.\nSevereDisability(x): x has a severe disability.\nMedicalExaminationCouncil(x): x is the Medical Examination Council.\nImpairmentLevel(x): x has an impairment level.\nSelfServingCapacity(x): x has self-serving capacity.\nWorkingCapacityDecrease(x): x has a working capacity decrease.\nCertificateOfImpairment(x): x has a Certificate of impairment.\n\nPremises:\nall x (ExceptionallySevereDisability(x) -> PersonWithDisability(x)).\nall x (SevereDisability(x) -> PersonWithDisability(x)).\nall x (MedicalExaminationCouncil(x) -> ImpairmentLevel(x)).\nall x (SelfServingCapacity(x) -> WorkingCapacityDecrease(x)).\nall x (WorkingCapacityDecrease(x) -> ImpairmentLevel(x)).\nall x (CertificateOfImpairment(x) -> ImpairmentLevel(x)).\n-HeartDisease(x) | PersonWithDisability(x).\n\nConclusion:\nall x (HeartDisease(x) -> PersonWithDisability(x)).",
        "premises": [
            "all x (ExceptionallySevereDisability(x) -> PersonWithDisability(x)).",
            "all x (SevereDisability(x) -> PersonWithDisability(x)).",
            "all x (MedicalExaminationCouncil(x) -> ImpairmentLevel(x)).",
            "all x (SelfServingCapacity(x) -> WorkingCapacityDecrease(x)).",
            "all x (WorkingCapacityDecrease(x) -> ImpairmentLevel(x)).",
            "all x (CertificateOfImpairment(x) -> ImpairmentLevel(x)).",
            "-HeartDisease(x) | PersonWithDisability(x)."
        ],
        "conclusion": "all x (HeartDisease(x) -> PersonWithDisability(x)).",
        "id": "6f354fa6-f9c2-439d-9759-2ace00b873d8"
    },
    {
        "raw": "Rules:\n1. New medicine practices or methods shall be determined according to Article 2 of the Circular No. 07/2015/TT-BYT dated on elaborating conditions and procedures for permission for application of new medicine practices and methods, which is promulgated by the Minister of Health, specifically including the followings: 1. a) New medicine practices or methods stipulated in Clause 1 Article 69 of the Law on Medical Examination and Treatment which are first researched in Vietnam and have been completed, accepted by the Committee for Evaluation of Ethical Conducts in Biomedical Researches affiliated to the Ministry of Health or the Ministerial-level Science Council, and applied, and issued the Certificate of Research Results by the Department of Science, Technology and Training affiliated to Ministry of Heath. b) The technique or method is researched for the first time in foreign country and has completed the research, acceptance in accordance with the regulations of the host country, is appraised and proposed for application by the Board of Ethics Evaluation in Biomedical Research -Ministry of Health or ministerial-level scientific Council and granted Certificate of research result by the Department of Science, Technology and Training -Mine Health. 2. New medicine practices or methods stipulated in Clause 2 Article 69 of the Law on Medical Examination and Treatment shall be specified as follows: Medicine practices or ways which have been permitted by foreign competent authorities and have been officially applied at at least one overseas healthcare establishment but are applied in Vietnam for the first time and have already been reviewed and assessed by the professional council established by the Ministry of Health in the application for permission to apply for such practices or measures. 3. New medicine practices or methods stipulated in Clause 3 Article 69 of the Law on Medical Examination and Treatment shall be specified as follows: Medicine practices or ways which have been classified as special or type I by the Ministry of Health and are applied at healthcare establishments for the first time.\nGoals:\nIs there any new technique and method in medical examination and treatment as prescribed by law?\n\nExplanation:\nResearch(x): x is researched.\nAccept(x): x is accepted.\nApply(x): x is applied.\nCertificate(x): x has a certificate.\nForeign(x): x is foreign.\nVietnam(x): x is in Vietnam.\nHealthcare(x): x is a healthcare establishment.\nMinister(x): x is the Minister.\nScienceCouncil(x): x is a science council.\nDepartment(x): x is a department.\nLaw(x): x is a law.\n\nPredicates:\nResearch(x) | Accept(x) | Apply(x) | Certificate(x) | Foreign(x) | Vietnam(x) | Healthcare(x) | Minister(x) | ScienceCouncil(x) | Department(x) | Law(x)\n\nPremises:\nall x (Research(x) -> (Accept(x) | Apply(x))).\nCertificate(x).\nall x (Foreign(x) -> Vietnam(x)).\nall x (Healthcare(x) -> Vietnam(x)).\nall x (Minister(x) -> ScienceCouncil(x)).\nall x (Department(x) -> ScienceCouncil(x)).\nall x (Law(x) -> ScienceCouncil(x)).\n-Research(x) | Certificate(x).\n\nConclusion:\nexists x (Research(x) & Certificate(x)).",
        "premises": [
            "all x (Research(x) -> (Accept(x) | Apply(x))).",
            "Certificate(x).",
            "all x (Foreign(x) -> Vietnam(x)).",
            "all x (Healthcare(x) -> Vietnam(x)).",
            "all x (Minister(x) -> ScienceCouncil(x)).",
            "all x (Department(x) -> ScienceCouncil(x)).",
            "all x (Law(x) -> ScienceCouncil(x)).",
            "-Research(x) | Certificate(x)."
        ],
        "conclusion": "exists x (Research(x) & Certificate(x)).",
        "id": "d532c08f-20c7-48e8-94d0-7366ce837326"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Employees working under labor contracts with a term of under 3 months.\n2. Part-time officials at commune, village and residential group levels.\n3. Persons participating in production, business and service activities, including non-salaried cooperative members working in cooperatives or unions of cooperatives.\n4. Self-employed workers.\n5. Employees working abroad for a certain period of time who have not yet participated in compulsory social insurance or have received lump-sum social insurance.\n6. Other participants.\nGoals:\nShe can continue to participate in social insurance as an individual.\n\nPredicates:\nBorn(x) | Address(x) | Commune(x) | District(x) | Province(x) | Participate(x) | Insurance(x) | ForeignInvestment(x) | IndustrialPark(x) | ChildCare(x) | Individual(x) | SocialInsurance(x) | LaborContract(x) | Term(x) | PartTime(x) | CommuneLevel(x) | VillageLevel(x) | ResidentialGroup(x) | Production(x) | Business(x) | Service(x) | Cooperative(x) | Union(x) | SelfEmployed(x) | Overseas(x) | LumpSum(x) | Other(x).\n\nExplanation:\nBorn(x): x was born.\nAddress(x): x has an address.\nCommune(x): x is in the commune.\nDistrict(x): x is in the district.\nProvince(x): x is in the province.\nParticipate(x): x participates.\nInsurance(x): x has insurance.\nForeignInvestment(x): x is a foreign investment.\nIndustrialPark(x): x is in the industrial park.\nChildCare(x): x takes care of children.\nIndividual(x): x is an individual.\nSocialInsurance(x): x participates in social insurance.\nLaborContract(x): x has a labor contract.\nTerm(x): x has a term.\nPartTime(x): x is part-time.\nCommuneLevel(x): x is at the commune level.\nVillageLevel(x): x is at the village level.\nResidentialGroup(x): x is at the residential group level.\nProduction(x): x is in production.\nBusiness(x): x is in business.\nService(x): x is in service.\nCooperative(x): x is in a cooperative.\nUnion(x): x is in a union.\nSelfEmployed(x): x is self-employed.\nOverseas(x): x is overseas.\nLumpSum(x): x has a lump sum.\nOther(x): x is other.\n\nPremises:\nall x (LaborContract(x) & Term(x) < 3 -> PartTime(x)).\nall x (PartTime(x) -> CommuneLevel(x) | VillageLevel(x) | ResidentialGroup(x)).\nall x (Production(x) | Business(x) | Service(x) -> Cooperative(x) | Union(x)).\nall x (SelfEmployed(x) -> Not(Production(x) | Business(x) | Service(x))).\nall x (Overseas(x) -> Not(Participate(x) Insurance(x)) | LumpSum(x)).\nall x (Individual(x) -> Not(LaborContract(x) & Participate(x) Insurance(x))).\n\nConclusion:\nall x (Individual(x) -> Not(Participate(x) Insurance(x))).",
        "premises": [
            "all x (LaborContract(x) & Term(x) < 3 -> PartTime(x)).",
            "all x (PartTime(x) -> CommuneLevel(x) | VillageLevel(x) | ResidentialGroup(x)).",
            "all x (Production(x) | Business(x) | Service(x) -> Cooperative(x) | Union(x)).",
            "all x (SelfEmployed(x) -> Not(Production(x) | Business(x) | Service(x))).",
            "all x (Overseas(x) -> Not(Participate(x) Insurance(x)) | LumpSum(x)).",
            "all x (Individual(x) -> Not(LaborContract(x) & Participate(x) Insurance(x)))."
        ],
        "conclusion": "all x (Individual(x) -> Not(Participate(x) Insurance(x))).",
        "id": "493e5e87-1286-42f4-8a97-82472b5c70e6"
    },
    {
        "raw": "Rules:\n1. Article 2 of the Law on Social Insurance provides for the subjects of compulsory social insurance as follows: 1 e) Employees participating in compulsory social insurance are Vietnamese citizens, including: a) Employees working under indefinite-term employment contracts, employment contracts with a term of full three months or more, b) Officials and public employees, c) Defense workers, police workers, d) Officers and professional soldiers of the People's Army, officers, professional non-commissioned officers, officers, technical non-commanders of the people's police, cipher officers who are salaried like the people'army, the people \u0301s police officers, dd) Non-commissioning officers, soldiers of people' s army and 2. Employers participating in compulsory social insurance include state agencies, non-business units, people's armed forces units, political organizations, socio-political organizations, professional-socio-politico-professional organizations, social-professional organization, other social organizations. foreign agencies and organizations, international organizations operating in the Vietnamese territory. enterprises, cooperatives, individual business households, cooperative groups, other organizations and individuals that hire, employ and pay wages to employees.\nGoals:\nIs it possible for a company hiring an accounting service company but not paying social insurance?\n\nPredicates:\nEmployee(x) | Employer(x) | Company(x) | AccountingService(x) | SocialInsurance(x) | VietnameseCitizen(x) | IndefiniteTerm(x) | ThreeMonths(x) | Pay(x) | Hire(x) | Employ(x) | Salaried(x) | StateAgency(x) | NonBusinessUnit(x) | PeoplesArmedForces(x) | PoliticalOrganization(x) | SocioPoliticalOrganization(x) | ProfessionalSocioPoliticoProfessionalOrganization(x) | SocialProfessionalOrganization(x) | ForeignAgency(x) | InternationalOrganization(x) | VietnameseTerritory(x) | Enterprise(x) | Cooperative(x) | IndividualBusinessHousehold(x) | CooperativeGroup(x) | OtherOrganization(x) | Individual(x) | PayWages(x) | Compulsory(x) | CompulsorySocialInsurance(x).\n\nExplanation:\nEmployee(x): x is an employee.\nEmployer(x): x is an employer.\nCompany(x): x is a company.\nAccountingService(x): x provides accounting services.\nSocialInsurance(x): x participates in social insurance.\nVietnameseCitizen(x): x is a Vietnamese citizen.\nIndefiniteTerm(x): x has an indefinite-term employment contract.\nThreeMonths(x): x has an employment contract with a term of full three months or more.\nPay(x): x pays wages.\nHire(x): x hires employees.\nEmploy(x): x employs employees.\nSalaried(x): x is salaried.\nStateAgency(x): x is a state agency.\nNonBusinessUnit(x): x is a non-business unit.\nPeoplesArmedForces(x): x is a people's armed forces unit.\nPoliticalOrganization(x): x is a political organization.\nSocioPoliticalOrganization(x): x is a socio-political organization.\nProfessionalSocioPoliticoProfessionalOrganization(x): x is a professional-socio-politico-professional organization.\nSocialProfessionalOrganization(x): x is a social-professional organization.\nForeignAgency(x): x is a foreign agency.\nInternationalOrganization(x): x is an international organization operating in the Vietnamese territory.\nEnterprise(x): x is an enterprise.\nCooperative(x): x is a cooperative.\nIndividualBusinessHousehold(x): x is an individual business household.\nCooperativeGroup(x): x is a cooperative group.\nOtherOrganization(x): x is another organization.\nIndividual(x): x is an individual.\nPayWages(x): x pays wages to employees.\nCompulsory(x): x is compulsory.\nCompulsorySocialInsurance(x): x participates in compulsory social insurance.\n\nPremises:\nall x (Employee(x) -> VietnameseCitizen(x)).\nall x (Employee(x) -> (IndefiniteTerm(x) | ThreeMonths(x))).\nall x (Employer(x) -> (StateAgency(x) | NonBusinessUnit(x) | PeoplesArmedForces(x) | PoliticalOrganization(x) | SocioPoliticalOrganization(x) | ProfessionalSocioPoliticoProfessionalOrganization(x) | SocialProfessionalOrganization(x) | ForeignAgency(x) | InternationalOrganization(x) | Enterprise(x) | Cooperative(x) | IndividualBusinessHousehold(x) | CooperativeGroup(x) | OtherOrganization(x) | Individual(x))).\nall x (AccountingService(x) -> CompulsorySocialInsurance(x)).\n- all x (Company(x) -> Employer(x)).\nall x (Company(x) -> AccountingService(x)).\nall x (Company(x) -> (PayWages(x) | ~PayWages(x))).\n\nConclusion:\nall x (Company(x) -> ~PayWages(x)) -> ~CompulsorySocialInsurance(x)).",
        "premises": [
            "all x (Employee(x) -> VietnameseCitizen(x)).",
            "all x (Employee(x) -> (IndefiniteTerm(x) | ThreeMonths(x))).",
            "all x (Employer(x) -> (StateAgency(x) | NonBusinessUnit(x) | PeoplesArmedForces(x) | PoliticalOrganization(x) | SocioPoliticalOrganization(x) | ProfessionalSocioPoliticoProfessionalOrganization(x) | SocialProfessionalOrganization(x) | ForeignAgency(x) | InternationalOrganization(x) | Enterprise(x) | Cooperative(x) | IndividualBusinessHousehold(x) | CooperativeGroup(x) | OtherOrganization(x) | Individual(x))).",
            "all x (AccountingService(x) -> CompulsorySocialInsurance(x)).",
            "- all x (Company(x) -> Employer(x)).",
            "all x (Company(x) -> AccountingService(x)).",
            "all x (Company(x) -> (PayWages(x) | ~PayWages(x)))."
        ],
        "conclusion": "all x (Company(x) -> ~PayWages(x)) -> ~CompulsorySocialInsurance(x)).",
        "id": "bdd62613-2791-4c38-8208-196087b2726a"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Employees working under indefinite-term labor contracts or labor contracts with a term of full three months or more are obliged to participate in compulsory social insurance.\n2. The participation in compulsory social insurance is a condition for receiving certain social insurance benefits.\n\nGoals:\nIt is possible to have enough years of social insurance participation, continue working but not to pay any more.\n\nExplanation:\nParticipate(x): x participates in social insurance.\nObliged(x): x is obliged to participate in social insurance.\nReceives(x): x receives social insurance benefits.\nEmployee(x): x is an employee.\nContract(x): x has a contract.\nTerm(x): x has a term.\nFullThreeMonths(x): x has a term of full three months or more.\n\nPremises:\nall x (Employee(x) & (Contract(x) & (Term(x) & FullThreeMonths(x))) -> Obliged(x)).\nall x (Obliged(x) -> Participate(x)).\nall x (Participate(x) -> Receives(x)).\n\nConclusion:\n- all x (Participate(x) -> Receives(x)).\nall x (Receives(x) -> ~Obliged(x)).",
        "premises": [
            "all x (Employee(x) & (Contract(x) & (Term(x) & FullThreeMonths(x))) -> Obliged(x)).",
            "all x (Obliged(x) -> Participate(x)).",
            "all x (Participate(x) -> Receives(x))."
        ],
        "conclusion": "all x (Receives(x) -> ~Obliged(x)).",
        "id": "2b92d223-d013-4bab-a31d-70189fbf1718"
    },
    {
        "raw": "Rules:\n1. When you have worked at the Company and are eligible for compulsory social insurance, you must participate in compulsory social security and no longer participate in voluntary social security because you are not eligible as prescribed by the Law on Social Security.\n2. The maternity benefit only applies to participants in compulsory social insurance, participants in voluntary social insurance are not entitled to the maternity benefit.\n\nGoals:\nIs it possible to switch from voluntary social insurance to compulsory social insurance?\n\nPredicates:\nWorkedAtCompany(x) | Eligible(x) | Participate(x) | EligibleFor(x) | CompulsorySocialInsurance(x) | VoluntarySocialInsurance(x) | MaternityBenefit(x) | ParticipantsIn(x) | NotEligible(x) | LawOnSocialSecurity(x) | Company(x) | SocialSecurity(x) | Insurance(x).\n\nExplanation:\nWorkedAtCompany(x): x has worked at the Company.\nEligible(x): x is eligible.\nParticipate(x): x participates.\nEligibleFor(x): x is eligible for.\nCompulsorySocialInsurance(x): x is in compulsory social insurance.\nVoluntarySocialInsurance(x): x is in voluntary social insurance.\nMaternityBenefit(x): x is entitled to maternity benefit.\nParticipantsIn(x): x is a participant in.\nNotEligible(x): x is not eligible.\nLawOnSocialSecurity(x): x is prescribed by the Law on Social Security.\nCompany(x): x is the Company.\nSocialSecurity(x): x is social security.\nInsurance(x): x is insurance.\n\nPremises:\nall x (WorkedAtCompany(x) -> EligibleFor(x, CompulsorySocialInsurance)).\nall x (EligibleFor(x, CompulsorySocialInsurance) -> (Participate(x, CompulsorySocialInsurance) & ~Participate(x, VoluntarySocialInsurance))).\nall x (MaternityBenefit(x) -> ParticipantsIn(x, CompulsorySocialInsurance)).\n~ParticipantsIn(x, VoluntarySocialInsurance) -> ~MaternityBenefit(x).\n\nConclusion:\n~all x (VoluntarySocialInsurance(x) & EligibleFor(x, CompulsorySocialInsurance) -> ~NotEligible(x)).",
        "premises": [
            "all x (WorkedAtCompany(x) -> EligibleFor(x, CompulsorySocialInsurance)).",
            "all x (EligibleFor(x, CompulsorySocialInsurance) -> (Participate(x, CompulsorySocialInsurance) & ~Participate(x, VoluntarySocialInsurance))).",
            "all x (MaternityBenefit(x) -> ParticipantsIn(x, CompulsorySocialInsurance)).",
            "~ParticipantsIn(x, VoluntarySocialInsurance) -> ~MaternityBenefit(x)."
        ],
        "conclusion": "~all x (VoluntarySocialInsurance(x) & EligibleFor(x, CompulsorySocialInsurance) -> ~NotEligible(x)).",
        "id": "dc3ca2e6-3505-4157-94cb-8cdff143296b"
    },
    {
        "raw": "Rules:\n1. Citizens studying in schools of the national education system in the form of formal education at the concentrated schools are entitled to postponement of conscription.\n2. Citizens studying under continuing education programs at lower secondary schools or upper secondary schools at educational institutions are entitled to postponement of conscription.\n3. Citizens studying abroad at overseas schools with training duration of twelve months or more are entitled to postponement of conscription.\n4. Citizens who are studying at the schools specified in Point a, Point b, Point c, Point d Clause 1 of this Article shall be entitled to the school admission date, which is the date on which the citizen completes the admission procedures and is studying.\n5. If a citizen receives an order of conscription and an enlistment notice at the same time, he/she must obey the order and is not considered for postponement of conscriptions.\n6. Citizens specified in Points b, c and d Clause 1 of this Article shall be entitled to postponement of call-up for military service in the first concentrated training course.\n7. If they continue to study in other courses, they shall not be entitled for postponing call-down for military services.\n8. A course is only provided at one level of training, in case of bridge program, it must be continuous and uninterrupted.\n9. Attend training courses other than those specified in Clause 1 of this Article are not entitled to postponement of conscription.\n10. Citizens subject to postponement of conscription as prescribed in Clause 1 of this Article shall be examined and conscripted into the army if the reasons for postponements are no longer valid.\n\nGoals:\nIs the secondary education required military service?\n\nExplanation:\nStudent(x): x is a student.\nFormalEducation(x): x is in formal education.\nConcentratedSchools(x): x is in concentrated schools.\nContinuingEducation(x): x is in continuing education.\nOverseasSchools(x): x is in overseas schools.\nNationalEducation(x): x is in national education.\nAdmissionDate(x): x has completed admission procedures and is studying.\nEnlistmentNotice(x): x has received enlistment notice.\nConscription(x): x is conscripted into the army.\n\nPredicates:\nStudent(x) | FormalEducation(x) | ConcentratedSchools(x) | ContinuingEducation(x) | OverseasSchools(x) | NationalEducation(x) | AdmissionDate(x) | EnlistmentNotice(x) | Conscription(x) | MilitaryService(x) | Required(x) | Postponement(x) | CallUp(x) | CallDown(x) | School(x) | Course(x) | Level(x) | Duration(x) | BridgeProgram(x) | Continuous(x) | Uninterrupted(x) | LegitimateReason(x) | SixMonths(x) | Consecutive(x) | Valid(x) | Army(x)\n\nPremises:\nall x (Student(x) & FormalEducation(x) -> Postponement(x)).\nall x (Student(x) & ContinuingEducation(x) -> Postponement(x)).\nall x (Student(x) & OverseasSchools(x) & Duration(x) >= 12 -> Postponement(x)).\nall x (Student(x) & NationalEducation(x) & AdmissionDate(x) -> Postponement(x)).\nall x (~EnlistmentNotice(x) | ~Postponement(x)).\nall x (Postponement(x) & CallUp(x) & Course(x) -> CallDown(x)).\nall x (~Continuous(x) | ~Uninterrupted(x)).\nall x (LegitimateReason(x) -> Valid(x)).\nall x (~SixMonths(x) | ~Consecutive(x)).\nall x (Valid(x) -> Army(x)).\n\nConclusion:\nall x (Student(x) & NationalEducation(x) & FormalEducation(x) -> Required(x)).",
        "premises": [
            "all x (Student(x) & FormalEducation(x) -> Postponement(x)).",
            "all x (Student(x) & ContinuingEducation(x) -> Postponement(x)).",
            "all x (Student(x) & OverseasSchools(x) & Duration(x) >= 12 -> Postponement(x)).",
            "all x (Student(x) & NationalEducation(x) & AdmissionDate(x) -> Postponement(x)).",
            "all x (~EnlistmentNotice(x) | ~Postponement(x)).",
            "all x (Postponement(x) & CallUp(x) & Course(x) -> CallDown(x)).",
            "all x (~Continuous(x) | ~Uninterrupted(x)).",
            "all x (LegitimateReason(x) -> Valid(x)).",
            "all x (~SixMonths(x) | ~Consecutive(x)).",
            "all x (Valid(x) -> Army(x))."
        ],
        "conclusion": "all x (Student(x) & NationalEducation(x) & FormalEducation(x) -> Required(x)).",
        "id": "31b9c53f-ee37-40ff-9f81-8934835f0e96"
    },
    {
        "raw": "Rules:\n1. If a patient has medical examination and treatment at a health facility without presenting a health insurance card or at a facility that does not sign a contract for medical services covered by health insurance, the patient shall pay the costs to the health facility and then bring documents to the social insurance agency for direct payment.\n2. The social insurance agency shall directly pay the patient's actual costs within the scope of payment of the health fund, but not exceeding the level specified at Point 1, Appendix 2 issued together with Circular No. 09/2009/TTLT-BYT-TC.\n3. A dossier of direct payment of medical examination and treatment costs of health insurance includes a written request for direct payment, a copy of a valid health insurance card and a document with a valid photo, a copy of hospital discharge paper (inpatient treatment), and a copy of prescription or medical book for outpatient treatment as prescribed.\n4. If the patient does not go to the social security office to follow payment procedures, the person who follows procedures for payment on behalf of the patient must have a power of attorney or certificate of legal representation of the patient.\n\nGoals:\nMedical examination and treatment at the University of Medicine and Pharmacy Hospital without a health insurance card is possible.\n\nExplanation:\nMedicalExamination(x): x receives medical examination.\nTreatment(x): x receives treatment.\nHealthFacility(x): x is a health facility.\nHealthInsuranceCard(x): x is a health insurance card.\nPayment(x): x pays.\nSocialInsuranceAgency(x): x is the social insurance agency.\nHealthFund(x): x is the health fund.\nLevel(x): x is a level.\nAppendix2(x): x is Appendix 2.\nCircular09(x): x is Circular No. 09/2009/TTLT-BYT-TC.\nDossier(x): x is a dossier.\nWrittenRequest(x): x is a written request.\nValidPhoto(x): x is a valid photo.\nHospitalDischargePaper(x): x is a hospital discharge paper.\nPrescription(x): x is a prescription.\nMedicalBook(x): x is a medical book.\nPowerOfAttorney(x): x is a power of attorney.\nCertificateOfRepresentation(x): x is a certificate of legal representation.\n\nPremises:\n- all x (MedicalExamination(x) & Treatment(x) & HealthFacility(x) & !HealthInsuranceCard(x) -> Payment(x) & Dossier(x)).\n- all x (Payment(x) & Dossier(x) & SocialInsuranceAgency(x) & HealthFund(x) & Level(x) & Appendix2(x) & Circular09(x) -> all y (HealthFund(y) <= Level(y))).\n- all x (Dossier(x) -> WrittenRequest(x) & ValidPhoto(x) & HospitalDischargePaper(x) & Prescription(x) & MedicalBook(x)).\n- all x (Payment(x) & !Dossier(x) -> PowerOfAttorney(x) | CertificateOfRepresentation(x)).\n\nConclusion:\n- all x (MedicalExamination(x) & Treatment(x) & UniversityOfMedicineAndPharmacyHospital(x) & !HealthInsuranceCard(x) -> possible(x)).",
        "premises": [
            "- all x (MedicalExamination(x) & Treatment(x) & HealthFacility(x) & !HealthInsuranceCard(x) -> Payment(x) & Dossier(x)).",
            "- all x (Payment(x) & Dossier(x) & SocialInsuranceAgency(x) & HealthFund(x) & Level(x) & Appendix2(x) & Circular09(x) -> all y (HealthFund(y) <= Level(y))).",
            "- all x (Dossier(x) -> WrittenRequest(x) & ValidPhoto(x) & HospitalDischargePaper(x) & Prescription(x) & MedicalBook(x)).",
            "- all x (Payment(x) & !Dossier(x) -> PowerOfAttorney(x) | CertificateOfRepresentation(x))."
        ],
        "conclusion": "- all x (MedicalExamination(x) & Treatment(x) & UniversityOfMedicineAndPharmacyHospital(x) & !HealthInsuranceCard(x) -> possible(x)).",
        "id": "70b60076-ec55-431f-9b3e-c0b440d90dbe"
    },
    {
        "raw": "Rules:\n1. Pursuant to Article 28 of the Law on Social Insurance No. 71/2006/QH11 dated June 29,2016, an employee is entitled to maternity benefits when falling into one of the following cases: being pregnant, giving birth, adopting an under-four-month child, or taking sterilization measures.\n2. Employees specified at Point b and c, Clause 1 of this Article must pay social insurance for full six months or more within twelve months before giving birth or adopting their children.\n3. If an employee has participated in social insurance for full 6 months within 12 months, she is entitled to take leave for 6 months before and after childbirth if she has participated fully in social security for full six months within the last 12.\n4. In case of giving birth to twins or more, the mother is entitled to an additional leave of 01 month for each child from the second child onwards.\n5. The maternity leave period before childbirth must not exceed 2 months.\n6. An employee will also get five one-day, five-day check-ups throughout the pregnancy.\n7. If an employee gives birth to a child at the same place of initial medical care indicated in the health insurance card, she will enjoy the prescribed benefits.\nGoals:\nIs there any other benefit in addition to social insurance and health insurance?\nPredicates:\nPregnant(x) | GiveBirth(x) | Adopt(x) | Sterilize(x) | SocialInsurance(x) | HealthInsurance(x) | MaternityBenefits(x) | Leave(x) | CheckUp(x) | HealthInsuranceCard(x).\n\nExplanation:\nPregnant(x): x is pregnant.\nGiveBirth(x): x gives birth.\nAdopt(x): x adopts a child.\nSterilize(x): x takes sterilization measures.\nSocialInsurance(x): x participates in social insurance.\nHealthInsurance(x): x participates in health insurance.\nMaternityBenefits(x): x is entitled to maternity benefits.\nLeave(x): x takes leave.\nCheckUp(x): x gets a check-up.\nHealthInsuranceCard(x): x has a health insurance card.\n\nPremises:\nall x (Pregnant(x) | GiveBirth(x) | Adopt(x) | Sterilize(x) -> MaternityBenefits(x)).\nall x (SocialInsurance(x) -> (Leave(x) & CheckUp(x))).\nall x (HealthInsurance(x) -> HealthInsuranceCard(x)).\nall x (Leave(x) -> (MaternityBenefits(x) & SocialInsurance(x))).\nall x (CheckUp(x) -> MaternityBenefits(x)).\n-HealthInsurance(x) | SocialInsurance(x).\n\nConclusion:\nnot exists y (Benefit(y) & (y != SocialInsurance(y) & y != HealthInsurance(y))).\n------------------------",
        "premises": [
            "all x (Pregnant(x) | GiveBirth(x) | Adopt(x) | Sterilize(x) -> MaternityBenefits(x)).",
            "all x (SocialInsurance(x) -> (Leave(x) & CheckUp(x))).",
            "all x (HealthInsurance(x) -> HealthInsuranceCard(x)).",
            "all x (Leave(x) -> (MaternityBenefits(x) & SocialInsurance(x))).",
            "all x (CheckUp(x) -> MaternityBenefits(x)).",
            "-HealthInsurance(x) | SocialInsurance(x)."
        ],
        "conclusion": "------------------------",
        "id": "7a81af60-1f5d-43ac-bb43-b4afe8ed0d87"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. It is common for participants who are unable to participate in compulsory social insurance (because they do not work) to participate voluntary social insurance.\n2. Participants who are unable to participate in compulsory social insurance (because they do not work) are those who do not work.\nGoals:\nIs it possible to participate in both compulsory and voluntary insurance at the same time?\n\nPredicates:\nParticipate(x) | Compulsory(x) | Voluntary(x) | Work(x) | Insurance(x) | NotWork(x).\n\nExplanation:\nParticipate(x): x participates in insurance.\nCompulsory(x): x participates in compulsory insurance.\nVoluntary(x): x participates in voluntary insurance.\nWork(x): x works.\nNotWork(x): x does not work.\nInsurance(x): x is an insurance.\nCompulsoryInsurance(x): x is compulsory insurance.\nVoluntaryInsurance(x): x is voluntary insurance.\n\nPremises:\nall x (NotWork(x) -> Participate(x)).\nall x (Participate(x) -> (Compulsory(x) | Voluntary(x))).\n-Participate(x) | Compulsory(x).\nConclusion:\nall x (Compulsory(x) & Voluntary(x)) -> ~Participate(x).",
        "premises": [
            "all x (NotWork(x) -> Participate(x)).",
            "all x (Participate(x) -> (Compulsory(x) | Voluntary(x))).",
            "-Participate(x) | Compulsory(x)."
        ],
        "conclusion": "all x (Compulsory(x) & Voluntary(x)) -> ~Participate(x).",
        "id": "86f1fdbc-28b7-4306-a744-f9ebcd7d1cdb"
    },
    {
        "raw": "Here is the result in the specified format:\n\nRules:\n1. As per the 2014 Law on Health Insurance, you are required to participate in compulsory health insurance at your current employer.\n2. Your poor household health insurance card is no longer valid, and you will need to return it to the People's Committee of the commune where you were issued with the poor household insurance card.\n3. When you give birth, you have to use your employer's health insurance card to get the maternity benefits.\n4. If you use a poor household health insurance card, you will not be eligible for maternity benefits.\n\nGoals:\nIs the childbirth with poor household health insurance card entitled to maternity benefits?\n\nExplanation:\nParticipate(x): x participates in health insurance.\nCompulsory(x): x is compulsory.\nEmployer(x): x is the employer.\nCurrent(x): x is current.\nReturn(x): x returns.\nCommittee(x): x is the People's Committee.\nCommune(x): x is the commune.\nPoorHousehold(x): x is a poor household.\nInsuranceCard(x): x is an insurance card.\nMaternity(x): x is maternity.\nEligible(x): x is eligible.\n\nPredicates:\nParticipate(x) | Compulsory(x) | Employer(x) | Current(x) | Return(x) | Committee(x) | Commune(x) | PoorHousehold(x) | InsuranceCard(x) | Maternity(x) | Eligible(x)\n\nPremises:\nall x (Participate(x) -> Compulsory(x)).\nall x (Current(x) -> Employer(x)).\nall x (Return(x) -> Committee(x)).\nall x (Committee(x) -> Commune(x)).\nall x (PoorHousehold(x) -> InsuranceCard(x)).\nall x (InsuranceCard(x) -> Maternity(x)).\n-Eligible(x) | InsuranceCard(x).\n\nConclusion:\n-Eligible(x) | PoorHousehold(x).\n\nNote: The conclusion is negated, meaning that the childbirth with poor household health insurance card is not entitled to maternity benefits.",
        "premises": [
            "all x (Participate(x) -> Compulsory(x)).",
            "all x (Current(x) -> Employer(x)).",
            "all x (Return(x) -> Committee(x)).",
            "all x (Committee(x) -> Commune(x)).",
            "all x (PoorHousehold(x) -> InsuranceCard(x)).",
            "all x (InsuranceCard(x) -> Maternity(x)).",
            "-Eligible(x) | InsuranceCard(x)."
        ],
        "conclusion": "Note: The conclusion is negated, meaning that the childbirth with poor household health insurance card is not entitled to maternity benefits.",
        "id": "4ef9ba76-3299-4ec9-84de-5a0ac6f31bd6"
    },
    {
        "raw": "Rules:\n1. When your health insurance card takes effect, you will be paid for your childbirth costs as if you were receiving regular medical care.\n2. If the hospital is located at the place of initial registration specified in the card or at the level of technical services, the social insurance agency shall pay the patient at the following rate: \n   - 100% of the costs: \n     - When the patient receives medical services at the commune level \n     - Total cost of a medical service is lower than 15% of base pay (under VND 172,500 in 2015) at all levels.\n   - Having participated in health insurance for 5 consecutive years or more, having co-payments for medical expenses in a year larger than 6 months' base salary (over VND 6,900,000 in 2015) and being granted a certificate of non-co-payment by the social insurance agency in the year.\n   - Other cases shall be entitled to 80% of the medical examination and treatment costs.\nGoals:\nIs there any benefit for the employee who has 6 months to buy health insurance?\n###\nPredicates:\nBuy(x) | Pay(x) | Receive(x) | MedicalService(x) | MedicalTreatment(x) | CommuneLevel(x) | BasePay(x) | CoPayment(x) | Certificate(x) | SocialInsurance(x) | Employee(x) | HealthInsurance(x) | Benefit(x) | SixMonths(x) | VND(x).\n\nExplanation:\nBuy(x): x buys health insurance.\nPay(x): x is paid.\nReceive(x): x receives medical service.\nMedicalService(x): x is a medical service.\nMedicalTreatment(x): x is a medical treatment.\nCommuneLevel(x): x is at the commune level.\nBasePay(x): x is base pay.\nCoPayment(x): x has co-payment.\nCertificate(x): x has a certificate.\nSocialInsurance(x): x is a social insurance agency.\nEmployee(x): x is an employee.\nHealthInsurance(x): x is health insurance.\nBenefit(x): x has a benefit.\nSixMonths(x): x has 6 months.\nVND(x): x is in VND.\n\nPremises:\nall x (Buy(x) -> Pay(x)).\nall x (Receive(x) & MedicalService(x) -> (CommuneLevel(x) | BasePay(x) < 172500)).\nall x (CoPayment(x) & BasePay(x) > 6900000 & Certificate(x) & SocialInsurance(x) -> Pay(x)).\nall x (SixMonths(x) -> CoPayment(x)).\nall x (Employee(x) -> Buy(x)).\nall x (HealthInsurance(x) -> Employee(x)).\n\nConclusion:\nall x (Buy(x) & SixMonths(x) -> Benefit(x)).\n------------------------",
        "premises": [
            "all x (Buy(x) -> Pay(x)).",
            "all x (Receive(x) & MedicalService(x) -> (CommuneLevel(x) | BasePay(x) < 172500)).",
            "all x (CoPayment(x) & BasePay(x) > 6900000 & Certificate(x) & SocialInsurance(x) -> Pay(x)).",
            "all x (SixMonths(x) -> CoPayment(x)).",
            "all x (Employee(x) -> Buy(x)).",
            "all x (HealthInsurance(x) -> Employee(x))."
        ],
        "conclusion": "------------------------",
        "id": "4b7f4894-0434-4998-b807-74e051d6f7f4"
    },
    {
        "raw": "Rules:\n1. A person can only use one health insurance card.\n2. If a person is a member of multiple entities prescribed in Article 12 of the Law on Health insurance, the first group of entities shall be the first groups of entities in order of the groups prescribed in the Law in Article 2 of the law in health insurance.\n3. If a person is a public servant, she shall pay in the first group of subjects.\n4. If a person is a police relative, she must return the health insurance card to the Public Security Department.\n5. The social insurance agency will return the collected health insurance premium to the public security Department.\n\nGoals:\nIs it possible to not participate in health insurance at work when your spouse serves in the police?\n\nPredicates:\nMember(x, y) | Entity(x) | Group(x) | Person(x) | HealthInsurance(x) | PublicServant(x) | PoliceRelative(x) | Police(x) | PublicSecurityDepartment(x) | SocialInsuranceAgency(x) | HealthInsuranceCard(x) | InsurancePremium(x).\n\nExplanation:\nMember(x, y): x is a member of y.\nEntity(x): x is an entity.\nGroup(x): x is a group.\nPerson(x): x is a person.\nHealthInsurance(x): x is related to health insurance.\nPublicServant(x): x is a public servant.\nPoliceRelative(x): x is a police relative.\nPolice(x): x is the police.\nPublicSecurityDepartment(x): x is the Public Security Department.\nSocialInsuranceAgency(x): x is the social insurance agency.\nHealthInsuranceCard(x): x is a health insurance card.\nInsurancePremium(x): x is an insurance premium.\n\nPremises:\nall x (Person(x) -> (Member(x, Entity(x)) | Member(x, Entity(y)) & Member(y, Entity(z)) & ((Group(z) & Group(y)) | (Group(z) & Group(x)) | (Group(y) & Group(x)))).\nall x (Member(x, PublicServant(x)) -> (HealthInsurance(x) & PublicServant(x))).\nall x (Member(x, PoliceRelative(x)) -> (HealthInsurance(x) & PoliceRelative(x))).\nall x (PoliceRelative(x) -> Police(x)).\nall x (PublicServant(x) -> PublicSecurityDepartment(x)).\nall x (Police(x) -> PublicSecurityDepartment(x)).\nall x (SocialInsuranceAgency(x) -> HealthInsurance(x)).\nall x (HealthInsuranceCard(x) -> HealthInsurance(x)).\n-HealthInsuranceCard(x) | InsurancePremium(x).\n\nConclusion:\nexists x (Person(x) & PoliceRelative(x) & -HealthInsurance(x)).",
        "premises": [
            "all x (Person(x) -> (Member(x, Entity(x)) | Member(x, Entity(y)) & Member(y, Entity(z)) & ((Group(z) & Group(y)) | (Group(z) & Group(x)) | (Group(y) & Group(x)))).",
            "all x (Member(x, PublicServant(x)) -> (HealthInsurance(x) & PublicServant(x))).",
            "all x (Member(x, PoliceRelative(x)) -> (HealthInsurance(x) & PoliceRelative(x))).",
            "all x (PoliceRelative(x) -> Police(x)).",
            "all x (PublicServant(x) -> PublicSecurityDepartment(x)).",
            "all x (Police(x) -> PublicSecurityDepartment(x)).",
            "all x (SocialInsuranceAgency(x) -> HealthInsurance(x)).",
            "all x (HealthInsuranceCard(x) -> HealthInsurance(x)).",
            "-HealthInsuranceCard(x) | InsurancePremium(x)."
        ],
        "conclusion": "exists x (Person(x) & PoliceRelative(x) & -HealthInsurance(x)).",
        "id": "fa04eca7-4055-4299-9d44-093b8f7b206a"
    },
    {
        "raw": "Rules:\n1. Pursuant to Article 11 of Circular No. 59/2021/TT-BCA, citizens shall go to the police offices competent to receive applications for issuance, exchange and reissuance of Citizen Identification Cards in the areas where they permanently or temporarily reside to request issuance of the Citizen Identification Card.\n2. Pursuant to Article 23 of the Law on Citizen Identification 2014, the Citizen Identification Card is changed in the following cases: a/The cases specified in Clause 1, Article 21 of this Law, b/This card is damaged beyond use, c) Information about last name, middle name, first name and identity characteristics is changed, d) Gender and hometown is re-determined, dd) There is an error in information on the Citizen Identification card, e) At the request of the citizen.\n3. Pursuant to Article 24 of the Law on Citizen Identification 2014, the Citizen Identification Card is reissued in the following cases: a/It is lost, b/Its Vietnamese nationality is restored in accordance with the Law on Vietnamese Nationality.\n4. Pursuant to Article 24 of the Law on Citizen Identification 2014, in case of renewal of a citizen's identity card due to changes in information specified at Points c, d and e, Clause 1, Article 23 of this Law without information available in the national population database, the citizen shall submit a copy of the competent agency's document on such change.\n\nGoals:\nIs it necessary to renew citizenship when changing permanent residence?\n\nExplanation:\nReplace(x): x replaces Citizen Identification Card.\nReissue(x): x reissues Citizen Identification Card.\nChange(x): x changes Citizen Identification Card.\nLost(x): x loses Citizen Identification Card.\nRestore(x): x restores Vietnamese nationality.\nSubmit(x): x submits document.\n\nPredicates:\nReplace(x) | Reissue(x) | Change(x) | Lost(x) | Restore(x) | Submit(x) | CitizenIdentificationCard(x) | VietnameseNationality(x) | PermanentResidence(x) | NationalPopulationDatabase(x) | CompetentAgency(x) | Document(x) | Citizen(x) | Vietnamese(x).\n\nPremises:\nall x (Replace(x) -> (Change(x) | Lost(x) | Restore(x))).\nall x (Reissue(x) -> (Change(x) | Lost(x) | Restore(x))).\nall x (Change(x) -> (Submit(x) | CompetentAgency(x))).\nall x (Lost(x) -> Restore(x)).\nall x (Restore(x) -> VietnameseNationality(x)).\nall x (Submit(x) -> Document(x)).\nall x (CompetentAgency(x) -> NationalPopulationDatabase(x)).\nall x (Citizen(x) -> Vietnamese(x)).\nall x (PermanentResidence(x) -> NationalPopulationDatabase(x)).\n\nConclusion:\nall x (PermanentResidence(x) -> Replace(x)).",
        "premises": [
            "all x (Replace(x) -> (Change(x) | Lost(x) | Restore(x))).",
            "all x (Reissue(x) -> (Change(x) | Lost(x) | Restore(x))).",
            "all x (Change(x) -> (Submit(x) | CompetentAgency(x))).",
            "all x (Lost(x) -> Restore(x)).",
            "all x (Restore(x) -> VietnameseNationality(x)).",
            "all x (Submit(x) -> Document(x)).",
            "all x (CompetentAgency(x) -> NationalPopulationDatabase(x)).",
            "all x (Citizen(x) -> Vietnamese(x)).",
            "all x (PermanentResidence(x) -> NationalPopulationDatabase(x))."
        ],
        "conclusion": "all x (PermanentResidence(x) -> Replace(x)).",
        "id": "3777135a-b0cb-4ea1-bee8-13a57c92d958"
    },
    {
        "raw": "Rules:\n1. The commune-level People's Committee of the last place of residence of the deceased shall register the death.\n2. If the last place of residence of the deceased is unidentifiable, the People's Committee of commune where the deceased died or his/her body was discovered shall register his/hers death.\n3. Citizens' places of residence include their permanent and temporary residence.\n4. In case the place of permanent or temporary residence of a citizen cannot be determined, his/her place of residence is his/hers current place of stay determined under Clause 1, Article 19 of this Law.\n5. Commune-level People's Committees of last places of residence of deceased persons shall register their deaths according to current regulations.\n\nGoals:\nDeath registration allowed at the place of death temporary residence.\n\nExplanation:\nRegisterDeath(x): x registers death.\nLastPlaceOfResidence(x): x is the last place of residence of the deceased.\nUnidentifiable(x): x is unidentifiable.\nPermanentResidence(x): x is permanent residence.\nTemporaryResidence(x): x is temporary residence.\nCurrentPlaceOfStay(x): x is the current place of stay.\nPlaceOfResidence(x): x is the place of residence.\n\nPremises:\nall x (LastPlaceOfResidence(x) -> RegisterDeath(x)).\nall x (Unidentifiable(x) -> (LastPlaceOfResidence(x) | (RegisterDeath(x) & CurrentPlaceOfStay(x)))).\nall x (PermanentResidence(x) & TemporaryResidence(x) -> PlaceOfResidence(x)).\nall x (CurrentPlaceOfStay(x) -> PlaceOfResidence(x)).\nall x (RegisterDeath(x) -> PlaceOfResidence(x)).\n\nConclusion:\nall x (RegisterDeath(x) & TemporaryResidence(x) -> PlaceOfResidence(x)).",
        "premises": [
            "all x (LastPlaceOfResidence(x) -> RegisterDeath(x)).",
            "all x (Unidentifiable(x) -> (LastPlaceOfResidence(x) | (RegisterDeath(x) & CurrentPlaceOfStay(x)))).",
            "all x (PermanentResidence(x) & TemporaryResidence(x) -> PlaceOfResidence(x)).",
            "all x (CurrentPlaceOfStay(x) -> PlaceOfResidence(x)).",
            "all x (RegisterDeath(x) -> PlaceOfResidence(x))."
        ],
        "conclusion": "all x (RegisterDeath(x) & TemporaryResidence(x) -> PlaceOfResidence(x)).",
        "id": "80e16e72-c33f-4904-940e-453ebbd7490e"
    },
    {
        "raw": "Rules:\n1. Entities applying self-printed invoices prescribed in Point a Clause 1 Article 6 of Circular No. 153/2010/TT-BTC are not required to have accounting software.\n2. Entities applying self-printed invoices specified at Point b, Clause 1, Article 6 must have accounting software associated with sale software.\n3. Before creating self-printed invoices, organizations shall issue decisions on the use of self-print invoices to their managing tax offices and take responsibility for these decisions.\n4. The ordinal numbers on invoices are automatically numbered.\n5. Each sheet of an invoice number may be printed out only once, if printed out from the second time on, it must be shown as a copy.\n6. Invoice-printing software applications must satisfy confidentiality requirements by decentralizing the use right to users.\n7. Unauthorized persons may not intervene to change the data on the applications.\n\nGoals:\nIt is not required that invoice creation and printing software must be approved by tax offices.\n\nExplanation:\nPrintInvoice(x): x prints an invoice.\nAccountingSoftware(x): x has accounting software.\nSaleSoftware(x): x has sale software.\nDecision(x): x makes a decision.\nTaxOffice(x): x is a tax office.\nInvoiceNumber(x): x is an invoice number.\nConfidential(x): x satisfies confidentiality requirements.\nUseRight(x): x has the use right.\n\nPredicates:\nPrintInvoice(x) | AccountingSoftware(x) | SaleSoftware(x) | Decision(x) | TaxOffice(x) | InvoiceNumber(x) | Confidential(x) | UseRight(x) | Approved(x) | Required(x) | SelfPrinted(x) | Responsibility(x) | Users(x) | Data(x) | Change(x) | Intervene(x) | ChangeData(x)\n\nPremises:\nall x (SelfPrinted(x) -> (~Required(x) & AccountingSoftware(x))).\nall x (Required(x) -> (SaleSoftware(x) & Decision(x))).\nall x (Decision(x) -> TaxOffice(x)).\nall x (InvoiceNumber(x) -> Confidential(x)).\nall x (Confidential(x) -> UseRight(x)).\nall x (~Change(x) | Data(x)).\nall x (Intervene(x) -> ChangeData(x)).\n\nConclusion:\n~Approved(x).",
        "premises": [
            "all x (SelfPrinted(x) -> (~Required(x) & AccountingSoftware(x))).",
            "all x (Required(x) -> (SaleSoftware(x) & Decision(x))).",
            "all x (Decision(x) -> TaxOffice(x)).",
            "all x (InvoiceNumber(x) -> Confidential(x)).",
            "all x (Confidential(x) -> UseRight(x)).",
            "all x (~Change(x) | Data(x)).",
            "all x (Intervene(x) -> ChangeData(x))."
        ],
        "conclusion": "~Approved(x).",
        "id": "39cee6c8-c086-4a40-88fb-03f281469e5e"
    },
    {
        "raw": "Here is the result in the requested format:\n\nRules:\n1. Organizations other than enterprises but having business activities, business households and individuals, extra-small enterprises, enterprises in geographical areas with difficult or extremely difficult socio-economic conditions which are not eligible for self-printing invoices may buy invoices from tax offices under Clause 1, Article 11 of this Circular.\nGoals:\nIf unable to print invoices by themselves, may purchase invoices from tax offices.\n\nPredicates:\nBuyInvoice(x) | PrintInvoice(x) | TaxOffice(x) | Organization(x) | Enterprise(x) | BusinessActivity(x) | BusinessHousehold(x) | Individual(x) | ExtraSmallEnterprise(x) | DifficultArea(x) | ExtremelyDifficultArea(x) | SelfPrinting(x) | Eligible(x) | Ineligible(x).\n\nExplanation:\nBuyInvoice(x): x buys an invoice.\nPrintInvoice(x): x prints an invoice.\nTaxOffice(x): x is a tax office.\nOrganization(x): x is an organization.\nEnterprise(x): x is an enterprise.\nBusinessActivity(x): x has business activity.\nBusinessHousehold(x): x is a business household.\nIndividual(x): x is an individual.\nExtraSmallEnterprise(x): x is an extra-small enterprise.\nDifficultArea(x): x is in a difficult socio-economic area.\nExtremelyDifficultArea(x): x is in an extremely difficult socio-economic area.\nSelfPrinting(x): x is self-printing.\nEligible(x): x is eligible.\nIneligible(x): x is ineligible.\n\nPremises:\nall x (Ineligible(x) -> (BuyInvoice(x) & TaxOffice(y))).\nPrintInvoice(z).\n\nConclusion:\nall x (Ineligible(x) -> BuyInvoice(x)).",
        "premises": [
            "all x (Ineligible(x) -> (BuyInvoice(x) & TaxOffice(y))).",
            "PrintInvoice(z)."
        ],
        "conclusion": "all x (Ineligible(x) -> BuyInvoice(x)).",
        "id": "84996f9b-d0fe-4f40-a860-cb6537aa06e6"
    },
    {
        "raw": "Rules:\n1. Organizations may use ordered invoices and electronic invoices simultaneously.\n2. Pursuant to the abovementioned regulations.\n\nGoals:\nIs it possible for our company to use both print invoices and electronic invoices?\n\nPredicates:\nUseOrderedInvoice(x) | UseElectronicInvoice(x) | PrintInvoice(x) | ElectronicInvoice(x) | Regulation(x) | Organization(x) | Company(x).\n\nExplanation:\nUseOrderedInvoice(x): x uses ordered invoices.\nUseElectronicInvoice(x): x uses electronic invoices.\nPrintInvoice(x): x uses print invoices.\nElectronicInvoice(x): x uses electronic invoices.\nRegulation(x): x is a regulation.\nOrganization(x): x is an organization.\nCompany(x): x is a company.\n\nPremises:\nall x (UseOrderedInvoice(x) & UseElectronicInvoice(x) -> Regulation(x)).\nall x (Regulation(x) -> Organization(x)).\nCompany(x).\n\nConclusion:\nUseOrderedInvoice(Company(x)) & UseElectronicInvoice(Company(x)).",
        "premises": [
            "all x (UseOrderedInvoice(x) & UseElectronicInvoice(x) -> Regulation(x)).",
            "all x (Regulation(x) -> Organization(x)).",
            "Company(x)."
        ],
        "conclusion": "UseOrderedInvoice(Company(x)) & UseElectronicInvoice(Company(x)).",
        "id": "133acf38-3607-43eb-9f2d-70c6898e4a59"
    },
    {
        "raw": "Rules:\n1. Individuals earning income from salaries or wages who authorize their employers to register for tax are specified in Clause 4 Article 5 of Circular No. 95/2016/TT-BTC.\n2. Individuals earning incomes from salaries and wages at employers may authorize employers to apply for taxpayer registration or registration of dependants with tax authorities on behalf of the individuals.\n3. Individuals shall provide documents of individuals and dependants as prescribed in Clause 9 and Clause 10 Article 7 of this Circular to authorized employers, employers shall carry out taxpayer registration and dependant registration as authorized by individuals.\n4. An individual who simultaneously pays personal income tax through many income-paying agencies may authorize tax registration at only one income-benefiting agency to be granted a tax identification number.\n5. Each individual shall notify his/her TIN to other income-paying bodies for use in tax declaration and payment.\n\nGoals:\nIs the employee entitled to authorize the work team to pay personal tax?\n\nExplanation:\nEarnIncome(x): x earns income from salaries or wages.\nAuthorize(x): x authorizes someone to do something.\nRegister(x): x registers for tax.\nPay(x): x pays tax.\nNotify(x): x notifies someone of something.\nTIN(x): x has a tax identification number.\nEmployer(x): x is an employer.\nEmployee(x): x is an employee.\nWorkTeam(x): x is a work team.\n\nPredicates:\nEarnIncome(x) | Authorize(x) | Register(x) | Pay(x) | Notify(x) | TIN(x) | Employer(x) | Employee(x) | WorkTeam(x)\n\nPremises:\nall x (EarnIncome(x) & Authorize(x) & Employer(x) -> Register(x)).\nall x (Authorize(x) & Employer(x) & Employee(x) -> Register(x)).\nall x (Notify(x) & TIN(x) -> Pay(x)).\nall x (Employer(x) & Employee(x) & WorkTeam(x) -> Authorize(x)).\nall x (Employee(x) -> EarnIncome(x)).\n\nConclusion:\nall x (Employee(x) & EarnIncome(x) & Authorize(x) & Employer(x) & WorkTeam(x) -> Authorize(x)).",
        "premises": [
            "all x (EarnIncome(x) & Authorize(x) & Employer(x) -> Register(x)).",
            "all x (Authorize(x) & Employer(x) & Employee(x) -> Register(x)).",
            "all x (Notify(x) & TIN(x) -> Pay(x)).",
            "all x (Employer(x) & Employee(x) & WorkTeam(x) -> Authorize(x)).",
            "all x (Employee(x) -> EarnIncome(x))."
        ],
        "conclusion": "all x (Employee(x) & EarnIncome(x) & Authorize(x) & Employer(x) & WorkTeam(x) -> Authorize(x)).",
        "id": "f9a2c172-ef1b-4839-9c9a-032d4485a0ad"
    },
    {
        "raw": "Rules:\n1. In case of TIN reactivation upon commitment to fulfill tax liabilities as prescribed in Point b Clause 1 Article 20 of Circular No. 95/2016/TT-BTC on guidelines for tax registration, in which: If the taxpayer is an enterprise, business entity, other entity, household business that has been notified by the tax authority that the taxpayer does not operate at the registered address but the business registration authority has not issued a decision on revocation of the certificate of enterprise registration or certificate of household business registration, or another regulatory authority has issued a document on revocations of the license for establishment.\n2. If the taxpayer is an enterprise, business entity, other entity, household business that has been notified by the tax authority that the taxpayer does not operate at the registered address but the business registration authority has not issued a decision on revocation of the certificate of enterprise registration or certificate of household business registration, or another regulatory authority has issued a document on revocations of the license for establishment.\nGoals:\nIs the taxpayer's commitment to fulfill tax liabilities after receiving the notification from the tax authority restored?\n\nPredicates:\nTIN(x) | Reactivate(x) | Commitment(x) | Fulfill(x) | TaxLiabilities(x) | TaxAuthority(x) | Notification(x) | RegisteredAddress(x) | BusinessRegistration(x) | Certificate(x) | HouseholdBusiness(x) | RegulatoryAuthority(x) | License(x) | Establishment(x) | Enterprise(x) | BusinessEntity(x) | OtherEntity(x) | HouseholdBusiness(x) | TaxRegistration(x) | Guidelines(x) | Circular(x) | Point(x) | Clause(x) | Article(x) | PointB(x) | Clause1(x) | Article20(x) | Tax(x) | Liability(x) | NotificationFromTaxAuthority(x).\n\nExplanation:\nTIN(x): x has a Taxpayer Identification Number.\nReactivate(x): x is reactivated.\nCommitment(x): x has a commitment.\nFulfill(x): x fulfills.\nTaxLiabilities(x): x has tax liabilities.\nTaxAuthority(x): x is the tax authority.\nNotification(x): x has a notification.\nRegisteredAddress(x): x is at the registered address.\nBusinessRegistration(x): x has business registration.\nCertificate(x): x has a certificate.\nHouseholdBusiness(x): x is a household business.\nRegulatoryAuthority(x): x is a regulatory authority.\nLicense(x): x has a license.\nEstablishment(x): x is an establishment.\nEnterprise(x): x is an enterprise.\nBusinessEntity(x): x is a business entity.\nOtherEntity(x): x is an other entity.\nHouseholdBusiness(x): x is a household business.\nTaxRegistration(x): x has tax registration.\nGuidelines(x): x has guidelines.\nCircular(x): x is a circular.\nPoint(x): x is a point.\nClause(x): x is a clause.\nArticle(x): x is an article.\nPointB(x): x is point b.\nClause1(x): x is clause 1.\nArticle20(x): x is article 20.\nTax(x): x is tax.\nLiability(x): x has liability.\nNotificationFromTaxAuthority(x): x has a notification from the tax authority.\n\nPremises:\nall x (TIN(x) -> Reactivate(x)).\nall x (Commitment(x) -> Fulfill(x)).\nall x (TaxLiabilities(x) -> TaxAuthority(x)).\nall x (Notification(x) -> RegisteredAddress(x)).\nall x (BusinessRegistration(x) -> Certificate(x)).\nall x (HouseholdBusiness(x) -> BusinessRegistration(x)).\nall x (RegulatoryAuthority(x) -> License(x)).\nall x (Establishment(x) -> License(x)).\nall x (Enterprise(x) -> BusinessEntity(x)).\nall x (BusinessEntity(x) -> OtherEntity(x)).\nall x (OtherEntity(x) -> HouseholdBusiness(x)).\nall x (TaxRegistration(x) -> Guidelines(x)).\nall x (Circular(x) -> Guidelines(x)).\nall x (Point(x) -> Clause(x)).\nall x (Clause(x) -> Article(x)).\nall x (Article(x) -> PointB(x)).\nall x (PointB(x) -> Clause1(x)).\nall x (Clause1(x) -> Article20(x)).\nall x (Article20(x) -> Tax(x)).\nall x (Tax(x) -> Liability(x)).\n-NotificationFromTaxAuthority(x) | TaxAuthority(x).\n\nConclusion:\nall x (NotificationFromTaxAuthority(x) -> Commitment(x)).",
        "premises": [
            "all x (TIN(x) -> Reactivate(x)).",
            "all x (Commitment(x) -> Fulfill(x)).",
            "all x (TaxLiabilities(x) -> TaxAuthority(x)).",
            "all x (Notification(x) -> RegisteredAddress(x)).",
            "all x (BusinessRegistration(x) -> Certificate(x)).",
            "all x (HouseholdBusiness(x) -> BusinessRegistration(x)).",
            "all x (RegulatoryAuthority(x) -> License(x)).",
            "all x (Establishment(x) -> License(x)).",
            "all x (Enterprise(x) -> BusinessEntity(x)).",
            "all x (BusinessEntity(x) -> OtherEntity(x)).",
            "all x (OtherEntity(x) -> HouseholdBusiness(x)).",
            "all x (TaxRegistration(x) -> Guidelines(x)).",
            "all x (Circular(x) -> Guidelines(x)).",
            "all x (Point(x) -> Clause(x)).",
            "all x (Clause(x) -> Article(x)).",
            "all x (Article(x) -> PointB(x)).",
            "all x (PointB(x) -> Clause1(x)).",
            "all x (Clause1(x) -> Article20(x)).",
            "all x (Article20(x) -> Tax(x)).",
            "all x (Tax(x) -> Liability(x)).",
            "-NotificationFromTaxAuthority(x) | TaxAuthority(x)."
        ],
        "conclusion": "all x (NotificationFromTaxAuthority(x) -> Commitment(x)).",
        "id": "38693347-2dba-4022-8e4c-67c5211b8da6"
    },
    {
        "raw": "Here is the result in the requested format:\n\nRules:\n1. In case of TIN reactivation upon request for resuming operation as prescribed in Point c Clause 1 Article 20 of Circular No. 95/2016/TT-BTC on guidelines for taxpayer registration, the taxpayer being business entity, other entity, household business that has submitted an application for TIC deactivation to the tax authority but has not received a notification of TTC deactivate and wishes to resume operation shall have its TID reactivated.\nGoals:\nIs the taxpayer's tax identification number restored when the request for resuming operations is made?\n\nPredicates:\nTIN(x) | Reactivate(x) | Request(x) | Operation(x) | BusinessEntity(x) | OtherEntity(x) | HouseholdBusiness(x) | Application(x) | TaxAuthority(x) | Notification(x) | Resume(x) | TIC(x) | TTC(x) | TID(x) | Taxpayer(x) | Restore(x) | Deactivate(x)\n\nExplanation:\nTIN(x): x is a taxpayer's tax identification number.\nReactivate(x): x reactivates.\nRequest(x): x requests.\nOperation(x): x operates.\nBusinessEntity(x): x is a business entity.\nOtherEntity(x): x is another entity.\nHouseholdBusiness(x): x is a household business.\nApplication(x): x submits an application.\nTaxAuthority(x): x is the tax authority.\nNotification(x): x receives a notification.\nResume(x): x resumes.\nTIC(x): x is a taxpayer identification code.\nTTC(x): x is a tax transaction code.\nTID(x): x is a tax identification number.\nTaxpayer(x): x is a taxpayer.\nRestore(x): x is restored.\nDeactivate(x): x is deactivated.\n\nPremises:\nall x (Request(x) -> Operation(x)).\nall x (Application(x) -> Request(x)).\nall x (TaxAuthority(x) -> Notification(x)).\nall x (Resume(x) -> Reactivate(x)).\nall x (TIC(x) -> TID(x)).\nall x (TTC(x) -> TID(x)).\nall x (Taxpayer(x) -> (BusinessEntity(x) | OtherEntity(x) | HouseholdBusiness(x))).\nall x (TID(x) -> Taxpayer(x)).\n-Deactivate(x) | Reactivate(x).\n\nConclusion:\nall x (Request(x) -> Reactivate(x)).",
        "premises": [
            "all x (Request(x) -> Operation(x)).",
            "all x (Application(x) -> Request(x)).",
            "all x (TaxAuthority(x) -> Notification(x)).",
            "all x (Resume(x) -> Reactivate(x)).",
            "all x (TIC(x) -> TID(x)).",
            "all x (TTC(x) -> TID(x)).",
            "all x (Taxpayer(x) -> (BusinessEntity(x) | OtherEntity(x) | HouseholdBusiness(x))).",
            "all x (TID(x) -> Taxpayer(x)).",
            "-Deactivate(x) | Reactivate(x)."
        ],
        "conclusion": "all x (Request(x) -> Reactivate(x)).",
        "id": "c15cda2d-998a-413a-b925-111c720100ad"
    },
    {
        "raw": "Rules:\n1. Article 3 of Decision No. 130/2003/QD-TTg provides for the following prohibited acts: Counterfeit money making, transporting, storing, circulating, buying and selling counterfeit money.\n2. Destroying Vietnamese currency in any form.\n3. The photocopying of Vietnamese currency for any purpose without prior written approval of the State Bank is prohibited.\n4. To refuse to receive and circulate the money issued by the State Bank in the territory of Vietnam.\n5. Persons regularly entering Vietnam for work purposes are not entitled to duty-free luggage quotas for each entry but enjoy duty-exempt luggage quotas once every 90 days. a) Aircraft operators and attendants on international flights, b) Train operators and attendants on international trains, c) Officers and crewmembers on seagoing ships, d) Vietnamese drivers and workers in neighboring countries bordering on Vietnam's land. The entitlement to duty-free quotas for regular entrants shall be subject to the Prime Minister's Decision.\n\nGoals:\nIs selling hand luggage without customs is tax evasion?\n\nExplanation:\nCounterfeit(x): x engages in counterfeiting money.\nTransport(x): x transports money.\nStore(x): x stores money.\nCirculate(x): x circulates money.\nBuy(x): x buys money.\nSell(x): x sells money.\nDestroy(x): x destroys money.\nPhotocopy(x): x photocopies money.\nLegal(x): x is legal.\nApproval(x): x has approval.\nStateBank(x): x is the State Bank.\nVietnam(x): x is in the territory of Vietnam.\nVietnameseCurrency(x): x is Vietnamese currency.\nCustoms(x): x is related to customs.\nTaxEvasion(x): x is tax evasion.\nSellLuggage(x): x sells luggage.\nHandLuggage(x): x is hand luggage.\n\nPredicates:\nCounterfeit(x) | Transport(x) | Store(x) | Circulate(x) | Buy(x) | Sell(x) | Destroy(x) | Photocopy(x) | Legal(x) | Approval(x) | StateBank(x) | Vietnam(x) | VietnameseCurrency(x) | Customs(x) | TaxEvasion(x) | SellLuggage(x) | HandLuggage(x)\n\nPremises:\nall x (Counterfeit(x) -> (Transport(x) | Store(x) | Circulate(x) | Buy(x) | Sell(x))).\nDestroy(x).\nall x (Photocopy(x) -> (Legal(x) & Approval(x))).\nall x (Legal(x) -> Vietnam(x)).\nall x (StateBank(x) -> Vietnam(x)).\n-Photocopy(x) | Approval(x).\nall x (VietnameseCurrency(x) -> StateBankApproval(x)).\nall x (SellLuggage(x) -> (Customs(x) | TaxEvasion(x))).\n\nConclusion:\nall x (SellLuggage(x) -> TaxEvasion(x)).",
        "premises": [
            "all x (Counterfeit(x) -> (Transport(x) | Store(x) | Circulate(x) | Buy(x) | Sell(x))).",
            "Destroy(x).",
            "all x (Photocopy(x) -> (Legal(x) & Approval(x))).",
            "all x (Legal(x) -> Vietnam(x)).",
            "all x (StateBank(x) -> Vietnam(x)).",
            "-Photocopy(x) | Approval(x).",
            "all x (VietnameseCurrency(x) -> StateBankApproval(x)).",
            "all x (SellLuggage(x) -> (Customs(x) | TaxEvasion(x)))."
        ],
        "conclusion": "all x (SellLuggage(x) -> TaxEvasion(x)).",
        "id": "6473199d-f793-4959-81c2-21226cb73cc9"
    },
    {
        "raw": "Rules:\n1. In case your revenue is less than VND 100 million per year: Article 1. Taxpayers mentioned in Chapter I of this Circular are residents, including individuals, groups of individuals, and households that manufacture and sell goods and services in all business lines as prescribed by law (hereinafter referred to as \"businesspeople\").\n2. To practice independently in the production and business domains or trades, including the following cases: a) To practice independently the licensed production and/or business domains and trades or practice certificates as provided for by law. b) Acting as a lottery, insurance or multi-level marketing agent at fixed prices for a lottery agent, insurance agent or multilevel sales agent who directly signs a contract with a lottery enterprise, insurance company or multi level marketing company. c) Business cooperation with organizations. d) Agricultural production and trading, forestry production, salt making, aquaculture and fishing that fail to satisfy the conditions for tax exemption specified in Point e Clause 1 Article 3 of Circular No. 111/2013/TT-BTC dated August 15,2003 of the Ministry of Finance.\n3. Taxpayers mentioned in Clause 1 of this Article do not include businesspeople with turnover of VND 100 million/year or less. \n4. Individuals doing business with less than VND 100 million/year are not liable to personal income tax.\n5. If your revenue is above $100,000 per year, you will pay flat tax on your revenue. This package of subsidies depends on many factors, depending on the tax officials' assessment based on the development of local trades\n\nGoals:\nDoes it have taxes on selling groceries at home?\n\nExplanation:\nSell(x): x sells goods.\nGrocery(x): x is a grocery.\nHome(x): x is at home.\nTax(x): x has tax.\n\nPredicates:\nSell(x) | Grocery(x) | Home(x) | Tax(x)\n\nPremises:\nall x (Sell(x) -> Tax(x)).\nall x (Grocery(x) -> Home(x)).\n-Home(x) | Turnover(x) < 100000000.\n\nConclusion:\nall x (Sell(x, Grocery(x)) -> ~Tax(x)).",
        "premises": [
            "all x (Sell(x) -> Tax(x)).",
            "all x (Grocery(x) -> Home(x)).",
            "-Home(x) | Turnover(x) < 100000000."
        ],
        "conclusion": "all x (Sell(x, Grocery(x)) -> ~Tax(x)).",
        "id": "52c3e0e4-7096-44e3-bb8a-6cb0010fcd38"
    },
    {
        "raw": "Rules:\n1. Pursuant to the Circular No. 195/2015/TT-BTC, Article 3, goods not liable to duty specified in Article 2 of this Circular are not liable to excise tax in the following cases: goods brought abroad for sale at overseas fairs and exhibitions.\n2. The establishment that carries goods abroad for sale at an overseas fair or exhibition must fully fill the following procedures: an invitation or registration paper for participation in an overseas trade fair or exhibitions, the export goods declaration with the customs office's certification that the goods have been exported, a list of goods sold at the fair or exhibition, money payment documents for goods sold at trade fairs or exhibitions.\n3. In case the value of cash-collected goods is higher than the prescribed level, the seller shall declare such to the customs office and produce a document evidencing the remittance of money into the bank under current regulations.\n4. If, as you stated, your company carries liquor abroad for sale at a fair or exhibition, you will be tax-free. However, to qualify, you must obtain the following documents: an invitation or registration form for participation in the fair or exhibition, a list of goods sold, payment documents for goods sold at the fair and exhibition.\n\nGoals:\nIs selling goods at a fair or exhibition abroad taxed?\n\nExplanation:\nTaxFree(x): x is tax-free.\nSell(x): x sells goods.\nFair(x): x is at a fair or exhibition.\nAbroad(x): x is abroad.\n\nPredicates:\nTaxFree(x) | Sell(x) | Fair(x) | Abroad(x) | Liquor(x) | Company(x) | ExciseTax(x) | Goods(x) | Sold(x) | Payment(x) | Registration(x) | Invitation(x) | Customs(x) | Bank(x) | Level(x) | Value(x) | Prescribed(x)\n\nPremises:\nall x (Sell(x) & Abroad(x) & Fair(x) -> TaxFree(x)).\nall x (Liquor(x) -> Goods(x)).\nall x (Company(x) -> Liquor(x)).\nall x (ExciseTax(x) -> Goods(x)).\nall x (Sold(x) -> Payment(x)).\nall x (Payment(x) -> Value(x) > Level(x)).\nall x (Value(x) > Level(x) -> Declare(x)).\nall x (Declare(x) -> Document(x)).\nall x (Document(x) -> Bank(x)).\nall x (Bank(x) -> Customs(x)).\n-ExciseTax(x) | TaxFree(x).\n\nConclusion:\nall x (Sell(x) & Abroad(x) & Fair(x) -> ExciseTax(x)).",
        "premises": [
            "all x (Sell(x) & Abroad(x) & Fair(x) -> TaxFree(x)).",
            "all x (Liquor(x) -> Goods(x)).",
            "all x (Company(x) -> Liquor(x)).",
            "all x (ExciseTax(x) -> Goods(x)).",
            "all x (Sold(x) -> Payment(x)).",
            "all x (Payment(x) -> Value(x) > Level(x)).",
            "all x (Value(x) > Level(x) -> Declare(x)).",
            "all x (Declare(x) -> Document(x)).",
            "all x (Document(x) -> Bank(x)).",
            "all x (Bank(x) -> Customs(x)).",
            "-ExciseTax(x) | TaxFree(x)."
        ],
        "conclusion": "all x (Sell(x) & Abroad(x) & Fair(x) -> ExciseTax(x)).",
        "id": "2fa34069-cac5-4419-9da6-8d84ab0710e9"
    },
    {
        "raw": "Here is the result in the required format:\n\nRules:\n1. Taxpayers shall determine by themselves whether they are subjects to make monthly or quarterly tax declaration.\n2. In order to make tax declaration as prescribed.\n\nGoals:\nIs it possible to declare VAT of the company quarterly?\n\nPredicates:\nTaxpayer(x) | Monthly(x) | Quarterly(x) | Subject(x) | Declare(x) | VAT(x) | Company(x) | QuarterlyTax(x) | MonthlyTax(x).\n\nExplanation:\nTaxpayer(x): x is a taxpayer.\nMonthly(x): x makes monthly tax declaration.\nQuarterly(x): x makes quarterly tax declaration.\nSubject(x): x is a subject to make tax declaration.\nDeclare(x): x declares tax.\nVAT(x): x declares VAT.\nCompany(x): x is a company.\nQuarterlyTax(x): x makes quarterly tax declaration.\nMonthlyTax(x): x makes monthly tax declaration.\n\nPremises:\nall x (Taxpayer(x) -> (Monthly(x) | Quarterly(x))).\nall x (Subject(x) -> Declare(x)).\n-QuarterlyTax(x) | MonthlyTax(x).\n\nConclusion:\nall x (Company(x) -> QuarterlyTax(x)).\n\nNote: The conclusion is not directly provided in the rules, but it can be inferred from the premises. The conclusion states that if a company is a taxpayer, then it is subject to make quarterly tax declaration.",
        "premises": [
            "all x (Taxpayer(x) -> (Monthly(x) | Quarterly(x))).",
            "all x (Subject(x) -> Declare(x)).",
            "-QuarterlyTax(x) | MonthlyTax(x)."
        ],
        "conclusion": "Note: The conclusion is not directly provided in the rules, but it can be inferred from the premises. The conclusion states that if a company is a taxpayer, then it is subject to make quarterly tax declaration.",
        "id": "b97c3e4f-6c35-4e68-923e-c6823c7c63de"
    },
    {
        "raw": "Rules:\n1. Business establishments that have fully complied with regulations on accounting, invoices and documents in accordance with regulations of law on accounting and invoices and document, including: a/Operating business establishments that earn annual revenue from sale of goods or provision of services of VND one billion or more and fully complies with regulations and law on invoices and records, except for business households and individuals that pay tax by direct calculation method, b/Business establishments that voluntarily register to apply the tax credit method, except those that pay taxes by direct calculating method, c/Foreign organizations and individuals providing goods and services for prospecting a) Enterprises and cooperatives that are operating and earn annual revenue of less than VND 1 billion from selling goods and services subject to VAT and have fully complied with regulations on accounting, invoices, and documents prescribed by regulations of law on accounting and invoices and documents. b) Enterprises newly established from investment projects of operating business establishments paying VAT by deduction method. A new enterprise that makes investment under an investment project approved by a competent authority and voluntarily applies the credit-invoice method is a new enterprise which makes investment in the project approved in writing by a regulatory authority. A new enterprise or cooperative that has an investment project that is not subject to approval by a competent authority as prescribed by law on investment but has an Investment Plan approved by the competent person of the enterprise that issues the investment decision and is subject to registration for application of credit-invoice method. c) The new enterprise or cooperative that invests, procures, receives capital contribution in fixed assets, machinery, equipment, tools, or has a lease contract. d) Foreign organizations and individuals doing business in Vietnam under main contracts and subcontracts. dd) Other business entities that are able to record input and output VAT, excluding enterprises and cooperatives.\nGoals:\nIs the enterprise eligible for tax deduction method?\n\nExplanation:\nEnterprise(x): x is an enterprise.\nEligible(x): x is eligible for tax deduction method.\nComply(x): x complies with regulations.\nRevenue(x): x has revenue.\nVND(x): x is in Vietnamese Dong.\nAnnual(x): x is annual.\nVAT(x): x is Value-Added Tax.\nPayment(x): x pays tax.\nCalculation(x): x calculates tax.\nMethod(x): x has a method.\n\nPremises:\nall x (Comply(x) & Annual(x) & Revenue(x) & VND(x) & VAT(x) -> Payment(x)).\nall x (Comply(x) & Annual(x) & Revenue(x) & VND(x) & VAT(x) -> Calculation(x)).\nall x (Calculation(x) -> Method(x)).\nall x (Method(x) -> Eligible(x)).\nall x (Eligible(x) -> Enterprise(x)).\n\nConclusion:\nall x (Enterprise(x) -> Eligible(x)).",
        "premises": [
            "all x (Comply(x) & Annual(x) & Revenue(x) & VND(x) & VAT(x) -> Payment(x)).",
            "all x (Comply(x) & Annual(x) & Revenue(x) & VND(x) & VAT(x) -> Calculation(x)).",
            "all x (Calculation(x) -> Method(x)).",
            "all x (Method(x) -> Eligible(x)).",
            "all x (Eligible(x) -> Enterprise(x))."
        ],
        "conclusion": "all x (Enterprise(x) -> Eligible(x)).",
        "id": "b53b7956-d273-456d-a7b9-54f59ca6794f"
    },
    {
        "raw": "Rules:\n1. Article 18 of Decree No. 19/2019/ND-CP specifies the obligations of the tontine holder as follows: Notify members of their new residences in case of any change.\n2. Article 16 of Decree No. 144/2021/ND-CP prescribes violations against regulations on tontine, including failing to notify members of the new place of residence in case of change.\n3. Article 4 of Decree No. 144/2021/ND-CP on fines: The fines prescribed in Chapter II of this Decree are imposed on administrative violations committed by individuals.\n\nGoals:\nDo you need to inform members when changing your residence?\n\nExplanation:\nNotify(x): x notifies members.\nChange(x): x changes residence.\nTontineHolder(x): x is a tontine holder.\nTontineGroup(x): x is a tontine group.\nResidence(x): x is a residence.\n\nPredicates:\nNotify(x) | Change(x) | TontineHolder(x) | TontineGroup(x) | Residence(x) | Fine(x) | Organization(x) | Individual(x) | CivilCode(x) | StateBudget(x) | PeopleCommittee(x) | Commune(x) | AnnuityShare(x) | Tontine(x) | Annually(x) | Opening(x) | InterestRate(x) | Loan(x) | Capital(x) | Illegal(x) | Remedy(x) | Profit(x) | Budget(x)\n\nPremises:\nall x (TontineHolder(x) -> Notify(x)).\nall x (Change(x) -> Notify(x)).\nall x (Notify(x) -> ~Change(x)).\nall x (Fine(x) -> Organization(x) | Individual(x)).\nall x (Organization(x) -> Fine(x) * 2).\nall x (Individual(x) -> Fine(x)).\nall x (CivilCode(x) -> InterestRate(x)).\nall x (StateBudget(x) -> Budget(x)).\nall x (PeopleCommittee(x) -> Commune(x)).\nall x (Commune(x) -> Residence(x)).\nall x (AnnuityShare(x) -> Tontine(x)).\nall x (Tontine(x) -> Opening(x)).\nall x (Opening(x) -> Annually(x)).\nall x (InterestRate(x) -> Loan(x)).\nall x (Loan(x) -> Capital(x)).\nall x (Capital(x) -> Illegal(x)).\nall x (Remedy(x) -> Profit(x)).\nall x (Profit(x) -> Budget(x)).\n\nConclusion:\nall x (Change(x) -> Notify(x)).",
        "premises": [
            "all x (TontineHolder(x) -> Notify(x)).",
            "all x (Change(x) -> Notify(x)).",
            "all x (Notify(x) -> ~Change(x)).",
            "all x (Fine(x) -> Organization(x) | Individual(x)).",
            "all x (Organization(x) -> Fine(x) * 2).",
            "all x (Individual(x) -> Fine(x)).",
            "all x (CivilCode(x) -> InterestRate(x)).",
            "all x (StateBudget(x) -> Budget(x)).",
            "all x (PeopleCommittee(x) -> Commune(x)).",
            "all x (Commune(x) -> Residence(x)).",
            "all x (AnnuityShare(x) -> Tontine(x)).",
            "all x (Tontine(x) -> Opening(x)).",
            "all x (Opening(x) -> Annually(x)).",
            "all x (InterestRate(x) -> Loan(x)).",
            "all x (Loan(x) -> Capital(x)).",
            "all x (Capital(x) -> Illegal(x)).",
            "all x (Remedy(x) -> Profit(x)).",
            "all x (Profit(x) -> Budget(x))."
        ],
        "conclusion": "all x (Change(x) -> Notify(x)).",
        "id": "b8ab422f-0f14-408d-9711-d829f1ea3f48"
    },
    {
        "raw": "Rules:\n1.Parents have the right to recognize their children, even in case the children have died, according to Article 91 of the 2014 Law on Marriage and Family.\n2.In cases where a married person acknowledges a child, the child recognition need not be consented by the other person.\n3.Children have the right to recognize their parents even in case the parents have died.\n4.Adult children who have adopted their fathers without the consent of their mothers, adopted their mothers without the permission of their fathers.\n5.Based on the provisions cited above by the Editorial Board, parents may recognize their children, even in case they have died.\nGoals:\nIs it lawful for a parent to recognize a child in case of death or not?\n###\nPredicates:\nRecognize(x) | Acknowledge(x) | Consent(x) | Child(x) | Parent(x) | Law(x) | Article(x) | Right(x) | Death(x) | Lawful(x) | EditorialBoard(x) | Married(x) | ChildRecognition(x) | Father(x) | Mother(x) | Adopt(x) | Permission(x).\n\nExplanation:\nRecognize(x): x recognizes a child.\nAcknowledge(x): x acknowledges a child.\nConsent(x): x gives consent.\nChild(x): x is a child.\nParent(x): x is a parent.\nLaw(x): x is a law.\nArticle(x): x is an article of a law.\nRight(x): x has a right.\nDeath(x): x has died.\nLawful(x): x is lawful.\nEditorialBoard(x): x is the Editorial Board.\nMarried(x): x is married.\nChildRecognition(x): x is child recognition.\nFather(x): x is a father.\nMother(x): x is a mother.\nAdopt(x): x adopts.\nPermission(x): x gives permission.\n\nPremises:\nall x (Recognize(x) -> (Right(x) & Death(x))).\nall x (Acknowledge(x) -> (Right(x) & ~Consent(x))).\nall x (Child(x) -> (Parent(x) | Father(x) | Mother(x))).\nall x (Parent(x) -> (Right(x) & Law(x))).\nall x (Article(x) -> Law(x)).\nall x (Right(x) -> Lawful(x)).\nall x (EditorialBoard(x) -> Law(x)).\n-Adopt(x) | Permission(x).\nall x (Married(x) -> ChildRecognition(x)).\n\nConclusion:\nall x (Recognize(x) -> Lawful(x)).",
        "premises": [
            "all x (Recognize(x) -> (Right(x) & Death(x))).",
            "all x (Acknowledge(x) -> (Right(x) & ~Consent(x))).",
            "all x (Child(x) -> (Parent(x) | Father(x) | Mother(x))).",
            "all x (Parent(x) -> (Right(x) & Law(x))).",
            "all x (Article(x) -> Law(x)).",
            "all x (Right(x) -> Lawful(x)).",
            "all x (EditorialBoard(x) -> Law(x)).",
            "-Adopt(x) | Permission(x).",
            "all x (Married(x) -> ChildRecognition(x))."
        ],
        "conclusion": "all x (Recognize(x) -> Lawful(x)).",
        "id": "4725c77b-b97f-4cd7-925a-f4971c7fad39"
    },
    {
        "raw": "Here is the result in the required format:\n\nRules:\n1. Common property includes property created by husband and/or wife, incomes generated from labor, production and business activities and other lawful incomes of husband as of the marriage period, property jointly inherited or donated by husband or wife and other property agreed upon by husband as common property.\n2. The gold amount borrowed by mother-in-law.\n\nGoals:\nReclaim the gold without papers lent to mother-in-law.\n\nExplanation:\nReclaim(x): x reclaims the gold.\nCreated(x): x is created by husband and/or wife.\nIncome(x): x is an income generated from labor, production and business activities and other lawful incomes of husband as of the marriage period.\nJointlyInherited(x): x is jointly inherited by husband or wife.\nJointlyDonated(x): x is jointly donated by husband or wife.\nAgreed(x): x is agreed upon by husband as common property.\nBorrowed(x): x is borrowed by mother-in-law.\n\nPredicates:\nReclaim(x) | Created(x) | Income(x) | JointlyInherited(x) | JointlyDonated(x) | Agreed(x) | Borrowed(x) | CommonProperty(x) | Marriage(x) | Family(x) | Law(x) | Gold(x) | Husband(x) | Wife(x) | MotherInLaw(x) | MarriagePeriod(x).\n\nPremises:\nall x (CommonProperty(x) -> (Created(x) | Income(x) | JointlyInherited(x) | JointlyDonated(x) | Agreed(x))).\nBorrowed(x).\nall x (Reclaim(x) -> Marriage(x) & Family(x) & Law(x) & Gold(x) & Husband(x) & Wife(x) & MotherInLaw(x) & MarriagePeriod(x)).\n\nConclusion:\n- Reclaim(x).",
        "premises": [
            "all x (CommonProperty(x) -> (Created(x) | Income(x) | JointlyInherited(x) | JointlyDonated(x) | Agreed(x))).",
            "Borrowed(x).",
            "all x (Reclaim(x) -> Marriage(x) & Family(x) & Law(x) & Gold(x) & Husband(x) & Wife(x) & MotherInLaw(x) & MarriagePeriod(x))."
        ],
        "conclusion": "- Reclaim(x).",
        "id": "a5b711e6-fec4-427a-b585-7813856759d9"
    },
    {
        "raw": "Rules:\n1. According to Clause 2 Article 17, Clause 1 Article 18 of the Law on the Elderly, the persons aged 80 years or older without monthly pension, social insurance benefits or social insurance benefit shall be bought health insurance cards by the State if they are not on monthly pension or social security benefits or monthly social insurance allowance.\n2. The monthly pension, social insurance benefits or social insurance benefit is covered by health insurance.\n\nGoals:\nIs the monthly death benefit covered by health insurance?\n\nPredicates:\nPerson(x) | Age(x) | Pension(x) | SocialInsurance(x) | HealthInsurance(x) | DeathBenefit(x) | State(x) | Elderly(x) | Law(x) | Clause(x) | Article(x) | Benefit(x) | Allowance(x).\n\nExplanation:\nPerson(x): x is a person.\nAge(x): x has age.\nPension(x): x has pension.\nSocialInsurance(x): x has social insurance.\nHealthInsurance(x): x has health insurance.\nDeathBenefit(x): x has death benefit.\nState(x): x is the State.\nElderly(x): x is elderly.\nLaw(x): x is a law.\nClause(x): x is a clause.\nArticle(x): x is an article.\nBenefit(x): x is a benefit.\nAllowance(x): x is an allowance.\n\nPremises:\nall x (Elderly(x) -> (Age(x) >= 80)).\nall x (Pension(x) -> Benefit(x)).\nall x (SocialInsurance(x) -> Benefit(x)).\nall x (Benefit(x) -> HealthInsurance(x)).\n-HealthInsurance(x) | Benefit(x).\nall x (State(x) -> HealthInsurance(x)).\nConclusion:\nall x (DeathBenefit(x) -> HealthInsurance(x)).",
        "premises": [
            "all x (Elderly(x) -> (Age(x) >= 80)).",
            "all x (Pension(x) -> Benefit(x)).",
            "all x (SocialInsurance(x) -> Benefit(x)).",
            "all x (Benefit(x) -> HealthInsurance(x)).",
            "-HealthInsurance(x) | Benefit(x).",
            "all x (State(x) -> HealthInsurance(x))."
        ],
        "conclusion": "all x (DeathBenefit(x) -> HealthInsurance(x)).",
        "id": "d8436917-cdb6-434e-bf1a-4f2d92eee212"
    },
    {
        "raw": "Rules:\n1. You're not guilty of a crime if you're buying and selling in the first place.\n2. However, if you've heard about this car and you're not sure if it's a fake, you should call the police and find out what's going on.\nGoals:\nIs it a crime to buy and sell car in the nature of a crime?\n\nPredicates:\nFake(x) | Crime(x) | Buy(x) | Sell(x) | Police(x) | Car(x).\n\nExplanation:\nFake(x): x is a fake car.\nCrime(x): x is a crime.\nBuy(x): x buys a car.\nSell(x): x sells a car.\nPolice(x): x is the police.\nCar(x): x is a car.\n\nPremises:\nall x (Buy(x) & Sell(x) -> ~Crime(x)).\n~Fake(x) -> ~Crime(x).\nall x (Fake(x) -> Crime(x)).\n\nConclusion:\n~(Buy(x) & Sell(x)) | Fake(x).\n------------------------",
        "premises": [
            "all x (Buy(x) & Sell(x) -> ~Crime(x)).",
            "~Fake(x) -> ~Crime(x).",
            "all x (Fake(x) -> Crime(x))."
        ],
        "conclusion": "------------------------",
        "id": "0b825725-dbf3-44be-b0e2-159759f3ff46"
    },
    {
        "raw": "Rules:\n1. The National Center for Judicial Records shall issue judicial records cards to Vietnamese citizens whose places of permanent or temporary residence are unidentifiable, foreigners residing in Vietnam, and foreigners who have already left Vietnam.\n2. Foreigners residing in Vietnam who file their applications with provincial-level Justice Departments of localities where they reside shall also be issued judicial records cards.\n3. Individuals requesting the issue of judicial records card No. 1 may authorize others to carry out procedures for the issuance of judicial document cards.\n4. Written authorization is not required for requesters of judicial history cards who are fathers, mothers, spouses, or children of persons to whom judicial record card are issued.\n5. A dossier of request for issuance of a judicial record card comprises the application form for issuance of criminal record certificate, 01 copy of the certificate of permanent or temporary residence certified by a police office, a copy of the passport of the applicant, and the power of attorney.\n\nGoals:\nIs it possible to authorize another person to request issuance of Criminal record number 1?\n\nExplanation:\nRequesting issuance of judicial record card: x requests the issuance of judicial record card.\nAuthorizing another person: x authorizes another person to carry out procedures for the issuance of judicial document cards.\n\nPredicates:\nRequest(x) | Authorize(x) | Issue(x) | JudicialRecordCard(x) | VietnameseCitizen(x) | Foreigner(x) | Province(x) | JusticeDepartment(x) | Local(x) | PoliceOffice(x) | Passport(x) | PowerOfAttorney(x) | Notarized(x) | Certified(x) | WrittenAuthorization(x).\n\nPremises:\nall x (Request(x) -> (VietnameseCitizen(x) | Foreigner(x))).\nall x (Foreigner(x) -> (Province(x) | NotLeftVietnam(x))).\nall x (Request(x) -> (Authorize(x) | NotAuthorize(x))).\nall x (Authorize(x) -> (WrittenAuthorization(x) | NotWrittenAuthorization(x))).\n\nConclusion:\nall x (Request(x) -> Authorize(x)).",
        "premises": [
            "all x (Request(x) -> (VietnameseCitizen(x) | Foreigner(x))).",
            "all x (Foreigner(x) -> (Province(x) | NotLeftVietnam(x))).",
            "all x (Request(x) -> (Authorize(x) | NotAuthorize(x))).",
            "all x (Authorize(x) -> (WrittenAuthorization(x) | NotWrittenAuthorization(x)))."
        ],
        "conclusion": "all x (Request(x) -> Authorize(x)).",
        "id": "fe3b1bfa-7f90-4dce-a1f7-008bf0e5d5f5"
    },
    {
        "raw": "Rules:\n1. A divorce application can be filed without a marriage license.\n2. To obtain a marriage certificate for use as a divorce file, one needs to contact the civil status office where one previously registered their marriage to obtain a copy.\n3. The divorce file should state why the original marriage certificate is not available.\n4. During the court process, one's spouse will be required to submit the original.\n5. Household registration: Contact the police authority of the ward or commune where one and their spouse reside to confirm that their spouse is a permanent resident of the locality.\n6. Birth registration: Contact the civil status authority where one registered their child's birth to apply for a copy.\n7. If one is unable to supplement certain documents required by the court when filing a petition with the court, one's sister may apply for a court order, and the court will request that one's husband to supplement them later.\n8. The place of settlement: The district-level People's Court of the locality where the husband resides or works (Point a, Clause 1, Article 39 of the 2015 Civil Procedure Code).\n9. Or, one and their spouse may reach an agreement to request the Court of the area where one resides or works to settle the case (Point b Clause 1 Article 39 of the 2015 Code of Civil Procedure).\n\nGoals:\nDivorce is possible without an original marriage certificate.\n\nPredicates:\nDivorce(x) | File(x) | MarriageLicense(x) | MarriageCertificate(x) | CivilStatusOffice(x) | Copy(x) | Original(x) | HouseholdRegistration(x) | PoliceAuthority(x) | PermanentResident(x) | BirthRegistration(x) | ChildBirth(x) | CivilStatusAuthority(x) | Sister(x) | CourtOrder(x) | Court(x) | Husband(x) | Wife(x) | Locality(x) | Residence(x) | Work(x) | Agreement(x) | CourtSettlement(x).\n\nExplanation:\nDivorce(x): x divorces.\nFile(x): x files a divorce application.\nMarriageLicense(x): x has a marriage license.\nMarriageCertificate(x): x has a marriage certificate.\nCivilStatusOffice(x): x is a civil status office.\nCopy(x): x is a copy.\nOriginal(x): x is the original.\nHouseholdRegistration(x): x registers a household.\nPoliceAuthority(x): x is a police authority.\nPermanentResident(x): x is a permanent resident.\nBirthRegistration(x): x registers a birth.\nChildBirth(x): x is a child born.\nCivilStatusAuthority(x): x is a civil status authority.\nSister(x): x is a sister.\nCourtOrder(x): x is a court order.\nCourt(x): x is a court.\nHusband(x): x is a husband.\nWife(x): x is a wife.\nLocality(x): x is a locality.\nResidence(x): x resides.\nWork(x): x works.\nAgreement(x): x agrees.\nCourtSettlement(x): x settles a case.\n\nPremises:\nall x (File(x) -> (MarriageLicense(x) | MarriageCertificate(x))).\nall x (MarriageCertificate(x) -> (Copy(x) & Original(x))).\nall x (Original(x) -> (HouseholdRegistration(x) | BirthRegistration(x))).\nall x (HouseholdRegistration(x) -> (PoliceAuthority(x) & PermanentResident(x))).\nall x (BirthRegistration(x) -> (CivilStatusAuthority(x) & ChildBirth(x))).\nall x (Sister(x) -> (CourtOrder(x) & Court(x))).\nall x (Husband(x) -> (Locality(x) & Residence(x) & Work(x))).\nall x (Wife(x) -> (Locality(x) & Residence(x) & Work(x))).\n-File(x) | Agreement(x).\n\nConclusion:\nall x (Divorce(x) -> File(x)).",
        "premises": [
            "all x (File(x) -> (MarriageLicense(x) | MarriageCertificate(x))).",
            "all x (MarriageCertificate(x) -> (Copy(x) & Original(x))).",
            "all x (Original(x) -> (HouseholdRegistration(x) | BirthRegistration(x))).",
            "all x (HouseholdRegistration(x) -> (PoliceAuthority(x) & PermanentResident(x))).",
            "all x (BirthRegistration(x) -> (CivilStatusAuthority(x) & ChildBirth(x))).",
            "all x (Sister(x) -> (CourtOrder(x) & Court(x))).",
            "all x (Husband(x) -> (Locality(x) & Residence(x) & Work(x))).",
            "all x (Wife(x) -> (Locality(x) & Residence(x) & Work(x))).",
            "-File(x) | Agreement(x)."
        ],
        "conclusion": "all x (Divorce(x) -> File(x)).",
        "id": "3b17b2c1-d9eb-47c7-979b-bac41de9ea28"
    },
    {
        "raw": "Rules:\n1. Employees who are interested in unemployment benefits being handled by a Labor, War Invalids and Social Affairs Center shall bring the social insurance book and copies of birth certificate and decision on resignation to the Center for settlement.\n2. The company's employees shall contact the Center directly for specific guidance on handling unemployment benefits.\nGoals:\nIs the unemployment insurance authorized to do this for you?\n###\nPredicates:\nEmployee(x) | Labor(x) | WarInvalids(x) | SocialAffairs(x) | Center(x) | SocialInsuranceBook(x) | BirthCertificate(x) | DecisionOnResignation(x) | UnemploymentInsurance(x) | Authorized(x) | Guidance(x) | Settlement(x).\n\nExplanation:\nEmployee(x): x is an employee.\nLabor(x): x is a Labor, War Invalids and Social Affairs Center.\nWarInvalids(x): x is a War Invalids and Social Affairs Center.\nSocialAffairs(x): x is a Social Affairs Center.\nCenter(x): x is a Center.\nSocialInsuranceBook(x): x is a social insurance book.\nBirthCertificate(x): x is a birth certificate.\nDecisionOnResignation(x): x is a decision on resignation.\nUnemploymentInsurance(x): x is unemployment insurance.\nAuthorized(x): x is authorized.\nGuidance(x): x is guidance.\nSettlement(x): x is settlement.\n\nPremises:\nall x (Employee(x) -> (Labor(x) | WarInvalids(x) | SocialAffairs(x))).\nall x (Employee(x) -> (SocialInsuranceBook(x) & BirthCertificate(x) & DecisionOnResignation(x))).\nall x (Employee(x) -> Guidance(x)).\nall x (Employee(x) -> Settlement(x)).\n- UnemploymentInsurance(x) | Authorized(x).\n\nConclusion:\nall x (Employee(x) -> UnemploymentInsurance(x)).",
        "premises": [
            "all x (Employee(x) -> (Labor(x) | WarInvalids(x) | SocialAffairs(x))).",
            "all x (Employee(x) -> (SocialInsuranceBook(x) & BirthCertificate(x) & DecisionOnResignation(x))).",
            "all x (Employee(x) -> Guidance(x)).",
            "all x (Employee(x) -> Settlement(x)).",
            "- UnemploymentInsurance(x) | Authorized(x)."
        ],
        "conclusion": "all x (Employee(x) -> UnemploymentInsurance(x)).",
        "id": "c134d882-f74b-41ed-88bf-deb6676cbbb6"
    },
    {
        "raw": "Here is the result in the requested format:\n\nRules:\n1. Abandoned children who have not been transferred to nurturing centers are adopted, the commune-level People's Committees which make records certifying the abandoned children's status shall register adoption.\n2. Children in nurturing centers who are adopted are adopted.\n3. The commune People's Committees of the localities where nurturing centers' head offices are located shall register the adoption.\n\nGoals:\nRegistration of child adoption can be registered at the commune People's Committee where the adopting person resides.\n\nExplanation:\nAdopt(x): x is adopted.\nNurturingCenter(x): x is a nurturing center.\nCommunePeopleCommittee(x): x is a commune People's Committee.\nLocal(x): x is a locality.\nHeadOffice(x): x is the head office of a nurturing center.\nRegister(x): x registers the adoption.\n\nPredicates:\nAdopt(x) | NurturingCenter(x) | CommunePeopleCommittee(x) | Local(x) | HeadOffice(x) | Register(x) | Abandoned(x) | Transfer(x) | Record(x) | Status(x) | Person(x) | Reside(x) | Locality(x).\n\nPremises:\nall x (Abandoned(x) & ~Transfer(x) & Adopt(x) -> Record(x)).\nall x (Adopt(x) -> Register(x)).\nall x (NurturingCenter(x) -> HeadOffice(x) & Local(x)).\nall x (CommunePeopleCommittee(x) -> Local(x)).\nall x (Person(x) & Reside(x) -> Locality(x)).\n\nConclusion:\nall x (Register(x) -> CommunePeopleCommittee(x) & Person(x) & Reside(x)).",
        "premises": [
            "all x (Abandoned(x) & ~Transfer(x) & Adopt(x) -> Record(x)).",
            "all x (Adopt(x) -> Register(x)).",
            "all x (NurturingCenter(x) -> HeadOffice(x) & Local(x)).",
            "all x (CommunePeopleCommittee(x) -> Local(x)).",
            "all x (Person(x) & Reside(x) -> Locality(x))."
        ],
        "conclusion": "all x (Register(x) -> CommunePeopleCommittee(x) & Person(x) & Reside(x)).",
        "id": "b9a9ff0f-6478-4a9f-a23c-5c85538cc0a2"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. At clause 1 Article 14 of Law on Adoption stipulating on conditions for adopting persons as follows: a) Having full capacity of civil act, b) Being older than adopted children from 20 years old or more, C) Having conditions on health, economy, accommodation to ensure care, nurturing, education of adopted children, d) Having good moral status.\n2. Clause 3 Article 8 of Law on Adoption regulates on conditions for adoption: \"In case stepfather adopts stepchild of wife, stepmother adopts separate child of husband or natural aunt, uncle, uncle adopts nephew, niece, not applying provisions in point b and point c clause 1 this Article\".\n3. Clause 3 Article 18 of Law On Adoption regulating on adoptees: \"A person is adopted only by one single person or both married persons\".\n\nGoals:\nIs it possible to adopt a grandson who is 15 years older than his natural grandchild?\n\nPredicates:\nAdopt(x) | Capacity(x) | OlderThan(x) | Health(x) | Economy(x) | Accommodation(x) | MoralStatus(x) | Stepfather(x) | Stepchild(x) | Wife(x) | Husband(x) | Aunt(x) | Uncle(x) | Nephew(x) | Niece(x) | Single(x) | Married(x) | Grandson(x) | Grandchild(x).\n\nExplanation:\nAdopt(x): x is adopted.\nCapacity(x): x has full capacity of civil act.\nOlderThan(x): x is older than y.\nHealth(x): x has good health.\nEconomy(x): x has good economy.\nAccommodation(x): x has good accommodation.\nMoralStatus(x): x has good moral status.\nStepfather(x): x is a stepfather.\nStepchild(x): x is a stepchild.\nWife(x): x is a wife.\nHusband(x): x is a husband.\nAunt(x): x is an aunt.\nUncle(x): x is an uncle.\nNephew(x): x is a nephew.\nNiece(x): x is a niece.\nSingle(x): x is single.\nMarried(x): x is married.\nGrandson(x): x is a grandson.\nGrandchild(x): x is a grandchild.\n\nPremises:\nall x (Capacity(x) & OlderThan(x, 20) & Health(x) & Economy(x) & Accommodation(x) & MoralStatus(x) -> Adopt(x)).\nall x (Stepfather(x) & Stepchild(x) & Wife(x) -> Adopt(x)).\nall x (Stepmother(x) & Stepchild(x) & Husband(x) -> Adopt(x)).\nall x (Aunt(x) & Uncle(x) & Nephew(x) & Niece(x) -> Adopt(x)).\nall x (Single(x) | Married(x) -> Adopt(x)).\nOlderThan(15).\nGrandson(x) & Grandchild(x).\n\nConclusion:\nall x (Adopt(Grandson(x), Grandchild(x)) -> OlderThan(15)).",
        "premises": [
            "all x (Capacity(x) & OlderThan(x, 20) & Health(x) & Economy(x) & Accommodation(x) & MoralStatus(x) -> Adopt(x)).",
            "all x (Stepfather(x) & Stepchild(x) & Wife(x) -> Adopt(x)).",
            "all x (Stepmother(x) & Stepchild(x) & Husband(x) -> Adopt(x)).",
            "all x (Aunt(x) & Uncle(x) & Nephew(x) & Niece(x) -> Adopt(x)).",
            "all x (Single(x) | Married(x) -> Adopt(x)).",
            "OlderThan(15).",
            "Grandson(x) & Grandchild(x)."
        ],
        "conclusion": "all x (Adopt(Grandson(x), Grandchild(x)) -> OlderThan(15)).",
        "id": "ee8bb1b3-5bb6-47d9-84e8-d7421ffc78dc"
    },
    {
        "raw": "Rules:\n1. Adopters must fully meet the following conditions: have full civil act capacity, be 20 years or older than the adopted child, have health, economic and accommodation conditions to ensure the care for, nurture and education of the adopted children, and have good moral qualities.\n2. The following persons must not adopt children: those are restricted in some rights of fathers and/or mothers toward their minor children, those serving administrative handling decisions at education or medical establishments, those serving imprisonment penalties, and those have no criminal record remission for one of the crimes of intentionally infringing upon the lives, health, dignity or honor of other persons, ill-treating or persecuting their grandparents, parents, spouses, children, grandchildren or fosterers, enticing, forcing or harboring juvenile offenders, trafficking in, fraudulently.\n3. In case a stepfather adopts a stepchild of his/her wife or a stepmother adopts his/hers stepchild or a natural aunt or uncle adopts the niece or nephew, the provisions of Points b and c, Clause 1 of this Article shall not apply.\nGoals:\nSingle people can adopt children.\n\nPredicates:\nAdopt(x) | Capacity(x) | Age(x) | Health(x) | Economic(x) | Accommodation(x) | Moral(x) | Restrict(x) | Serve(x) | Imprison(x) | Criminal(x) | Intentional(x) | Illtreat(x) | Persecute(x) | Entice(x) | Force(x) | Harbor(x) | Traffic(x) | Fraud(x) | Single(x) | Child(x) | Stepfather(x) | Stepchild(x) | Aunt(x) | Uncle(x) | Niece(x) | Nephew(x) | Foster(x).\n\nExplanation:\nAdopt(x): x adopts a child.\nCapacity(x): x has full civil act capacity.\nAge(x): x is 20 years or older than the adopted child.\nHealth(x): x has health conditions to ensure the care for, nurture and education of the adopted children.\nEconomic(x): x has economic conditions to ensure the care for, nurture and education of the adopted children.\nAccommodation(x): x has accommodation conditions to ensure the care for, nurture and education of the adopted children.\nMoral(x): x has good moral qualities.\nRestrict(x): x is restricted in some rights of fathers and/or mothers toward their minor children.\nServe(x): x serves administrative handling decisions at education or medical establishments.\nImprison(x): x serves imprisonment penalties.\nCriminal(x): x has no criminal record remission for one of the crimes of intentionally infringing upon the lives, health, dignity or honor of other persons, ill-treating or persecuting their grandparents, parents, spouses, children, grandchildren or fosterers, enticing, forcing or harboring juvenile offenders, trafficking in, fraudulently.\nIntentional(x): x intentionally infringes upon the lives, health, dignity or honor of other persons, ill-treats or persecutes their grandparents, parents, spouses, children, grandchildren or fosterers, entices, forces or harbors juvenile offenders, traffics in, fraudulently.\nIlltreat(x): x ill-treats or persecutes their grandparents, parents, spouses, children, grandchildren or fosterers.\nPersecute(x): x persecutes their grandparents, parents, spouses, children, grandchildren or fosterers.\nEntice(x): x entices juvenile offenders.\nForce(x): x forces juvenile offenders.\nHarbor(x): x harbors juvenile offenders.\nTraffic(x): x traffics in.\nFraud(x): x fraudulently.\nSingle(x): x is single.\nChild(x): x is a child.\nStepfather(x): x is a stepfather.\nStepchild(x): x is a stepchild.\nAunt(x): x is an aunt.\nUncle(x): x is an uncle.\nNiece(x): x is a niece.\nNephew(x): x is a nephew.\nFoster(x): x is a fosterer.\n\nPremises:\nall x (Adopt(x) -> (Capacity(x) & Age(x) & Health(x) & Economic(x) & Accommodation(x) & Moral(x))).\nall x (~Restrict(x) | ~Serve(x) | ~Imprison(x) | ~Criminal(x)).\nall x (~Intentional(x) | ~Illtreat(x) | ~Persecute(x) | ~Entice(x) | ~Force(x) | ~Harbor(x) | ~Traffic(x) | ~Fraud(x)).\nall x (Single(x) -> ~Stepfather(x) & ~Aunt(x) & ~Uncle(x) & ~Foster(x)).\nall x (Stepfather(x) -> ~Single(x)).\nall x (Stepchild(x) -> ~Single(x)).\nall x (Aunt(x) -> ~Single(x)).\nall x (Uncle(x) -> ~Single(x)).\nall x (Niece(x) -> ~Single(x)).\nall x (Nephew(x) -> ~Single(x)).\n\nConclusion:\nall x (Single(x) -> Adopt(x)).",
        "premises": [
            "all x (Adopt(x) -> (Capacity(x) & Age(x) & Health(x) & Economic(x) & Accommodation(x) & Moral(x))).",
            "all x (~Restrict(x) | ~Serve(x) | ~Imprison(x) | ~Criminal(x)).",
            "all x (~Intentional(x) | ~Illtreat(x) | ~Persecute(x) | ~Entice(x) | ~Force(x) | ~Harbor(x) | ~Traffic(x) | ~Fraud(x)).",
            "all x (Single(x) -> ~Stepfather(x) & ~Aunt(x) & ~Uncle(x) & ~Foster(x)).",
            "all x (Stepfather(x) -> ~Single(x)).",
            "all x (Stepchild(x) -> ~Single(x)).",
            "all x (Aunt(x) -> ~Single(x)).",
            "all x (Uncle(x) -> ~Single(x)).",
            "all x (Niece(x) -> ~Single(x)).",
            "all x (Nephew(x) -> ~Single(x))."
        ],
        "conclusion": "all x (Single(x) -> Adopt(x)).",
        "id": "4f6a9b65-564d-45fb-a258-719994b43e47"
    },
    {
        "raw": "Rules:\n1. A person can only give a child to a younger sibling for adoption if the child has a biological mother.\n2. The younger sibling must change his/her last name after adopting the child.\n3. The birth certificate of the adopted child does not mention the biological mother.\n4. The birth certificate of the adopted child only mentions the adoptive mother.\n\nGoals:\nIt is possible to adopt a child and then have another child.\n\nPredicates:\nBiologicalMother(x) | Adopt(x) | YoungerSibling(x) | ChangeName(x) | BirthCertificate(x) | AdoptiveMother(x) | BiologicalFather(x) | Child(x) | Person(x) | Possible(x) | Adoptable(x) | Mother(x) | Father(x).\n\nExplanation:\nBiologicalMother(x): x is the biological mother of a child.\nAdopt(x): x adopts a child.\nYoungerSibling(x): x is a younger sibling of a person.\nChangeName(x): x changes his/her last name.\nBirthCertificate(x): x is a birth certificate of a child.\nAdoptiveMother(x): x is the adoptive mother of a child.\nBiologicalFather(x): x is the biological father of a child.\nChild(x): x is a child.\nPerson(x): x is a person.\nPossible(x): x is possible.\nAdoptable(x): x is adoptable.\nMother(x): x is a mother.\nFather(x): x is a father.\n\nPremises:\nall x (Adopt(x) -> (BiologicalMother(x) & YoungerSibling(x))).\nall x (ChangeName(x) -> ~BiologicalFather(x)).\nall x (BirthCertificate(x) -> ~BiologicalMother(x)).\nall x (BirthCertificate(x) -> AdoptiveMother(x)).\nall x (Adoptable(x) -> Possible(x)).\n\nConclusion:\nall x (Adopt(x) -> Possible(x)).",
        "premises": [
            "all x (Adopt(x) -> (BiologicalMother(x) & YoungerSibling(x))).",
            "all x (ChangeName(x) -> ~BiologicalFather(x)).",
            "all x (BirthCertificate(x) -> ~BiologicalMother(x)).",
            "all x (BirthCertificate(x) -> AdoptiveMother(x)).",
            "all x (Adoptable(x) -> Possible(x))."
        ],
        "conclusion": "all x (Adopt(x) -> Possible(x)).",
        "id": "cb5661bd-324e-4172-9aff-613a3842d0a0"
    },
    {
        "raw": "Rules:\n1. Pursuant to Article 31 of the Law on Adoption 2010, the couple should prepare the following papers: Application for adoption, Copy of passport or substitute paper, Investigation on psychology and family, Judicial record, Written certification of health status, written certification of income and property, The written permission for adoption in Vietnam.\n2. The dossier must be consularly legalized by the Vietnamese Embassy in the UK, translated into Vietnamese and certified by the Vietnam Embassy in Britain or Vietnamese district Justice Offices.\n3. The family in Vietnam should also prepare the following documents: Birth certificate, Health certificate issued by a district-or higher-level health agency, Two full-length, straight-faced photos taken within 6 months, Papers and documents proving that the child's sister is the child's, real aunt.\n4. Currently, Vietnam is in the process of elaborating a Decree detailing the implementation of a number of articles of the Adoption Law, including the fee levels.\n5. According to provisions in point b clause 2 Article 28 of Law on Adoption 2010, which takes effect on January 01,2011, her case shall be considered, settled.\n\nGoals:\nIs it okay to adopt a niece or nephew over 14 years old?\n\nExplanation:\nAdopt(x): x is adopted.\nNieceOrNephew(x): x is a niece or nephew.\nOver14YearsOld(x): x is over 14 years old.\nPermission(x): x has permission.\nLegal(x): x is legal.\nVietnam(x): x is in the territory of Vietnam.\n\nPremises:\nall x (Adopt(x) -> (Application(x) & Passport(x) & Investigation(x) & JudicialRecord(x) & HealthStatus(x) & IncomeProperty(x) & Permission(x))).\nall x (Permission(x) -> Vietnam(x)).\nall x (Vietnam(x) -> (BirthCertificate(x) & HealthCertificate(x) & Photos(x) & AuntProof(x))).\n-Over14YearsOld(x) | Adopt(x).\nall x (Adopt(x) -> Legal(x)).\n\nConclusion:\n-not Adopt(x) | Over14YearsOld(x).",
        "premises": [
            "all x (Adopt(x) -> (Application(x) & Passport(x) & Investigation(x) & JudicialRecord(x) & HealthStatus(x) & IncomeProperty(x) & Permission(x))).",
            "all x (Permission(x) -> Vietnam(x)).",
            "all x (Vietnam(x) -> (BirthCertificate(x) & HealthCertificate(x) & Photos(x) & AuntProof(x))).",
            "-Over14YearsOld(x) | Adopt(x).",
            "all x (Adopt(x) -> Legal(x))."
        ],
        "conclusion": "-not Adopt(x) | Over14YearsOld(x).",
        "id": "543e7524-21e8-4d98-a4a5-e881fac0d570"
    },
    {
        "raw": "Rules:\n1.To reject requests for change of natural parents' declaration to adoptive parents' in birth certificates and birth registers of adopted children under Clause 2, Article 28 of Decree No. 158/2005/ND-CP in the following cases: - Change of the declaration of one parent to the declaration about an adoptive parent or adoptive mother, while keeping the declaration on the other parent.\nGoals:\nIs it possible to change the name of the natural mother with the name adopted mother in birth after adoption?\n###\nPredicates:\nChange(x) | Parent(x) | AdoptiveParent(x) | AdoptiveMother(x) | NaturalMother(x) | BirthCertificate(x) | BirthRegister(x) | AdoptedChild(x) | Declaration(x) | Article(x) | Decree(x) | Clause(x).\n\nExplanation:\nChange(x): x changes something.\nParent(x): x is a parent.\nAdoptiveParent(x): x is an adoptive parent.\nAdoptiveMother(x): x is an adoptive mother.\nNaturalMother(x): x is a natural mother.\nBirthCertificate(x): x is a birth certificate.\nBirthRegister(x): x is a birth register.\nAdoptedChild(x): x is an adopted child.\nDeclaration(x): x is a declaration.\nArticle(x): x is an article.\nDecree(x): x is a decree.\nClause(x): x is a clause.\n\nPremises:\nall x (Change(x) -> (Parent(x) | AdoptiveParent(x) | AdoptiveMother(x) | NaturalMother(x))).\nall x (Parent(x) -> (Declaration(x) & BirthCertificate(x) & BirthRegister(x))).\nall x (AdoptedChild(x) -> (Parent(x) & AdoptiveParent(x) & AdoptiveMother(x) & NaturalMother(x))).\nall x (Article(x) -> Decree(x)).\nall x (Clause(x) -> Article(x)).\n-Change(x) | AdoptiveMother(x).\nall x (NaturalMother(x) -> AdoptiveMother(x)).\n\nConclusion:\n-Change(x) | AdoptiveMother(x).",
        "premises": [
            "all x (Change(x) -> (Parent(x) | AdoptiveParent(x) | AdoptiveMother(x) | NaturalMother(x))).",
            "all x (Parent(x) -> (Declaration(x) & BirthCertificate(x) & BirthRegister(x))).",
            "all x (AdoptedChild(x) -> (Parent(x) & AdoptiveParent(x) & AdoptiveMother(x) & NaturalMother(x))).",
            "all x (Article(x) -> Decree(x)).",
            "all x (Clause(x) -> Article(x)).",
            "-Change(x) | AdoptiveMother(x).",
            "all x (NaturalMother(x) -> AdoptiveMother(x))."
        ],
        "conclusion": "-Change(x) | AdoptiveMother(x).",
        "id": "9eaf2ce2-1667-415b-992c-6ee52b86cb7c"
    },
    {
        "raw": "Rules:\n1. According to clause 2 Article 8 of Law on Adoption, persons from full 16 to under 18 years old if belonging to one of following cases are adopted: a) Being adopted by stepfather, stepmother, b) Being accepted as adopted by natural aunt, uncle.\nGoals:\nIs it okay if you adopt your wife's 18-year-old stepchild?\n\nPredicates:\nPerson(x) | Adopted(x) | Full16(x) | Under18(x) | Stepfather(x) | Stepmother(x) | NaturalAunt(x) | NaturalUncle(x) | Okay(x)\n\nExplanation:\nPerson(x): x is a person.\nAdopted(x): x is adopted.\nFull16(x): x is full 16 years old.\nUnder18(x): x is under 18 years old.\nStepfather(x): x is a stepfather.\nStepmother(x): x is a stepmother.\nNaturalAunt(x): x is a natural aunt.\nNaturalUncle(x): x is a natural uncle.\nOkay(x): x is okay.\n\nPremises:\nall x (Full16(x) & Under18(x) -> (Adopted(x) & (Stepfather(x) | Stepmother(x) | NaturalAunt(x) | NaturalUncle(x)))).\n-18.\nall x (Adopted(x) -> Okay(x)).\n\nConclusion:\n-Okay(yourWife'sStepchild).",
        "premises": [
            "all x (Full16(x) & Under18(x) -> (Adopted(x) & (Stepfather(x) | Stepmother(x) | NaturalAunt(x) | NaturalUncle(x)))).",
            "-18.",
            "all x (Adopted(x) -> Okay(x))."
        ],
        "conclusion": "-Okay(yourWife'sStepchild).",
        "id": "10c5df0a-71f0-4437-a3cc-a06f2cc48d75"
    },
    {
        "raw": "Rules:\n1. The following persons shall still be entitled to an estate equal to two-thirds of the share of an at-law heir, if the estate is distributed at law, if they are not entitled to the estate or are entitled to less than two-thirds of that share, unless they are the persons who refuse to receive the estate as provided for in Article 642 or they are persons who are not allowed to inherit the estate under Clause 1, Article 63 of this Code: 2. The minor children, their parents, spouse, Grown-up children have no working capacity.\nGoals:\nIs the disabled person inheritable estate?\n\nPredicates:\nDisable(x) | Inherit(x) | Estate(x) | AtLawHeir(x) | TwoThirds(x) | Share(x) | Refuse(x) | Allow(x) | Minor(x) | Parent(x) | Spouse(x) | GrownUp(x) | WorkingCapacity(x) | Article642(x) | Article63(x) | Clause1(x) | Code(x) | Vietnam(x).\n\nExplanation:\nDisable(x): x is a disabled person.\nInherit(x): x inherits estate.\nEstate(x): x is an estate.\nAtLawHeir(x): x is an at-law heir.\nTwoThirds(x): x is two-thirds.\nShare(x): x is a share.\nRefuse(x): x refuses to receive the estate.\nAllow(x): x is allowed to inherit the estate.\nMinor(x): x is a minor.\nParent(x): x is a parent.\nSpouse(x): x is a spouse.\nGrownUp(x): x is a grown-up.\nWorkingCapacity(x): x has working capacity.\nArticle642(x): x is under Article 642.\nArticle63(x): x is under Article 63.\nClause1(x): x is under Clause 1.\nCode(x): x is under this Code.\nVietnam(x): x is in Vietnam.\n\nPremises:\nall x (Disable(x) -> (Inherit(x) & Estate(x))).\nall x (AtLawHeir(x) -> (TwoThirds(x) & Share(x))).\nRefuse(x) | Allow(x).\nall x (Minor(x) | Parent(x) | Spouse(x) | GrownUp(x) -> WorkingCapacity(x)).\n-Refuse(x) | Article642(x).\nall x (Article63(x) -> Clause1(x)).\nall x (Code(x) -> Vietnam(x)).\n\nConclusion:\nall x (Disable(x) -> Inherit(x)).",
        "premises": [
            "all x (Disable(x) -> (Inherit(x) & Estate(x))).",
            "all x (AtLawHeir(x) -> (TwoThirds(x) & Share(x))).",
            "Refuse(x) | Allow(x).",
            "all x (Minor(x) | Parent(x) | Spouse(x) | GrownUp(x) -> WorkingCapacity(x)).",
            "-Refuse(x) | Article642(x).",
            "all x (Article63(x) -> Clause1(x)).",
            "all x (Code(x) -> Vietnam(x))."
        ],
        "conclusion": "all x (Disable(x) -> Inherit(x)).",
        "id": "6587158f-701a-498b-a12e-a85c329b157f"
    },
    {
        "raw": "Rules:\n1. The Marriage and Family Law provides that after divorce, alimony is the obligation of parents who do not directly raise children, regardless of whether the person directly raising the children is economically capable or not.\n2. According to Clause 11 of Resolution No. 02/2000/NQ-HDTP of December 23,2010 of the Judges' Council of the Supreme People's Court, in cases where the persons directly raising children do not request the persons not directly raising the children to provide support for some reason, the courts should explain to them that the request for support for child raising is the interests of the children.\n3. If the court considers that the refusal to request financial support is voluntary and that the party concerned has the necessary capacity and conditions to rear the child, it shall not force the other party to provide financial support for the child.\n4. The 2014 Law on Marriage and Family defines the obligation to provide financial support as provided in Clause 2 Article 107 and Article 119.\n\nGoals:\nIs there a refusal of alimony and for you to refuse father after divorce?\n\nExplanation:\nAlimony(x): x is alimony.\nDirectlyRaise(x): x directly raises children.\nNotDirectlyRaise(x): x does not directly raise children.\nEconomicallyCapable(x): x is economically capable.\nVoluntary(x): x's refusal is voluntary.\nCapacity(x): x has the necessary capacity.\nConditions(x): x has the necessary conditions.\nLaw(x): x is a law.\n\nPredicates:\nAlimony(x) | DirectlyRaise(x) | NotDirectlyRaise(x) | EconomicallyCapable(x) | Voluntary(x) | Capacity(x) | Conditions(x) | Law(x)\n\nPremises:\nall x (NotDirectlyRaise(x) -> Alimony(x)).\nall x (DirectlyRaise(x) -> (EconomicallyCapable(x) | Not Alimony(x))).\nall x (Voluntary(x) -> (Capacity(x) & Conditions(x))).\nall x (Law(x) -> (Alimony(x) | Not Alimony(x))).\n-Refuse(x) | Father(x) | Alimony(x).\n\nConclusion:\nall x (Refuse(x) & Father(x) & Alimony(x) -> Not Alimony(x)).",
        "premises": [
            "all x (NotDirectlyRaise(x) -> Alimony(x)).",
            "all x (DirectlyRaise(x) -> (EconomicallyCapable(x) | Not Alimony(x))).",
            "all x (Voluntary(x) -> (Capacity(x) & Conditions(x))).",
            "all x (Law(x) -> (Alimony(x) | Not Alimony(x))).",
            "-Refuse(x) | Father(x) | Alimony(x)."
        ],
        "conclusion": "all x (Refuse(x) & Father(x) & Alimony(x) -> Not Alimony(x)).",
        "id": "1f9671c4-7c46-4797-8aed-c28d7a882e57"
    },
    {
        "raw": "Rules:\n1. Decree No. 163/2006/ND-CP on secured transactions stipulates that security assets are existing assets or future assets which are not banned from transaction by law.\n2. Assets formed from loans, assets in the formulation stage or being lawfully created at the time of entering into security transactions, assets which have been formed and subject to ownership registration, but are registered under law after the time the security transactions are entered into.\n3. Clause 2 Article 147 of the Law on Housing 2014 stipulates that organizations and individuals building off-plan residences on their legitimate lands, or buying off-purpose residences in the investor's housing construction projects, may mortgage such residences at credit institutions operating in Vietnam to take loans for the construction of residences or to buy the residences themselves.\nGoals:\nIs it good to register for the security transaction registration of future-acquired houses?\n###\n\nPredicates:\nSecurityTransaction(x) | ExistingAssets(x) | FutureAssets(x) | BannedFromTransaction(x) | FormedFromLoans(x) | FormulationStage(x) | LawfullyCreated(x) | OwnershipRegistered(x) | RegisteredUnderLaw(x) | Mortgage(x) | CreditInstitution(x) | Vietnam(x) | OffPlanResidence(x) | LegitimateLand(x) | Investor(x) | HousingConstructionProject(x) | LawOnHousing(x).\n\nExplanation:\nSecurityTransaction(x): x is a security transaction.\nExistingAssets(x): x is an existing asset.\nFutureAssets(x): x is a future asset.\nBannedFromTransaction(x): x is banned from transaction.\nFormedFromLoans(x): x is formed from loans.\nFormulationStage(x): x is in the formulation stage.\nLawfullyCreated(x): x is lawfully created.\nOwnershipRegistered(x): x is subject to ownership registration.\nRegisteredUnderLaw(x): x is registered under law.\nMortgage(x): x mortgages.\nCreditInstitution(x): x is a credit institution.\nVietnam(x): x is in Vietnam.\nOffPlanResidence(x): x is an off-plan residence.\nLegitimateLand(x): x is legitimate land.\nInvestor(x): x is an investor.\nHousingConstructionProject(x): x is a housing construction project.\nLawOnHousing(x): x is the Law on Housing.\n\nPremises:\nall x (SecurityTransaction(x) -> (ExistingAssets(x) | FutureAssets(x) & ~BannedFromTransaction(x))).\nall x (FormedFromLoans(x) -> (FormulationStage(x) | LawfullyCreated(x))).\nall x (OwnershipRegistered(x) -> RegisteredUnderLaw(x)).\nall x (Mortgage(x) -> (CreditInstitution(x) & Vietnam(x))).\nall x (OffPlanResidence(x) -> (LegitimateLand(x) & Investor(x) & HousingConstructionProject(x))).\n-RegisteredUnderLaw(x) | LawOnHousing(x).\n\nConclusion:\nall x (SecurityTransaction(x) -> ~BannedFromTransaction(x)).",
        "premises": [
            "all x (SecurityTransaction(x) -> (ExistingAssets(x) | FutureAssets(x) & ~BannedFromTransaction(x))).",
            "all x (FormedFromLoans(x) -> (FormulationStage(x) | LawfullyCreated(x))).",
            "all x (OwnershipRegistered(x) -> RegisteredUnderLaw(x)).",
            "all x (Mortgage(x) -> (CreditInstitution(x) & Vietnam(x))).",
            "all x (OffPlanResidence(x) -> (LegitimateLand(x) & Investor(x) & HousingConstructionProject(x))).",
            "-RegisteredUnderLaw(x) | LawOnHousing(x)."
        ],
        "conclusion": "all x (SecurityTransaction(x) -> ~BannedFromTransaction(x)).",
        "id": "3eddeeea-1eeb-4c6e-a788-a6518161f087"
    },
    {
        "raw": "Here is the result in the requested format:\n\nRules:\n1. In case the place of permanent or temporary residence of the mother cannot be determined, the child may be registered for birth at the commune-level People's Committee of the locality where the father has permanent or definite temporary residence.\n2. The People's Committee of the commune, ward or township (below referred to as commune-level People'S Committee) in which the mother resides shall register the birth for the child, if the mother's place of residence cannot be identified, the communes-left commune People' s Committee in which father resides shall carry out birth registration.\n3. Birth registration for an abandoned child shall be carried out at the commune-level People's Committee of the locality where the person temporarily raising the child resides or the organization temporarily raising such child is headquartered.\n4. In case the places of residence of the mother and father cannot be identified, the commune-level People's Committee of the locality where the child is living in reality shall register the birth.\n\nGoals:\nCan you register the birth for your child in the temporary residence?\n\nExplanation:\nRegister(x): x registers the birth.\nPermanentResidence(x): x has permanent residence.\nTemporaryResidence(x): x has temporary residence.\nCommuneLevelCommittee(x): x is the commune-level People's Committee.\nLocality(x): x is a locality.\nFather(x): x is the father.\nMother(x): x is the mother.\nChild(x): x is the child.\nAbandoned(x): x is an abandoned child.\n\nPremises:\nall x (PermanentResidence(x) -> Register(x)).\nall x (TemporaryResidence(x) -> Register(x)).\nall x (CommuneLevelCommittee(x) -> Locality(x)).\nall x (Father(x) -> PermanentResidence(x)).\nall x (Mother(x) -> PermanentResidence(x)).\nall x (Child(x) -> (Father(x) | Mother(x))).\n-Register(x) | Father(x).\nall x (Locality(x) -> CommuneLevelCommittee(x)).\nall x (Abandoned(x) -> (TemporaryResidence(x) | PermanentResidence(x))).\n\nConclusion:\nall x (Register(x) & TemporaryResidence(x) -> Register(x)).",
        "premises": [
            "all x (PermanentResidence(x) -> Register(x)).",
            "all x (TemporaryResidence(x) -> Register(x)).",
            "all x (CommuneLevelCommittee(x) -> Locality(x)).",
            "all x (Father(x) -> PermanentResidence(x)).",
            "all x (Mother(x) -> PermanentResidence(x)).",
            "all x (Child(x) -> (Father(x) | Mother(x))).",
            "-Register(x) | Father(x).",
            "all x (Locality(x) -> CommuneLevelCommittee(x)).",
            "all x (Abandoned(x) -> (TemporaryResidence(x) | PermanentResidence(x)))."
        ],
        "conclusion": "all x (Register(x) & TemporaryResidence(x) -> Register(x)).",
        "id": "c87121d0-5e7a-45c4-b930-a8b76d23062a"
    },
    {
        "raw": "Rules:\n1. The birth registration applicant shall submit the birth certification paper issued by the medical establishment where the child is born.\n2. If a child is born outside a medical establishment, the Notice of birth shall be replaced with: \n   - Written certification of witness (the witness must have full civil act capacity and know clearly the testimonies, the witness must take responsibility before law for the truthfulness of the testified facts).\n   - In case there is no witness, the birth registrant shall make a written commitment that the birth is real.\n3. Birth registration shall be carried out at the commune-level People's Committee of the place of residence of the mother.\n4. If the place where the mother resides cannot be determined, the communes-left-side People's Committee of his/her father shall carry out birth registration.\n5. In case the place of residence of the mother or father cannot be identified, the commune-level People's Committee of the locality where the child is living shall register the birth.\n6. The birth registration for an abandoned child shall be carried out at the commune-level People's Committee of the locality where the person temporarily raising the child resides or the organization temporarily raising such child is headquartered.\nGoals:\nIs birth certificate required before birth registration?\n\nPredicates:\nBirthCertificate(x) | MedicalEstablishment(x) | Witness(x) | WrittenCommitment(x) | PlaceOfResidence(x) | Father(x) | Mother(x) | Child(x) | CommuneLevelCommittee(x) | Locality(x) | AbandonedChild(x) | Organization(x) | Person(x).\n\nExplanation:\nBirthCertificate(x): x is a birth certificate.\nMedicalEstablishment(x): x is a medical establishment.\nWitness(x): x is a witness.\nWrittenCommitment(x): x is a written commitment.\nPlaceOfResidence(x): x is the place of residence.\nFather(x): x is the father.\nMother(x): x is the mother.\nChild(x): x is a child.\nCommuneLevelCommittee(x): x is a commune-level committee.\nLocality(x): x is a locality.\nAbandonedChild(x): x is an abandoned child.\nOrganization(x): x is an organization.\nPerson(x): x is a person.\n\nPremises:\nall x (BirthCertificate(x) -> MedicalEstablishment(x)).\nall x (Witness(x) -> (FullCivilActCapacity(x) & KnowClearly(x) & ResponsibilityBeforeLaw(x))).\nall x (WrittenCommitment(x) -> (NoWitness(x) & RealBirth(x))).\nall x (PlaceOfResidence(x) -> (Mother(x) | Father(x))).\nall x (CommuneLevelCommittee(x) -> (Locality(x) | AbandonedChild(x))).\nall x (Locality(x) -> (CommuneLevelCommittee(x) | Person(x))).\n-PlaceOfResidence(x) | Father(x).\n\nConclusion:\nall x (BirthCertificate(x) -> BeforeBirthRegistration(x)).\nNote: The conclusion is not directly stated in the rules, but it can be inferred that a birth certificate is required before birth registration based on the premises.",
        "premises": [
            "all x (BirthCertificate(x) -> MedicalEstablishment(x)).",
            "all x (Witness(x) -> (FullCivilActCapacity(x) & KnowClearly(x) & ResponsibilityBeforeLaw(x))).",
            "all x (WrittenCommitment(x) -> (NoWitness(x) & RealBirth(x))).",
            "all x (PlaceOfResidence(x) -> (Mother(x) | Father(x))).",
            "all x (CommuneLevelCommittee(x) -> (Locality(x) | AbandonedChild(x))).",
            "all x (Locality(x) -> (CommuneLevelCommittee(x) | Person(x))).",
            "-PlaceOfResidence(x) | Father(x)."
        ],
        "conclusion": "Note: The conclusion is not directly stated in the rules, but it can be inferred that a birth certificate is required before birth registration based on the premises.",
        "id": "c406e75f-bf5e-4bea-a4bd-35f4ecad4f30"
    },
    {
        "raw": "Rules:\n1. Depending on the extent of your friend's relationship with the woman, your friend may be held accountable for his or her behavior.\n2. If your friend's behavior is not serious enough to cause criminal prosecution, your friend will face administrative penalties as prescribed in Clause 1 Article 48 of Decree No. 110/2013/ND-CP.\n3. Your friend is a contract employee in the government, so he is not a civil servant.\n\nGoals:\nIs the State official who is adulterous to get fired?\n\nExplanation:\nAdulterous(x): x is adulterous.\nContractEmployee(x): x is a contract employee.\nGovernment(x): x is in the government.\nCivilServant(x): x is a civil servant.\nAdulterous(x): x is an adulterous State official.\n\nPredicates:\nAdulterous(x) | ContractEmployee(x) | Government(x) | CivilServant(x) | Fired(x) | HeldAccountable(x) | Serious(x) | CriminalProsecution(x) | AdministrativePenalties(x) | Clause1Article48(x) | Decree1102013ND(x) | StateOfficial(x).\n\nPremises:\nall x (Adulterous(x) -> HeldAccountable(x)).\nall x (Not(Serious(x) & CriminalProsecution(x)) -> AdministrativePenalties(x)).\nall x (ContractEmployee(x) -> Not(CivilServant(x))).\nall x (StateOfficial(x) -> Government(x)).\n-Adulterous(x) | Fired(x).\n\nConclusion:\nall x (Adulterous(StateOfficial(x)) -> Fired(x)).",
        "premises": [
            "all x (Adulterous(x) -> HeldAccountable(x)).",
            "all x (Not(Serious(x) & CriminalProsecution(x)) -> AdministrativePenalties(x)).",
            "all x (ContractEmployee(x) -> Not(CivilServant(x))).",
            "all x (StateOfficial(x) -> Government(x)).",
            "-Adulterous(x) | Fired(x)."
        ],
        "conclusion": "all x (Adulterous(StateOfficial(x)) -> Fired(x)).",
        "id": "7a0ce6b7-0f8b-4e91-9290-489dd50f4e6d"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Mortgage contracts or loan credit contracts must bear signatures of all asset users.\n2. Property mortgage contracts shall be performed through strict notarization procedures.\n3. The notary public shall check the papers proving the ownership, people's identity card, household registration and civil act capacity of the mortgagor before signing the mortgage contract.\n4. If your wife has notarized her ID on land use rights to sign a mortgage contract, the notary will check her marital status.\n5. If there is certification of your wife's single status, it shall be signed by your wife alone.\n6. He believes that his wife's mental health problems require a medical record.\n7. If you (or both your wife) do not sign the mortgage and credit contract but someone forges your (or your wife's ) signature to mortgage and borrow money, you have the right to file a lawsuit in court requesting the court to declare the mortgage or credit contract invalid.\n\nGoals:\nIs it legal to bring a charge of forgery of the signature on the mortgage contract?\n\nExplanation:\nSignature(x): x signs a document.\nNotarize(x): x notarizes a document.\nCheck(x): x checks a document.\nMortgageContract(x): x is a mortgage contract.\nLoanCreditContract(x): x is a loan credit contract.\nAssetUser(x): x is an asset user.\nPropertyMortgageContract(x): x is a property mortgage contract.\nStrictNotarizationProcedure(x): x is a strict notarization procedure.\nNotaryPublic(x): x is a notary public.\nMortgagor(x): x is a mortgagor.\nPeopleIdentityCard(x): x is a people's identity card.\nHouseholdRegistration(x): x is a household registration.\nCivilActCapacity(x): x has civil act capacity.\nSingleStatus(x): x has single status.\nMedicalRecord(x): x has a medical record.\nForgery(x): x forges a signature.\nLawsuit(x): x files a lawsuit.\nCourt(x): x is a court.\n\nPredicates:\nSignature(x) | Notarize(x) | Check(x) | MortgageContract(x) | LoanCreditContract(x) | AssetUser(x) | PropertyMortgageContract(x) | StrictNotarizationProcedure(x) | NotaryPublic(x) | Mortgagor(x) | PeopleIdentityCard(x) | HouseholdRegistration(x) | CivilActCapacity(x) | SingleStatus(x) | MedicalRecord(x) | Forgery(x) | Lawsuit(x) | Court(x)\n\nPremises:\nall x (Signature(x) -> AssetUser(x)).\nall x (Notarize(x) -> Check(x)).\nall x (Check(x) -> MortgageContract(x) | LoanCreditContract(x)).\nall x (PropertyMortgageContract(x) -> StrictNotarizationProcedure(x)).\nall x (NotaryPublic(x) -> Check(x)).\nall x (Mortgagor(x) -> PeopleIdentityCard(x) | HouseholdRegistration(x) | CivilActCapacity(x)).\nall x (SingleStatus(x) -> MedicalRecord(x)).\nall x (Forgery(x) -> Signature(x)).\nall x (Lawsuit(x) -> Court(x)).\n\nConclusion:\nall x (Forgery(x) -> Lawsuit(x)).",
        "premises": [
            "all x (Signature(x) -> AssetUser(x)).",
            "all x (Notarize(x) -> Check(x)).",
            "all x (Check(x) -> MortgageContract(x) | LoanCreditContract(x)).",
            "all x (PropertyMortgageContract(x) -> StrictNotarizationProcedure(x)).",
            "all x (NotaryPublic(x) -> Check(x)).",
            "all x (Mortgagor(x) -> PeopleIdentityCard(x) | HouseholdRegistration(x) | CivilActCapacity(x)).",
            "all x (SingleStatus(x) -> MedicalRecord(x)).",
            "all x (Forgery(x) -> Signature(x)).",
            "all x (Lawsuit(x) -> Court(x))."
        ],
        "conclusion": "all x (Forgery(x) -> Lawsuit(x)).",
        "id": "00a73256-3ab7-4bd2-82cf-abf218c4589e"
    },
    {
        "raw": "Rules:\n1. Evidence shall be collected from the following sources: readable, audible or visible materials, exhibits, involved parties' testimonies, the testimonies of witnesses, expertise conclusion, the minutes on the on-site evaluation results, the Custom, property valuation and price appraisal results, and other sources prescribed by law.\n2. The testimony of witnesses is a source of evidence.\n\nGoals:\nThe testimony of witnesses is evidence.\n\nPredicates:\nEvident(x) | Readable(x) | Audible(x) | Visible(x) | Exhibit(x) | Testimony(x) | Expertise(x) | Minutes(x) | Custom(x) | Valuation(x) | PriceAppraisal(x) | Law(x) | Source(x) | Witness(x).\n\nExplanation:\nEvident(x): x is evidence.\nReadable(x): x is readable.\nAudible(x): x is audible.\nVisible(x): x is visible.\nExhibit(x): x is an exhibit.\nTestimony(x): x is a testimony.\nExpertise(x): x is expertise.\nMinutes(x): x is minutes.\nCustom(x): x is the Custom.\nValuation(x): x is valuation.\nPriceAppraisal(x): x is price appraisal.\nLaw(x): x is a law.\nSource(x): x is a source.\nWitness(x): x is a witness.\n\nPremises:\nall x (Evident(x) -> (Readable(x) | Audible(x) | Visible(x) | Exhibit(x) | Testimony(x) | Expertise(x) | Minutes(x) | Custom(x) | Valuation(x) | PriceAppraisal(x) | Law(x))).\nTestimony(x).\nall x (Testimony(x) -> Source(x) & Witness(x)).\n\nConclusion:\nall x (Testimony(x) -> Evident(x)).",
        "premises": [
            "all x (Evident(x) -> (Readable(x) | Audible(x) | Visible(x) | Exhibit(x) | Testimony(x) | Expertise(x) | Minutes(x) | Custom(x) | Valuation(x) | PriceAppraisal(x) | Law(x))).",
            "Testimony(x).",
            "all x (Testimony(x) -> Source(x) & Witness(x))."
        ],
        "conclusion": "all x (Testimony(x) -> Evident(x)).",
        "id": "fa817187-6280-4f98-b4be-dd107672fd42"
    },
    {
        "raw": "Rules:\n1. Any adult who has sexual intercourse with children aged between full 13 years and under 16 years shall be sentenced to between one and five years of imprisonment.\n2. Those who have become adults and have sexual intercourse between children aged full 12 years and children aged under 15 years shall all be sentenced thereto.\n3. Marriage must be registered and performed by a competent state agency under this Law and the civil status law.\n4. Marriage which is not registered under this Clause is invalid.\n5. Men and women who do not register their marriages but live together as husband and wife without marriage registration shall not be recognized by law as husband and wife.\n6. Divorced husband and wife wishing to remarry each other must also register their marriage.\n\nGoals:\nDo you live as a couple under the age of consent, and get convicted?\n\nExplanation:\nMarriage(x): x is a marriage.\nRegistered(x): x is registered.\nInvalid(x): x is invalid.\nRecognized(x): x is recognized.\nConvicted(x): x is convicted.\nAdult(x): x is an adult.\nChildren(x): x is a child.\nSexualIntercourse(x): x has sexual intercourse.\nSentence(x): x is sentenced.\nAge(x): x is a certain age.\n\nPredicates:\n\nPremises:\nall x (Adult(x) -> (Children(x) -> (Sentence(x) & (1 <= x <= 5)))).\nall x (Marriage(x) -> Registered(x)).\nall x (Registered(x) -> ~Invalid(x)).\nall x (Invalid(x) -> ~Recognized(x)).\nall x (Recognized(x) -> ~Convicted(x)).\nall x (Convicted(x) -> Adult(x)).\nall x (Children(x) -> (SexualIntercourse(x) -> (Sentence(x) & (1 <= x <= 5)))).\nall x (Age(x) -> (x >= 13 & x < 16)).\n\nConclusion:\nall x (Marriage(x) -> (Age(x) -> Convicted(x))).",
        "premises": [
            "all x (Adult(x) -> (Children(x) -> (Sentence(x) & (1 <= x <= 5)))).",
            "all x (Marriage(x) -> Registered(x)).",
            "all x (Registered(x) -> ~Invalid(x)).",
            "all x (Invalid(x) -> ~Recognized(x)).",
            "all x (Recognized(x) -> ~Convicted(x)).",
            "all x (Convicted(x) -> Adult(x)).",
            "all x (Children(x) -> (SexualIntercourse(x) -> (Sentence(x) & (1 <= x <= 5)))).",
            "all x (Age(x) -> (x >= 13 & x < 16))."
        ],
        "conclusion": "all x (Marriage(x) -> (Age(x) -> Convicted(x))).",
        "id": "f4ace39b-f5bc-4fe2-a490-367a0697ae0b"
    },
    {
        "raw": "Rules:\n1. The dossiers must be submitted at the dossier-receiving and result-delivering sections of the provincial/municipal Justice Services.\n2. The dossier component: The appointed guardians must submit the declaration (made according to a set form) and the guardian appointment paper.\n3. Guardian letters shall be made by the guardian-appointing person, if many persons appoint one guardian, they must all sign the guardian letters.\n4. If the dossier is complete and valid, the officer in charge of receiving dossiers shall collect fees and issue an appointment slip to the dossier to give results to the applicant.\n5. If the file is incomplete or invalid, the receiving officer shall guide the applicant to complete the dossier.\n6. The professional division shall verify the dossier and propose its solution to the director of the provincial/municipal Justice Service.\n7. The Director shall sign the Decision or reply in writing.\n8. An involved party submits the appointment form and receives the result at the request-receiving and result-notifying section of the provincial/municipal Justice Service.\n\nGoals:\nIs the application for recognition of guardianship involving foreign elements?\n\nExplanation:\nInvolveForeign(x): x involves foreign elements.\n\nPredicates:\nSubmit(x) | Dossier(x) | Declaration(x) | Guardian(x) | Appointment(x) | Fee(x) | Issue(x) | Complete(x) | Valid(x) | Guide(x) | Verify(x) | Propose(x) | Sign(x) | Reply(x) | Receive(x) | Result(x) | Provincial(x) | Municipal(x) | Justice(x) | Service(x) | Foreign(x) | Elements(x) | Application(x) | Recognition(x) | Guardianship(x).\n\nExplanation:\nSubmit(x): x submits.\nDossier(x): x is a dossier.\nDeclaration(x): x is a declaration.\nGuardian(x): x is a guardian.\nAppointment(x): x is an appointment.\nFee(x): x collects fees.\nIssue(x): x issues.\nComplete(x): x is complete.\nValid(x): x is valid.\nGuide(x): x guides.\nVerify(x): x verifies.\nPropose(x): x proposes.\nSign(x): x signs.\nReply(x): x replies.\nReceive(x): x receives.\nResult(x): x is a result.\nProvincial(x): x is provincial.\nMunicipal(x): x is municipal.\nJustice(x): x is justice.\nService(x): x is a service.\nForeign(x): x is foreign.\nElements(x): x involves elements.\nApplication(x): x is an application.\nRecognition(x): x is recognition.\nGuardianship(x): x is guardianship.\n\nPremises:\nall x (Submit(x) -> Dossier(x)).\nall x (Declaration(x) -> Guardian(x)).\nall x (Appointment(x) -> Guardian(x)).\nall x (Fee(x) -> Issue(x)).\nall x (Complete(x) -> Valid(x)).\nall x (Guide(x) -> Complete(x)).\nall x (Verify(x) -> Propose(x)).\nall x (Sign(x) -> Reply(x)).\nall x (Receive(x) -> Result(x)).\nall x (Provincial(x) -> Municipal(x)).\nall x (Justice(x) -> Service(x)).\nall x (Foreign(x) -> Elements(x)).\n-Application(x) | Foreign(x).\n\nConclusion:\nall x (Application(x) -> Foreign(x)).",
        "premises": [
            "all x (Submit(x) -> Dossier(x)).",
            "all x (Declaration(x) -> Guardian(x)).",
            "all x (Appointment(x) -> Guardian(x)).",
            "all x (Fee(x) -> Issue(x)).",
            "all x (Complete(x) -> Valid(x)).",
            "all x (Guide(x) -> Complete(x)).",
            "all x (Verify(x) -> Propose(x)).",
            "all x (Sign(x) -> Reply(x)).",
            "all x (Receive(x) -> Result(x)).",
            "all x (Provincial(x) -> Municipal(x)).",
            "all x (Justice(x) -> Service(x)).",
            "all x (Foreign(x) -> Elements(x)).",
            "-Application(x) | Foreign(x)."
        ],
        "conclusion": "all x (Application(x) -> Foreign(x)).",
        "id": "9b4f331e-b079-4880-82b6-0061701f791f"
    }
]