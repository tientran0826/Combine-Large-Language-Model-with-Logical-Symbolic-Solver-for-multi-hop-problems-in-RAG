[
    {
        "raw": "Predicates:\nDeclare(x) | Cash(x) | ForeignCurrency(x) | VietnameseCurrency(x) | BorderGateCustoms(x) | Exit(x) | Entry(x) | Passport(x) | Carry(x) | Declare(x) | Amount(x) | Certification(x) | Form(x) | ServeAsBasis(x) | Deposit(x) | Account(x) | CreditInstitution(x) | BankBranch(x) | License(x) | PaymentInstruments(x) | ValuablePapers(x) | TravelersChecks(x) | BankCards(x) | SavingsBooks(x) | Securities(x) | CustomsDeclaration(x).\n\nExplanation:\nDeclare(x): x makes a declaration.\nCash(x): x carries cash.\nForeignCurrency(x): x carries foreign currency.\nVietnameseCurrency(x): x carries Vietnamese currency.\nBorderGateCustoms(x): x interacts with border-gate customs.\nExit(x): x exits.\nEntry(x): x enters.\nPassport(x): x has a passport.\nCarry(x): x carries items.\nAmount(x): x carries a specific amount.\nCertification(x): x receives certification.\nForm(x): x fills out a form.\nServeAsBasis(x): x serves as a basis for something.\nDeposit(x): x deposits.\nAccount(x): x has an account.\nCreditInstitution(x): x is a licensed credit institution.\nBankBranch(x): x is a bank branch.\nLicense(x): x has a license.\nPaymentInstruments(x): x carries payment instruments.\nValuablePapers(x): x carries valuable papers.\nTravelersChecks(x): x carries traveler's checks.\nBankCards(x): x carries bank cards.\nSavingsBooks(x): x carries savings books.\nSecurities(x): x carries securities.\nCustomsDeclaration(x): x makes a customs declaration.\n\nPremises:\nall x (Carry(x) & Cash(x) & ForeignCurrency(x) & Amount(x) > 5,000 -> Declare(x)).\nall x (Carry(x) & Cash(x) & VietnameseCurrency(x) & Amount(x) > 15,000,000 -> Declare(x)).\nall x (Exit(x) | Entry(x) -> Carry(x) & Passport(x) & Cash(x) & ForeignCurrency(x) & VietnameseCurrency(x) & Amount(x) > 5,100 -> Declare(x)).\nall x (Entry(x) & Cash(x) & ForeignCurrency(x) & Amount(x) <= 5,000 -> Declare(x)).\nall x (Entry(x) & Cash(x) & ForeignCurrency(x) & Amount(x) <= 5,000 -> Deposit(x) & Account(x) & CreditInstitution(x) & BankBranch(x) & License(x) -> Declare(x)).\nall x (Carry(x) & PaymentInstruments(x) & ValuablePapers(x) & ForeignCurrency(x) & VietnameseCurrency(x) -> \u00acDeclare(x)).\n\nConclusion:\nDeclare(x) & Carry(x) & VietnameseCurrency(x) & Amount(x) > 20,000,000.",
        "premises": [
            "all x (Carry(x) & Cash(x) & ForeignCurrency(x) & Amount(x) > 5,000 -> Declare(x)).",
            "all x (Carry(x) & Cash(x) & VietnameseCurrency(x) & Amount(x) > 15,000,000 -> Declare(x)).",
            "all x (Exit(x) | Entry(x) -> Carry(x) & Passport(x) & Cash(x) & ForeignCurrency(x) & VietnameseCurrency(x) & Amount(x) > 5,100 -> Declare(x)).",
            "all x (Entry(x) & Cash(x) & ForeignCurrency(x) & Amount(x) <= 5,000 -> Declare(x)).",
            "all x (Entry(x) & Cash(x) & ForeignCurrency(x) & Amount(x) <= 5,000 -> Deposit(x) & Account(x) & CreditInstitution(x) & BankBranch(x) & License(x) -> Declare(x)).",
            "all x (Carry(x) & PaymentInstruments(x) & ValuablePapers(x) & ForeignCurrency(x) & VietnameseCurrency(x) -> \u00acDeclare(x))."
        ],
        "conclusion": "Declare(x) & Carry(x) & VietnameseCurrency(x) & Amount(x) > 20,000,000.",
        "id": "9b0ccfe7-97bf-4565-94ac-c26875f5a044"
    },
    {
        "raw": "Predicates:\nNonCashPayment(x) | PaymentInstrument(x) | Cheque(x) | PaymentOrder(x) | CollectionOrder(x) | BankCard(x) | IllegalPaymentInstrument(x) | Forging(x) | Modifying(x) | Erasing(x) | Replacing(x) | Storing(x) | Circulating(x) | Transferring(x) | Using(x) | Infiltrating(x) | Sabotaging(x) | Changing(x) | TakingAdvantage(x) | ProvidingFalseInfo(x) | DisclosingInfo(x) | ProvidingInfo(x) | OpenAccount(x) | MaintainAccount(x) | Issuing(x) | Providing(x) | Using(x) | Cryptocurrencies(x) | Recognized(x) | Legitimate(x) | PaymentVehicle(x) | ElectronicExchanges(x).\n\nExplanation:\nNonCashPayment(x): x involves non-cash payment.\nPaymentInstrument(x): x is a payment instrument.\nCheque(x): x is a cheque.\nPaymentOrder(x): x is a payment order.\nCollectionOrder(x): x is a collection order.\nBankCard(x): x is a bank card.\nIllegalPaymentInstrument(x): x is an illegal payment instrument.\nForging(x): x engages in forging.\nModifying(x): x modifies payment instruments.\nErasing(x): x erases payment instruments.\nReplacing(x): x replaces payment instruments.\nStoring(x): x stores payment instruments.\nCirculating(x): x circulates payment instruments.\nTransferring(x): x transfers payment instruments.\nUsing(x): x uses payment instruments.\nInfiltrating(x): x infiltrates.\nSabotaging(x): x sabotages.\nChanging(x): x changes.\nTakingAdvantage(x): x takes advantage.\nProvidingFalseInfo(x): x provides false information.\nDisclosingInfo(x): x discloses information.\nProvidingInfo(x): x provides information.\nOpenAccount(x): x opens an account.\nMaintainAccount(x): x maintains an account.\nIssuing(x): x issues payment instruments.\nProviding(x): x provides payment instruments.\nUsing(x): x uses payment instruments.\nCryptocurrencies(x): x is cryptocurrencies.\nRecognized(x): x is recognized.\nLegitimate(x): x is legitimate.\nPaymentVehicle(x): x is a payment vehicle.\nElectronicExchanges(x): x is electronic exchanges.\n\nPremises:\nall x (PaymentInstrument(x) -> (Cheque(x) | PaymentOrder(x) | CollectionOrder(x) | BankCard(x))).\nall x (IllegalPaymentInstrument(x) -> \u00acPaymentInstrument(x)).\nall x (Forging(x) | Modifying(x) | Erasing(x) | Replacing(x) -> (Storing(x) | Circulating(x) | Transferring(x) | Using(x))).\nall x (Infiltrating(x) | Sabotaging(x) | Changing(x) -> TakingAdvantage(x)).\nall x (ProvidingFalseInfo(x) -> (ProvidingInfo(x) & Using(x))).\nall x (DisclosingInfo(x) -> \u00acLawRegulations(x)).\nall x (OpenAccount(x) | MaintainAccount(x) -> (Anonymous(x) | Impersonation(x))).\nall x (Issuing(x) | Providing(x) | Using(x) -> IllegalPaymentInstrument(x)).\n-Recognized(x) | Legitimate(x).\nall x (Cryptocurrencies(x) -> PaymentVehicle(x) & ElectronicExchanges(x)).\n\nConclusion:\nall x (Cryptocurrencies(x) -> Recognized(x)).",
        "premises": [
            "all x (PaymentInstrument(x) -> (Cheque(x) | PaymentOrder(x) | CollectionOrder(x) | BankCard(x))).",
            "all x (IllegalPaymentInstrument(x) -> \u00acPaymentInstrument(x)).",
            "all x (Forging(x) | Modifying(x) | Erasing(x) | Replacing(x) -> (Storing(x) | Circulating(x) | Transferring(x) | Using(x))).",
            "all x (Infiltrating(x) | Sabotaging(x) | Changing(x) -> TakingAdvantage(x)).",
            "all x (ProvidingFalseInfo(x) -> (ProvidingInfo(x) & Using(x))).",
            "all x (DisclosingInfo(x) -> \u00acLawRegulations(x)).",
            "all x (OpenAccount(x) | MaintainAccount(x) -> (Anonymous(x) | Impersonation(x))).",
            "all x (Issuing(x) | Providing(x) | Using(x) -> IllegalPaymentInstrument(x)).",
            "-Recognized(x) | Legitimate(x).",
            "all x (Cryptocurrencies(x) -> PaymentVehicle(x) & ElectronicExchanges(x))."
        ],
        "conclusion": "all x (Cryptocurrencies(x) -> Recognized(x)).",
        "id": "7c2bdc89-9f2d-4ef3-9147-0cfc3d47d5c7"
    },
    {
        "raw": "Predicates:\nTrading(x, y) | ForeignCurrency(x) | Individual(x) | Value(x, y) | Organization(x) | Permit(x) | Exchange(x) | Law(x) | Payment(x) | GoodsServices(x) | Penalty(x).\n\nExplanation:\nTrading(x, y): x engages in trading foreign currency with y.\nForeignCurrency(x): x is foreign currency.\nIndividual(x): x is an individual.\nValue(x, y): x has a value of y.\nOrganization(x): x is an organization.\nPermit(x): x has permission.\nExchange(x): x exchanges currency.\nLaw(x): x is the law.\nPayment(x): x is a payment.\nGoodsServices(x): x is goods or services.\nPenalty(x): x is a penalty.\n\nPremises:\nall x (Trading(x, y) & Individual(x) & Value(y, z) & z < 1000 -> ~Penalty(x)).\nall x (Trading(x, y) & Organization(x) & ~Permit(x) & Value(y, z) & z < 1000 -> ~Penalty(x)).\nall x (Trading(x, y) & ~Law(x) & Payment(x) & GoodsServices(x) & Value(y, z) & z < 1 -> ~Penalty(x)).\n\nConclusion:\n?- all x (Trading(x, y) & Organization(x) & ~Permit(x) -> Penalty(x)).",
        "premises": [
            "all x (Trading(x, y) & Individual(x) & Value(y, z) & z < 1000 -> ~Penalty(x)).",
            "all x (Trading(x, y) & Organization(x) & ~Permit(x) & Value(y, z) & z < 1000 -> ~Penalty(x)).",
            "all x (Trading(x, y) & ~Law(x) & Payment(x) & GoodsServices(x) & Value(y, z) & z < 1 -> ~Penalty(x))."
        ],
        "conclusion": "?- all x (Trading(x, y) & Organization(x) & ~Permit(x) -> Penalty(x)).",
        "id": "064d2f1d-03e5-4089-ba44-b7f4d0b1cea0"
    },
    {
        "raw": "Predicates:\nOpenAccount(x) | ApplicationForm(x) | Bank(x) | ForeignBank(x) | AccountHolder(x) | CitizenIDCard(x) | IDCard(x) | Passport(x) | BirthCertificate(x) | EntryVisa(x) | ExemptionDocument(x) | Guardian(x) | LegalRepresentative(x) | VietnameseCitizen(x) | Under14Years(x) | Foreigner(x) | CCCDCard(x).\n\nExplanation:\nOpenAccount(x): x opens a bank account.\nApplicationForm(x): x fills out an application form.\nBank(x): x is a bank.\nForeignBank(x): x is a foreign bank.\nAccountHolder(x): x is the holder of the account.\nCitizenIDCard(x): x has a citizen ID card.\nIDCard(x): x has an ID card.\nPassport(x): x has a passport.\nBirthCertificate(x): x has a birth certificate.\nEntryVisa(x): x has an entry visa.\nExemptionDocument(x): x has a document proving exemption from entry visa.\nGuardian(x): x is a guardian.\nLegalRepresentative(x): x is a legal representative.\nVietnameseCitizen(x): x is a Vietnamese citizen.\nUnder14Years(x): x is under 14 years old.\nForeigner(x): x is a foreigner.\nCCCDCard(x): x has a CCCD card.\n\nPremises:\nall x (OpenAccount(x) -> (ApplicationForm(x) & (Bank(x) | ForeignBank(x)))).\nall x ((AccountHolder(x) & VietnameseCitizen(x) & Under14Years(x)) -> BirthCertificate(x)).\nall x ((AccountHolder(x) & Foreigner(x)) -> (EntryVisa(x) | ExemptionDocument(x))).\nall x ((Guardian(x) | LegalRepresentative(x)) -> (ApplicationForm(x) & CitizenIDCard(x) & IDCard(x) & Passport(x))).\n-CCCDCard(x).\n\nConclusion:\nexists x (OpenAccount(x) & -CCCDCard(x)).",
        "premises": [
            "all x (OpenAccount(x) -> (ApplicationForm(x) & (Bank(x) | ForeignBank(x)))).",
            "all x ((AccountHolder(x) & VietnameseCitizen(x) & Under14Years(x)) -> BirthCertificate(x)).",
            "all x ((AccountHolder(x) & Foreigner(x)) -> (EntryVisa(x) | ExemptionDocument(x))).",
            "all x ((Guardian(x) | LegalRepresentative(x)) -> (ApplicationForm(x) & CitizenIDCard(x) & IDCard(x) & Passport(x))).",
            "-CCCDCard(x)."
        ],
        "conclusion": "exists x (OpenAccount(x) & -CCCDCard(x)).",
        "id": "e1946d8a-ebdb-49ba-964d-ba72fffe2433"
    },
    {
        "raw": "Predicates:\nEnter(x) | Exit(x) | Carry(x) | IngotGold(x) | RawMaterialGold(x) | GoldBullion(x) | GoldJewelry(x) | Declare(x) | Vietnamese(x) | Foreigner(x) | Customs(x) | Procedure(x) | Deposit(x) | Transfer(x) | Expense(x) | DeclareWithCustoms(x).\n\nExplanation:\nEnter(x): x enters a location.\nExit(x): x exits a location.\nCarry(x): x carries an item.\nIngotGold(x): x carries ingot gold.\nRawMaterialGold(x): x carries raw material gold.\nGoldBullion(x): x carries gold bullion.\nGoldJewelry(x): x carries gold jewelry.\nDeclare(x): x declares an item.\nVietnamese(x): x is Vietnamese.\nForeigner(x): x is a foreigner.\nCustoms(x): x is customs authorities.\nProcedure(x): x follows a procedure.\nDeposit(x): x deposits an item.\nTransfer(x): x transfers an item.\nExpense(x): x bears expenses.\nDeclareWithCustoms(x): x declares an item with customs authorities.\n\nPremises:\nall x ((Enter(x) | Exit(x)) & Carry(x) & (IngotGold(x) | RawMaterialGold(x)) -> \u00acVietnamese(x)).\nall x ((Enter(x) | Exit(x)) & Carry(x) & GoldJewelry(x) & (TotalAmount(x) \u2265 300g) -> Declare(x) & DeclareWithCustoms(x)).\nall x (Foreigner(x) -> \u00acVietnamese(x)).\nall x ((Enter(x) | Exit(x)) & Carry(x) & (IngotGold(x) | RawMaterialGold(x)) -> Procedure(x) & Deposit(x) & Transfer(x) & Expense(x)).\n\nConclusion:\nall x (Foreigner(x) & Carry(GoldJewelry(x)) -> DeclareWithCustoms(x)).",
        "premises": [
            "all x ((Enter(x) | Exit(x)) & Carry(x) & (IngotGold(x) | RawMaterialGold(x)) -> \u00acVietnamese(x)).",
            "all x ((Enter(x) | Exit(x)) & Carry(x) & GoldJewelry(x) & (TotalAmount(x) \u2265 300g) -> Declare(x) & DeclareWithCustoms(x)).",
            "all x (Foreigner(x) -> \u00acVietnamese(x)).",
            "all x ((Enter(x) | Exit(x)) & Carry(x) & (IngotGold(x) | RawMaterialGold(x)) -> Procedure(x) & Deposit(x) & Transfer(x) & Expense(x))."
        ],
        "conclusion": "all x (Foreigner(x) & Carry(GoldJewelry(x)) -> DeclareWithCustoms(x)).",
        "id": "9789c422-3ba7-469c-ba93-7ef37943ebbc"
    },
    {
        "raw": "Predicates:\nCounterfeit(x) | Transport(x) | Store(x) | Circulate(x) | Buy(x) | Sell(x) | Destroy(x) | Photocopy(x) | Legal(x) | Approval(x) | StateBank(x) | Vietnam(x) | VietnameseCurrency(x).\n\nExplanation:\nCounterfeit(x): x engages in counterfeiting money.\nTransport(x): x transports money.\nStore(x): x stores money.\nCirculate(x): x circulates money.\nBuy(x): x buys money.\nSell(x): x sells money.\nDestroy(x): x destroys money.\nPhotocopy(x): x photocopies money.\nLegal(x): x is legal.\nApproval(x): x has approval.\nStateBank(x): x is the State Bank.\nVietnam(x): x is in the territory of Vietnam.\nVietnameseCurrency(x): x is Vietnamese currency.\n\nPremises:\nall x (Counterfeit(x) -> (Transport(x) | Store(x) | Circulate(x) | Buy(x) | Sell(x))).\nDestroy(x).\nall x (Photocopy(x) -> (Legal(x) & Approval(x))).\nall x (Legal(x) -> Vietnam(x)).\nall x (StateBank(x) -> Vietnam(x)).\n-Photocopy(x) | Approval(x).\nall x (VietnameseCurrency(x) -> StateBankApproval(x)).\n\nConclusion:\n-Destroy(x).",
        "premises": [
            "all x (Counterfeit(x) -> (Transport(x) | Store(x) | Circulate(x) | Buy(x) | Sell(x))).",
            "Destroy(x).",
            "all x (Photocopy(x) -> (Legal(x) & Approval(x))).",
            "all x (Legal(x) -> Vietnam(x)).",
            "all x (StateBank(x) -> Vietnam(x)).",
            "-Photocopy(x) | Approval(x).",
            "all x (VietnameseCurrency(x) -> StateBankApproval(x))."
        ],
        "conclusion": "-Destroy(x).",
        "id": "290a8877-962e-4f88-94e9-875d9c0f9d98"
    },
    {
        "raw": "Predicates:\nTransaction(x) | Payment(x) | Posting(x) | Advertisement(x) | Quotation(x) | Valuation(x) | PriceEntry(x) | Resident(x) | NonResident(x) | ForeignExchange(x) | StateBankVietnam(x) | Illegal(x) | Contract(x) | Sign(x) | Lease(x) | House(x).\n\nExplanation:\nTransaction(x): x engages in a financial transaction.\nPayment(x): x makes a payment.\nPosting(x): x posts information.\nAdvertisement(x): x advertises.\nQuotation(x): x provides a quotation.\nValuation(x): x evaluates something.\nPriceEntry(x): x enters a price.\nResident(x): x is a resident.\nNonResident(x): x is a non-resident.\nForeignExchange(x): x involves foreign exchange.\nStateBankVietnam(x): x is the State Bank of Vietnam.\nIllegal(x): x is illegal.\nContract(x): x is a contract.\nSign(x): x signs something.\nLease(x): x involves a lease.\nHouse(x): x is related to a house.\n\nPremises:\nall x (Transaction(x) -> (Payment(x) | Posting(x) | Advertisement(x) | Quotation(x) | Valuation(x) | PriceEntry(x))).\nall x ((Resident(x) | NonResident(x)) & ForeignExchange(x) -> Illegal(x)).\nall x (Contract(x) & Sign(x) & Lease(x) & House(x) -> ForeignExchange(x)).\n\nConclusion:\nall x (Contract(x) & Sign(x) & Lease(x) & House(x) -> Illegal(x)).",
        "premises": [
            "all x (Transaction(x) -> (Payment(x) | Posting(x) | Advertisement(x) | Quotation(x) | Valuation(x) | PriceEntry(x))).",
            "all x ((Resident(x) | NonResident(x)) & ForeignExchange(x) -> Illegal(x)).",
            "all x (Contract(x) & Sign(x) & Lease(x) & House(x) -> ForeignExchange(x))."
        ],
        "conclusion": "all x (Contract(x) & Sign(x) & Lease(x) & House(x) -> Illegal(x)).",
        "id": "7fbf3cc8-1c9a-4a0c-9ede-ec20f362e60c"
    },
    {
        "raw": "Predicates:\nCashPayment(x) | CapitalContribution(x) | Purchase(x) | Sale(x) | Transfer(x) | Borrow(x) | Lend(x) | Company(x) | CreditInstitution(x) | Cash(x) | Use(x) | Allowed(x).\n\nExplanation:\nCashPayment(x): x involves making cash payments.\nCapitalContribution(x): x relates to capital contribution transactions.\nPurchase(x): x engages in purchases.\nSale(x): x engages in sales.\nTransfer(x): x engages in transfers.\nBorrow(x): x borrows.\nLend(x): x lends.\nCompany(x): x is a company.\nCreditInstitution(x): x is a credit institution.\nCash(x): x is cash.\nUse(x): x uses something.\nAllowed(x): x is allowed to do something.\n\nPremises:\nall x (Company(x) & CapitalContribution(x) -> CashPayment(x)).\nall x (Company(x) & (Purchase(x) | Sale(x) | Transfer(x)) -> CashPayment(x)).\nall x (Company(x) & ~CreditInstitution(x) & (Borrow(x) | Lend(x)) -> ~Use(x)).\n-Use(x) | Cash(x).\nall x (Company(x) & ~CreditInstitution(x) & Borrow(x) & Lend(x)).\n\nConclusion:\n-Use(x) | Cash(x).",
        "premises": [
            "all x (Company(x) & CapitalContribution(x) -> CashPayment(x)).",
            "all x (Company(x) & (Purchase(x) | Sale(x) | Transfer(x)) -> CashPayment(x)).",
            "all x (Company(x) & ~CreditInstitution(x) & (Borrow(x) | Lend(x)) -> ~Use(x)).",
            "-Use(x) | Cash(x).",
            "all x (Company(x) & ~CreditInstitution(x) & Borrow(x) & Lend(x))."
        ],
        "conclusion": "-Use(x) | Cash(x).",
        "id": "6b1e724-2a30-49d9-8c43-ca7af168eea2"
    },
    {
        "raw": "Predicates:\nDebt(x) | Restructured(x) | RepaymentTerm(x) | Adjusted(x) | Rescheduled(x) | CreditInstitution(x) | ForeignBankBranch(x) | Customer(x) | Incapable(x) | Paying(x) | Principal(x) | Interest(x) | AgreedSchedule(x) | Capable(x) | FullyPaying(x) | BadDebt(x) | UndueDebt(x).\n\nExplanation:\nDebt(x): x is a debt.\nRestructured(x): x is restructured.\nRepaymentTerm(x): x is a repayment term.\nAdjusted(x): x is adjusted.\nRescheduled(x): x is rescheduled.\nCreditInstitution(x): x is a credit institution.\nForeignBankBranch(x): x is a foreign bank branch.\nCustomer(x): x is a customer.\nIncapable(x): x is incapable.\nPaying(x): x is paying.\nPrincipal(x): x is the principal.\nInterest(x): x is the interest.\nAgreedSchedule(x): x is the agreed schedule.\nCapable(x): x is capable.\nFullyPaying(x): x is fully paying.\nBadDebt(x): x is a bad debt.\nUndueDebt(x): x is an undue debt.\n\nPremises:\nall x (Debt(x) & Restructured(x) & RepaymentTerm(x) & Adjusted(x) & Rescheduled(x) & CreditInstitution(x) & ForeignBankBranch(x) & Customer(x) & Incapable(x) & Paying(x) & Principal(x) & Interest(x) & AgreedSchedule(x) & Capable(x) & FullyPaying(x) -> BadDebt(x)).\nall x (Debt(x) & Restructured(x) & RepaymentTerm(x) & Adjusted(x) & Rescheduled(x) & CreditInstitution(x) & ForeignBankBranch(x) & Customer(x) & Incapable(x) & Paying(x) & Principal(x) & Interest(x) & AgreedSchedule(x) & Capable(x) & FullyPaying(x) -> -BadDebt(x)).\n\nConclusion:\nall x (UndueDebt(x) -> BadDebt(x)).",
        "premises": [
            "all x (Debt(x) & Restructured(x) & RepaymentTerm(x) & Adjusted(x) & Rescheduled(x) & CreditInstitution(x) & ForeignBankBranch(x) & Customer(x) & Incapable(x) & Paying(x) & Principal(x) & Interest(x) & AgreedSchedule(x) & Capable(x) & FullyPaying(x) -> BadDebt(x)).",
            "all x (Debt(x) & Restructured(x) & RepaymentTerm(x) & Adjusted(x) & Rescheduled(x) & CreditInstitution(x) & ForeignBankBranch(x) & Customer(x) & Incapable(x) & Paying(x) & Principal(x) & Interest(x) & AgreedSchedule(x) & Capable(x) & FullyPaying(x) -> -BadDebt(x))."
        ],
        "conclusion": "all x (UndueDebt(x) -> BadDebt(x)).",
        "id": "0b1c6aeb-f312-4192-8b83-45f266e256c7"
    },
    {
        "raw": "Predicates:\nPenalty(x) | RoadTransport(x) | RailTransport(x) | Offence(x) | Officer(x) | RedLine(x).\n\nExplanation:\nPenalty(x): x is a penalty imposed for an offense.\nRoadTransport(x): x relates to road transport.\nRailTransport(x): x relates to rail transport.\nOffence(x): x is an offense.\nOfficer(x): x is an officer.\nRedLine(x): x is a red line.\n\nPremises:\nall x (Penalty(x) -> (RoadTransport(x) | RailTransport(x) | Offence(x))).\nall x (Officer(x) -> RedLine(x)).\n\nConclusion:\nOfficer(x) -> RedLine(x).",
        "premises": [
            "all x (Penalty(x) -> (RoadTransport(x) | RailTransport(x) | Offence(x))).",
            "all x (Officer(x) -> RedLine(x))."
        ],
        "conclusion": "Officer(x) -> RedLine(x).",
        "id": "8121f6ab-4eb9-493e-8a64-2ecce6cbd45e"
    },
    {
        "raw": "Predicates:\nParticipate(x) | Select(x, y) | InsuranceEnterprises(x) | ForeignBranches(x) | License(x) | Operate(x) | CrossBorderServices(x) | Interfere(x) | Buyer(x) | Insurer(y) | Threaten(x) | Coerce(x) | Conclusion(x) | CommercialBank(x) | Customer(y) | Borrow(x) | Insurance(x).\n\nExplanation:\nParticipate(x): x participates in insurance.\nSelect(x, y): x selects y.\nInsuranceEnterprises(x): x is an insurance enterprise.\nForeignBranches(x): x is a foreign branch.\nLicense(x): x is licensed.\nOperate(x): x operates.\nCrossBorderServices(x): x provides cross-border insurance services.\nInterfere(x): x interferes.\nBuyer(x): x is a buyer.\nInsurer(y): y is an insurer.\nThreaten(x): x threatens.\nCoerce(x): x coerces.\nConclusion(x): x concludes.\nCommercialBank(x): x is a commercial bank.\nCustomer(y): y is a customer.\nBorrow(x): x borrows.\nInsurance(x): x is insurance.\n\nPremises:\nall x (Select(x, y) & Participate(y) -> (InsuranceEnterprises(y) | ForeignBranches(y) & License(y) & Operate(y) & CrossBorderServices(y))).\nall x (CommercialBank(x) & Customer(y) & Borrow(y) -> -Threaten(x) & -Coerce(x) & Conclusion(x)).\nall x (Interfere(x) -> (Buyer(x) & Insurer(y))).\nall x (Threaten(x) | Coerce(x) -> Conclusion(x)).\n\nConclusion:\n-CommercialBank(x) | -Coerce(x) | Conclusion(x).",
        "premises": [
            "all x (Select(x, y) & Participate(y) -> (InsuranceEnterprises(y) | ForeignBranches(y) & License(y) & Operate(y) & CrossBorderServices(y))).",
            "all x (CommercialBank(x) & Customer(y) & Borrow(y) -> -Threaten(x) & -Coerce(x) & Conclusion(x)).",
            "all x (Interfere(x) -> (Buyer(x) & Insurer(y))).",
            "all x (Threaten(x) | Coerce(x) -> Conclusion(x))."
        ],
        "conclusion": "-CommercialBank(x) | -Coerce(x) | Conclusion(x).",
        "id": "4e45a89c-0a24-4025-8283-071a48e0df16"
    },
    {
        "raw": "Predicates:\nCarry(x) | Motorcycle(x) | Moped(x) | ElectricMotorcycle(x) | VehicleSimilarToMotorcycle(x) | VehicleSimilarToMoped(x) | ElectricBicycle(x) | Helmet(x) | FastenStraps(x) | RoadTraffic(x) | Fine(x) | Specification(x) | Person(x).\n\nExplanation:\nCarry(x): x is carried on a vehicle.\nMotorcycle(x): x is a motorcycle.\nMoped(x): x is a moped.\nElectricMotorcycle(x): x is an electric motorcycle.\nVehicleSimilarToMotorcycle(x): x is a vehicle similar to a motorcycle.\nVehicleSimilarToMoped(x): x is a vehicle similar to a moped.\nElectricBicycle(x): x is an electric bicycle.\nHelmet(x): x is a helmet.\nFastenStraps(x): x fastens straps.\nRoadTraffic(x): x participates in road traffic.\nFine(x): x incurs a fine.\nSpecification(x): x follows specifications.\nPerson(x): x is a person.\n\nPremises:\nall x ((Motorcycle(x) | Moped(x) | VehicleSimilarToMotorcycle(x) | VehicleSimilarToMoped(x) | ElectricBicycle(x)) & Carry(x) & -Helmet(x) -> Fine(x)).\nall x (Helmet(x) & -FastenStraps(x) & Specification(x) -> Fine(x)).\nall x (Person(x) & Carry(x) & -Helmet(x) -> Fine(x)).\n\nConclusion:\n\u2203x (Person(x) & Carry(x) & -Helmet(x) & Fine(x)).",
        "premises": [
            "all x ((Motorcycle(x) | Moped(x) | VehicleSimilarToMotorcycle(x) | VehicleSimilarToMoped(x) | ElectricBicycle(x)) & Carry(x) & -Helmet(x) -> Fine(x)).",
            "all x (Helmet(x) & -FastenStraps(x) & Specification(x) -> Fine(x)).",
            "all x (Person(x) & Carry(x) & -Helmet(x) -> Fine(x))."
        ],
        "conclusion": "\u2203x (Person(x) & Carry(x) & -Helmet(x) & Fine(x)).",
        "id": "5b287a17-0ea7-457c-8a7b-a38a040c2444"
    },
    {
        "raw": "Predicates:\nDrivingTestCenter(x) | EnsureFacilities(x) | TestingEquipment(x) | ScoringInstruments(x) | Report(x) | DepartmentOfTransport(x) | DirectorateForRoads(x) | CooperateWith(x) | DriverTrainingInstitutions(x) | RefresherCourses(x) | DrivingTestCouncils(x) | OrganizeTests(x) | ComplyWith(x) | Inspect(x) | Assess(x) | PubliclyAnnounce(x) | TestingFees(x) | ServiceCharges(x) | ExternalVehicles(x) | Allowed(x).\n\nExplanation:\nDrivingTestCenter(x): x is a driving test center.\nEnsureFacilities(x): x ensures facilities.\nTestingEquipment(x): x has testing equipment.\nScoringInstruments(x): x has scoring instruments.\nReport(x): x reports to authorities.\nDepartmentOfTransport(x): x is the Department of Transport.\nDirectorateForRoads(x): x is the Directorate for Roads of Vietnam.\nCooperateWith(x): x cooperates with others.\nDriverTrainingInstitutions(x): x is a driver training institution.\nRefresherCourses(x): x provides refresher courses.\nDrivingTestCouncils(x): x is a driving test council.\nOrganizeTests(x): x organizes tests.\nComplyWith(x): x complies with regulations.\nInspect(x): x inspects.\nAssess(x): x assesses.\nPubliclyAnnounce(x): x publicly announces.\nTestingFees(x): x is testing fees.\nServiceCharges(x): x is service charges.\nExternalVehicles(x): x are external vehicles.\nAllowed(x): x is allowed.\n\nPremises:\nall x (DrivingTestCenter(x) -> (EnsureFacilities(x) & TestingEquipment(x) & ScoringInstruments(x) & Report(x) & CooperateWith(x) & ComplyWith(x) & PubliclyAnnounce(x))).\nCooperateWith(DriverTrainingInstitutions(x) & OrganizeTests(DrivingTestCouncils(x))).\nall x (ComplyWith(x) -> Inspect(x) & Assess(x)).\nPubliclyAnnounce(TestingFees(x) & ServiceCharges(x)).\n\nConclusion:\n-Allowed(ExternalVehicles(x)).",
        "premises": [
            "all x (DrivingTestCenter(x) -> (EnsureFacilities(x) & TestingEquipment(x) & ScoringInstruments(x) & Report(x) & CooperateWith(x) & ComplyWith(x) & PubliclyAnnounce(x))).",
            "CooperateWith(DriverTrainingInstitutions(x) & OrganizeTests(DrivingTestCouncils(x))).",
            "all x (ComplyWith(x) -> Inspect(x) & Assess(x)).",
            "PubliclyAnnounce(TestingFees(x) & ServiceCharges(x))."
        ],
        "conclusion": "-Allowed(ExternalVehicles(x)).",
        "id": "4e10db30-25ac-4972-8782-c85bebe53b57"
    },
    {
        "raw": "Predicates:\nFine(x) | Gather(x) | Encourage(x) | Incite(x) | Vehicle(x) | SpeedLimit(x) | Weave(x) | Speed(x) | Chase(x) | PublicRoad(x) | Race(x) | Illegal(x) | RacingCheer(x).\n\nExplanation:\nFine(x): x incurs a fine.\nGather(x): x gathers.\nEncourage(x): x encourages.\nIncite(x): x incites.\nVehicle(x): x is a vehicle.\nSpeedLimit(x): x is the speed limit.\nWeave(x): x weaves.\nSpeed(x): x speeds.\nChase(x): x chases.\nPublicRoad(x): x is a public road.\nRace(x): x races.\nIllegal(x): x is illegal.\nRacingCheer(x): x involves cheering for illegal racing.\n\nPremises:\nall x (Gather(x) & (Encourage(x) | Incite(x)) -> (Vehicle(x) & (SpeedLimit(x) | Weave(x) | Speed(x) | Chase(x) | PublicRoad(x) | Race(x) | Illegal(x)))).\nIllegal(x) & RacingCheer(x).\n\nConclusion:\nFine(x).",
        "premises": [
            "all x (Gather(x) & (Encourage(x) | Incite(x)) -> (Vehicle(x) & (SpeedLimit(x) | Weave(x) | Speed(x) | Chase(x) | PublicRoad(x) | Race(x) | Illegal(x)))).",
            "Illegal(x) & RacingCheer(x)."
        ],
        "conclusion": "Fine(x).",
        "id": "5eb886d7-66cc-4af9-82d0-68165dab50d2"
    },
    {
        "raw": "Predicates:\nUseFareMeter(x) | InstalledWithFareMeter(x) | InspectedByAgency(x) | LeasedByAgency(x) | HavePrintingDevices(x) | FixedAtNoticeablePositions(x) | PrintInvoices(x) | ReturnInvoices(x) | ContainInformation(x) | NameOfBusiness(x) | RegistrationPlate(x) | TravelDistance(x) | TotalFare(x) | Taxi(x) | InvoiceReceived(x).\n\nExplanation:\nUseFareMeter(x): x uses fare meters.\nInstalledWithFareMeter(x): x is installed with fare meters.\nInspectedByAgency(x): fare meters of x are inspected by a competent measurement agency.\nLeasedByAgency(x): fare meters of x are leaded by a competent measurement agency.\nHavePrintingDevices(x): x has invoice or fare receipt printing devices connected to fare meters.\nFixedAtNoticeablePositions(x): fare meters and printing devices of x are fixed at noticeable positions.\nPrintInvoices(x): drivers of x print invoices.\nReturnInvoices(x): drivers of x return invoices to passengers.\nContainInformation(x): fare receipts of x contain specific information.\nNameOfBusiness(x): x has the name of the transport business on fare receipts.\nRegistrationPlate(x): x has the vehicle's registration plate number on fare receipts.\nTravelDistance(x): x has travel distance (km) on fare receipts.\nTotalFare(x): x has total fare payable by passengers on fare receipts.\nTaxi(x): x is a taxi.\nInvoiceReceived(x): x received a taxi fare payment invoice.\n\nPremises:\nall x (Taxi(x) -> (UseFareMeter(x) & InstalledWithFareMeter(x) & InspectedByAgency(x) & LeasedByAgency(x) & HavePrintingDevices(x) & FixedAtNoticeablePositions(x) & PrintInvoices(x) & ReturnInvoices(x) & ContainInformation(x))).\nall x (ContainInformation(x) -> (NameOfBusiness(x) & RegistrationPlate(x) & TravelDistance(x) & TotalFare(x))).\n\nConclusion:\nInvoiceReceived(x).",
        "premises": [
            "all x (Taxi(x) -> (UseFareMeter(x) & InstalledWithFareMeter(x) & InspectedByAgency(x) & LeasedByAgency(x) & HavePrintingDevices(x) & FixedAtNoticeablePositions(x) & PrintInvoices(x) & ReturnInvoices(x) & ContainInformation(x))).",
            "all x (ContainInformation(x) -> (NameOfBusiness(x) & RegistrationPlate(x) & TravelDistance(x) & TotalFare(x)))."
        ],
        "conclusion": "InvoiceReceived(x).",
        "id": "30bcbd8a-b317-4796-989c-bc8e651a35b5"
    },
    {
        "raw": "Predicates:\nSanction(x) | Record(x) | Warning(x) | Fine(x) | Individuals(x) | Organizations(x) | Competent(x) | Decision(x) | Spot(x) | Detected(x) | TechnicalMeans(x) | ProfessionalMeans(x) | Equipment(x) | Written(x) | Driving(x) | Motorcycle(x) | PastRedLight(x) | PlacePenalty(x).\n\nExplanation:\nSanction(x): x is a sanction.\nRecord(x): x is a record.\nWarning(x): x is a warning.\nFine(x): x is a fine.\nIndividuals(x): x is an individual.\nOrganizations(x): x is an organization.\nCompetent(x): x is competent.\nDecision(x): x is a decision.\nSpot(x): x is on the spot.\nDetected(x): x is detected.\nTechnicalMeans(x): x is technical means.\nProfessionalMeans(x): x is professional means.\nEquipment(x): x is equipment.\nWritten(x): x is written.\nDriving(x): x is driving.\nMotorcycle(x): x is a motorcycle.\nPastRedLight(x): x passes a red light.\nPlacePenalty(x): x places a penalty.\n\nPremises:\nall x (Sanction(x) & ~Record(x) -> (Warning(x) | (Fine(x) & Individuals(x)) | (Fine(x) & Organizations(x)))).\nall x (Sanction(x) & Record(x) -> (Decision(x) & Spot(x))).\nall x (Detected(x) & (TechnicalMeans(x) | ProfessionalMeans(x) | Equipment(x)) -> Written(x)).\nDriving(x) & Motorcycle(x) & PastRedLight(x).\n\nConclusion:\nPlacePenalty(x).",
        "premises": [
            "all x (Sanction(x) & ~Record(x) -> (Warning(x) | (Fine(x) & Individuals(x)) | (Fine(x) & Organizations(x)))).",
            "all x (Sanction(x) & Record(x) -> (Decision(x) & Spot(x))).",
            "all x (Detected(x) & (TechnicalMeans(x) | ProfessionalMeans(x) | Equipment(x)) -> Written(x)).",
            "Driving(x) & Motorcycle(x) & PastRedLight(x)."
        ],
        "conclusion": "PlacePenalty(x).",
        "id": "47a6e4c4-d3c3-494e-98ea-90934f1fd5cd"
    },
    {
        "raw": "Predicates:\nSeniorityPay(x) | ProbationPeriod(x) | UnpaidLeave(x) | SickLeave(x) | MaternityLeave(x) | WorkingAsExperts(x) | Training(x) | Practice(x) | Survey(x) | Suspension(x) | Detainment(x) | NotWorking(x) | Teacher(x) | SeniorityAllowance(x) | ApprenticeshipPeriod(x).\n\nExplanation:\nSeniorityPay(x): x is seniority pay.\nProbationPeriod(x): x is a probation period.\nUnpaidLeave(x): x takes unpaid leave for at least 01 consecutive month.\nSickLeave(x): x is on sick leave.\nMaternityLeave(x): x is on maternity leave.\nWorkingAsExperts(x): x works as an expert.\nTraining(x): x attends training.\nPractice(x): x practices.\nSurvey(x): x conducts a survey.\nSuspension(x): x is under suspension.\nDetainment(x): x is temporarily detained.\nNotWorking(x): x is not working.\nTeacher(x): x is a teacher.\nSeniorityAllowance(x): x receives seniority allowance.\nApprenticeshipPeriod(x): x is an apprenticeship period.\n\nPremises:\nall x (SeniorityPay(x) -> (ProbationPeriod(x) | UnpaidLeave(x) | SickLeave(x) | MaternityLeave(x) | WorkingAsExperts(x) | Training(x) | Practice(x) | Survey(x) | Suspension(x) | Detainment(x) | NotWorking(x))).\nProbationPeriod(x).\nUnpaidLeave(x).\nSickLeave(x).\nMaternityLeave(x).\nWorkingAsExperts(x).\nTraining(x).\nPractice(x).\nSurvey(x).\nSuspension(x).\nDetainment(x).\nNotWorking(x).\n\nConclusion:\nall x (ApprenticeshipPeriod(x) -> \u00acSeniorityAllowance(x)).",
        "premises": [
            "all x (SeniorityPay(x) -> (ProbationPeriod(x) | UnpaidLeave(x) | SickLeave(x) | MaternityLeave(x) | WorkingAsExperts(x) | Training(x) | Practice(x) | Survey(x) | Suspension(x) | Detainment(x) | NotWorking(x))).",
            "ProbationPeriod(x).",
            "UnpaidLeave(x).",
            "SickLeave(x).",
            "MaternityLeave(x).",
            "WorkingAsExperts(x).",
            "Training(x).",
            "Practice(x).",
            "Survey(x).",
            "Suspension(x).",
            "Detainment(x).",
            "NotWorking(x)."
        ],
        "conclusion": "all x (ApprenticeshipPeriod(x) -> \u00acSeniorityAllowance(x)).",
        "id": "51f10192-1372-4963-8d64-987396853c1b"
    },
    {
        "raw": "Predicates:\nExempt(x) | Candidate(x) | Certificate(x) | Valid(x) | MinimumScore(x) | CertificateIssuer(x) | English(x) | TOEFLITP(x) | TOEFLiBT(x) | TOEIC(x) | HighSchoolGraduation(x) | Exam(x) | 2021(x).\n\nExplanation:\nExempt(x): x is exempted.\nCandidate(x): x is a candidate.\nCertificate(x): x has a certificate.\nValid(x): x is valid.\nMinimumScore(x): x meets the minimum score requirement.\nCertificateIssuer(x): x is the issuer of the certificate.\nEnglish(x): x pertains to the English language.\nTOEFLITP(x): x is the TOEFL ITP certificate.\nTOEFLiBT(x): x is the TOEFL iBT certificate.\nTOEIC(x): x is the TOEIC certificate.\nHighSchoolGraduation(x): x is for high school graduation.\nExam(x): x is an exam.\n2021(x): x is for the year 2021.\n\nPremises:\nall x (Candidate(x) & Certificate(x) & Valid(x) & (CertificateIssuer(x) = TOEFLITP(x)) & (MinimumScore(x) >= 450) & (2021(x) & HighSchoolGraduation(x) & Exam(x)) -> Exempt(x)).\nall x (Candidate(x) & Certificate(x) & Valid(x) & (CertificateIssuer(x) = TOEFLiBT(x)) & (MinimumScore(x) >= 45) & (2021(x) & HighSchoolGraduation(x) & Exam(x)) -> Exempt(x)).\n\nConclusion:\n-Exempt(x) | TOEIC(x).",
        "premises": [
            "all x (Candidate(x) & Certificate(x) & Valid(x) & (CertificateIssuer(x) = TOEFLITP(x)) & (MinimumScore(x) >= 450) & (2021(x) & HighSchoolGraduation(x) & Exam(x)) -> Exempt(x)).",
            "all x (Candidate(x) & Certificate(x) & Valid(x) & (CertificateIssuer(x) = TOEFLiBT(x)) & (MinimumScore(x) >= 45) & (2021(x) & HighSchoolGraduation(x) & Exam(x)) -> Exempt(x))."
        ],
        "conclusion": "-Exempt(x) | TOEIC(x).",
        "id": "37218e1b-e898-4531-97ab-8c4128375fe4"
    },
    {
        "raw": "Predicates:\nSubmit(x, y) | ValidCopy(x) | AcademicTranscript(x) | TemporaryCertificate(x) | HighSchoolDiploma(x) | BirthCertificate(x) | PriorityPolicyEvidence(x) | OtherRequirements(x) | CollegeApplication(y) | DuplicateID(x).\n\nExplanation:\nSubmit(x, y): x submits y.\nValidCopy(x): x has a valid copy.\nAcademicTranscript(x): x has an academic transcript.\nTemporaryCertificate(x): x has a temporary high school graduation certificate.\nHighSchoolDiploma(x): x has a high school diploma.\nBirthCertificate(x): x has a birth certificate.\nPriorityPolicyEvidence(x): x has evidence for the priority policy.\nOtherRequirements(x): x meets other requirements.\nCollegeApplication(y): y is a college application.\nDuplicateID(x): x has a duplicate ID.\n\nPremises:\nall x, y (Submit(x, y) -> (ValidCopy(AcademicTranscript(x)) & ValidCopy(TemporaryCertificate(x)) & ValidCopy(HighSchoolDiploma(x)) & ValidCopy(BirthCertificate(x)) & ValidCopy(PriorityPolicyEvidence(x)) & ValidCopy(OtherRequirements(x)))).\nall x (DuplicateID(x) -> CollegeApplication(x)).\n\nConclusion:\n- all x (CollegeApplication(x) -> DuplicateID(x)).",
        "premises": [
            "all x, y (Submit(x, y) -> (ValidCopy(AcademicTranscript(x)) & ValidCopy(TemporaryCertificate(x)) & ValidCopy(HighSchoolDiploma(x)) & ValidCopy(BirthCertificate(x)) & ValidCopy(PriorityPolicyEvidence(x)) & ValidCopy(OtherRequirements(x)))).",
            "all x (DuplicateID(x) -> CollegeApplication(x))."
        ],
        "conclusion": "- all x (CollegeApplication(x) -> DuplicateID(x)).",
        "id": "178253f0-1064-4cc6-bfec-eac6f2325997"
    },
    {
        "raw": "Predicates:\nTransfer(x) | Copyright(x) | RelatedRights(x) | Ownership(x) | MoralRights(x) | Author(x) | Performer(x) | CoOwner(x) | Agree(x) | Detached(x) | UseIndependently(x) | Licensing(x) | Contract(x) | Writing(x) | Information(x) | FullNames(x) | Addresses(x) | Grounds(x) | Price(x) | PaymentMethod(x) | Rights(x) | Obligations(x) | Liabilities(x) | Breach(x) | Performance(x) | Modification(x) | Termination(x) | Cancellation(x) | CivilCode(x).\n\nExplanation:\nTransfer(x): x involves transferring rights.\nCopyright(x): x relates to copyright.\nRelatedRights(x): x relates to related rights.\nOwnership(x): x owns rights.\nMoralRights(x): x has moral rights.\nAuthor(x): x is an author.\nPerformer(x): x is a performer.\nCoOwner(x): x is a co-owner.\nAgree(x): x agrees.\nDetached(x): x has parts that can be detached.\nUseIndependently(x): x can be used independently.\nLicensing(x): x involves licensing.\nContract(x): x involves a contract.\nWriting(x): x must be in writing.\nInformation(x): x contains necessary information.\nFullNames(x): x includes full names.\nAddresses(x): x includes addresses.\nGrounds(x): x includes grounds.\nPrice(x): x includes price.\nPaymentMethod(x): x includes payment method.\nRights(x): x includes rights.\nObligations(x): x includes obligations.\nLiabilities(x): x includes liabilities.\nBreach(x): x involves breach of contract.\nPerformance(x): x involves performance.\nModification(x): x involves modification.\nTermination(x): x involves termination.\nCancellation(x): x involves cancellation.\nCivilCode(x): x relates to the Civil Code.\n\nPremises:\nall x (Transfer(x) -> (Copyright(x) | RelatedRights(x))).\nall x (Author(x) -> ~Transfer(MoralRights(x))).\nall x (Performer(x) -> ~Transfer(MoralRights(x))).\nall x (CoOwner(x) & Detached(x) -> Agree(Transfer(Copyright(x)))).\nall x (Licensing(x) -> Information(Contract(x))).\nall x (Contract(Transfer(Copyright(x))) -> (Writing(x) & FullNames(x) & Addresses(x) & Grounds(x) & Price(x) & PaymentMethod(x) & Rights(x) & Obligations(x) & Liabilities(x))).\nall x (Performance(x) | Modification(x) | Termination(x) | Cancellation(x) -> CivilCode(x)).\n\nConclusion:\nall x (Transfer(Copyright(x))).\nall x (Transfer(RelatedRights(x))).",
        "premises": [
            "all x (Transfer(x) -> (Copyright(x) | RelatedRights(x))).",
            "all x (Author(x) -> ~Transfer(MoralRights(x))).",
            "all x (Performer(x) -> ~Transfer(MoralRights(x))).",
            "all x (CoOwner(x) & Detached(x) -> Agree(Transfer(Copyright(x)))).",
            "all x (Licensing(x) -> Information(Contract(x))).",
            "all x (Contract(Transfer(Copyright(x))) -> (Writing(x) & FullNames(x) & Addresses(x) & Grounds(x) & Price(x) & PaymentMethod(x) & Rights(x) & Obligations(x) & Liabilities(x))).",
            "all x (Performance(x) | Modification(x) | Termination(x) | Cancellation(x) -> CivilCode(x))."
        ],
        "conclusion": "all x (Transfer(RelatedRights(x))).",
        "id": "808a7386-db06-4da8-b618-f0eea5a09f2d"
    },
    {
        "raw": "Predicates:\nPupil(x) | Student(x) | Household(x) | Reside(x) | Locality(x) | Loan(x) | MeetCriteria(x) | Borrow(x) | Article(x) | AdmissionNotice(x) | AdmissionCertificate(x) | SchoolCertification(x) | Study(x) | Sanctioned(x) | Gambling(x) | Smoking(x) | Theft(x) | Smuggling(x) | CollegeApplication(x) | Photocopy(x) | BorrowMoney(x).\n\nExplanation:\nPupil(x): x is a pupil.\nStudent(x): x is a student.\nHousehold(x): x belongs to a household.\nReside(x): x resides in.\nLocality(x): x is in a locality.\nLoan(x): x is a loan.\nMeetCriteria(x): x meets the criteria.\nBorrow(x): x borrows.\nArticle(x): x is an article.\nAdmissionNotice(x): x has an admission notice.\nAdmissionCertificate(x): x has an admission certificate.\nSchoolCertification(x): x has school certification.\nStudy(x): x is studying.\nSanctioned(x): x is sanctioned.\nGambling(x): x is involved in gambling.\nSmoking(x): x is involved in smoking.\nTheft(x): x is involved in theft.\nSmuggling(x): x is involved in smuggling.\nCollegeApplication(x): x is a college application.\nPhotocopy(x): x is a photocopy.\nBorrowMoney(x): x borrows money.\n\nPremises:\nall x (Pupil(x) & Student(x) & Household(x) & Reside(x) & Locality(x) & Loan(x) & MeetCriteria(x) -> Borrow(x)).\nall x (Article(x) & Pupil(x) & Student(x) & Household(x) & Reside(x) & Locality(x) & MeetCriteria(x) -> Borrow(x)).\nall x (AdmissionNotice(x) & SchoolCertification(x) -> Study(x) & ~Sanctioned(x) & ~Gambling(x) & ~Smoking(x) & ~Theft(x) & ~Smuggling(x)).\n-Photocopy(x) | CollegeApplication(x).\nall x (CollegeApplication(x) & Photocopy(x) -> BorrowMoney(x)).\n\nConclusion:\nall x (Photocopy(x) & CollegeApplication(x) -> BorrowMoney(x)).",
        "premises": [
            "all x (Pupil(x) & Student(x) & Household(x) & Reside(x) & Locality(x) & Loan(x) & MeetCriteria(x) -> Borrow(x)).",
            "all x (Article(x) & Pupil(x) & Student(x) & Household(x) & Reside(x) & Locality(x) & MeetCriteria(x) -> Borrow(x)).",
            "all x (AdmissionNotice(x) & SchoolCertification(x) -> Study(x) & ~Sanctioned(x) & ~Gambling(x) & ~Smoking(x) & ~Theft(x) & ~Smuggling(x)).",
            "-Photocopy(x) | CollegeApplication(x).",
            "all x (CollegeApplication(x) & Photocopy(x) -> BorrowMoney(x))."
        ],
        "conclusion": "all x (Photocopy(x) & CollegeApplication(x) -> BorrowMoney(x)).",
        "id": "b96214fc-dfb4-46d2-98d8-bea1721ab331"
    },
    {
        "raw": "Predicates:\nLease(x) | Mortgage(x) | Pledge(x) | DevelopmentBank(x) | Asset(x) | RightToUse(x) | Own(x) | StateOwned(x) | SingleMemberLLC(x).\n\nExplanation:\nLease(x): x engages in leasing assets.\nMortgage(x): x engages in mortgaging assets.\nPledge(x): x engages in pledging assets.\nDevelopmentBank(x): x is the Development Bank.\nAsset(x): x is an asset.\nRightToUse(x): x has the right to use assets.\nOwn(x): x owns assets.\nStateOwned(x): x is wholly state-owned.\nSingleMemberLLC(x): x is a single-member limited liability company.\n\nPremises:\nall x (DevelopmentBank(x) -> (Lease(x) | Mortgage(x) | Pledge(x))).\nLease(DevelopmentBank(x)).\nall x (DevelopmentBank(x) & RightToUse(x) & Own(x) & StateOwned(x) & SingleMemberLLC(x)).\n\nConclusion:\nLease(DevelopmentBank(x)).",
        "premises": [
            "all x (DevelopmentBank(x) -> (Lease(x) | Mortgage(x) | Pledge(x))).",
            "Lease(DevelopmentBank(x)).",
            "all x (DevelopmentBank(x) & RightToUse(x) & Own(x) & StateOwned(x) & SingleMemberLLC(x))."
        ],
        "conclusion": "Lease(DevelopmentBank(x)).",
        "id": "26fef828-fd26-4854-bc97-370091508c7e"
    },
    {
        "raw": "Predicates:\nAuthorize(x, y) | CurrentAccountHolder(x) | AnotherPerson(y) | Use(x, y) | PaymentAccountHolder(x) | PaymentAccount(y) | Writing(x) | ComplyWithLaw(x) | Send(x, y, z) | LetterOfAuthorization(x) | Registration(x) | SpecimenSignature(x) | CopyOfID(x) | Certified(x) | Original(x) | Comparison(x) | BankAccount(x) | Law(x).\n\nExplanation:\nAuthorize(x, y): x authorizes y to use an account.\nCurrentAccountHolder(x): x is a current account holder.\nAnotherPerson(y): y is another person.\nUse(x, y): y uses x's account.\nPaymentAccountHolder(x): x is a payment account holder.\nPaymentAccount(y): y is a payment account.\nWriting(x): x is in writing.\nComplyWithLaw(x): x complies with the law.\nSend(x, y, z): x sends y to z.\nLetterOfAuthorization(x): x is a letter of authorization.\nRegistration(x): x is a registration of specimen signature.\nSpecimenSignature(x): x is a specimen signature.\nCopyOfID(x): x is a copy of ID.\nCertified(x): x is certified.\nOriginal(x): x is an original.\nComparison(x): x is for comparison.\nBankAccount(x): x is a bank account.\nLaw(x): x is the law.\n\nPremises:\nall x (CurrentAccountHolder(x) -> Authorize(x, AnotherPerson)).\nall x (PaymentAccountHolder(x) -> Authorize(x, AnotherPerson)).\nall x (Authorize(x, y) -> (Writing(x) & ComplyWithLaw(x))).\nall x (Authorize(x, y) -> Send(LetterOfAuthorization, Registration, CopyOfID)).\nall x (Certified(CopyOfID) -> Original(CopyOfID)).\nall x (Original(CopyOfID) -> Comparison(CopyOfID)).\nall x (BankAccount(x) -> Law(x)).\n\nConclusion:\nall x (BankAccount(x) & Authorize(x, AnotherPerson)).",
        "premises": [
            "all x (CurrentAccountHolder(x) -> Authorize(x, AnotherPerson)).",
            "all x (PaymentAccountHolder(x) -> Authorize(x, AnotherPerson)).",
            "all x (Authorize(x, y) -> (Writing(x) & ComplyWithLaw(x))).",
            "all x (Authorize(x, y) -> Send(LetterOfAuthorization, Registration, CopyOfID)).",
            "all x (Certified(CopyOfID) -> Original(CopyOfID)).",
            "all x (Original(CopyOfID) -> Comparison(CopyOfID)).",
            "all x (BankAccount(x) -> Law(x))."
        ],
        "conclusion": "all x (BankAccount(x) & Authorize(x, AnotherPerson)).",
        "id": "35a10650-e894-4ed9-a7eb-937ad9cf7339"
    },
    {
        "raw": "Predicates:\nOlder(x) | LegalCapacity(x) | Minor(x) | LostCapacity(x) | LimitedCapacity(x) | OpenAccount(x) | Representative(x) | Guardian(x) | CognitionControl(x) | BehaviorControl(x) | UseGuardian(x) | ATMCard(x) | Under18(x).\n\nExplanation:\nOlder(x): x is aged 18 years or older.\nLegalCapacity(x): x has full legal capacity.\nMinor(x): x is a minor.\nLostCapacity(x): x has lost legal capacity.\nLimitedCapacity(x): x has limited legal capacity.\nOpenAccount(x): x can open a payment account.\nRepresentative(x): x is a legal representative.\nGuardian(x): x is a guardian.\nCognitionControl(x): x has limited cognition.\nBehaviorControl(x): x has limited behavior control.\nUseGuardian(x): x uses a guardian.\nATMCard(x): x can have an ATM card.\nUnder18(x): x is under 18 years old.\n\nPremises:\nall x (Older(x) & LegalCapacity(x)).\nall x (Minor(x) & -LostCapacity(x) & -LimitedCapacity(x) -> OpenAccount(x)).\nall x (Older(x) & -LostCapacity(x) & -LimitedCapacity(x) -> OpenAccount(x)).\nall x (Minor(x) | LimitedCapacity(x) | LostCapacity(x) -> Representative(x) & OpenAccount(x)).\nall x (CognitionControl(x) & BehaviorControl(x) -> UseGuardian(x) & OpenAccount(x)).\n\nConclusion:\nall x (Under18(x) -> ATMCard(x)).",
        "premises": [
            "all x (Older(x) & LegalCapacity(x)).",
            "all x (Minor(x) & -LostCapacity(x) & -LimitedCapacity(x) -> OpenAccount(x)).",
            "all x (Older(x) & -LostCapacity(x) & -LimitedCapacity(x) -> OpenAccount(x)).",
            "all x (Minor(x) | LimitedCapacity(x) | LostCapacity(x) -> Representative(x) & OpenAccount(x)).",
            "all x (CognitionControl(x) & BehaviorControl(x) -> UseGuardian(x) & OpenAccount(x))."
        ],
        "conclusion": "all x (Under18(x) -> ATMCard(x)).",
        "id": "4f908e7a-761c-42f1-8ea3-d4b300644b0a"
    },
    {
        "raw": "Predicates:\nCashWithdrawal(x) | CardTransaction(x) | TransactionCurrency(x) | PaymentCurrency(x) | Conversion(x) | ExchangeRate(x) | Agreement(x) | Cardholder(x) | CardIssuingOrg(x) | ForeignCurrency(x) | VietnamDong(x) | StateBankRegulations(x) | Territory(x) | OutsideTerritory(x).\n\nExplanation:\nCashWithdrawal(x): x performs cash withdrawal transactions by cards.\nCardTransaction(x): x engages in card transactions.\nTransactionCurrency(x): x transacts in a specific currency.\nPaymentCurrency(x): x uses a specific currency for payment.\nConversion(x): x converts between currencies.\nExchangeRate(x): x agrees upon an exchange rate.\nAgreement(x): x reaches an agreement.\nCardholder(x): x is a cardholder.\nCardIssuingOrg(x): x is a card-issuing organization.\nForeignCurrency(x): x involves a foreign currency.\nVietnamDong(x): x uses Vietnam dong currency.\nStateBankRegulations(x): x follows State Bank regulations.\nTerritory(x): x is within the territory of Vietnam.\nOutsideTerritory(x): x is outside the territory of Vietnam.\n\nPremises:\nall x ((Territory(x) & CashWithdrawal(x)) -> TransactionCurrency(x, VietnamDong)).\nall x ((Territory(x) & CardTransaction(x)) -> (TransactionCurrency(x, VietnamDong) & PaymentCurrency(x, VietnamDong))).\nall x ((Territory(x) & Conversion(x) & ForeignCurrency(x)) -> Agreement(x) & StateBankRegulations(x)).\nall x ((OutsideTerritory(x) & CardTransaction(x)) -> PaymentCurrency(x, VietnamDong) & Agreement(x) & StateBankRegulations(x)).\nall x ((OutsideTerritory(x) & CardTransaction(x) & Cardholder(x)) -> PaymentCurrency(x, VietnamDong) & Agreement(x) & StateBankRegulations(x) & CardIssuingOrg(x)).\n\nConclusion:\nPossibleForeignExchange(x).",
        "premises": [
            "all x ((Territory(x) & CashWithdrawal(x)) -> TransactionCurrency(x, VietnamDong)).",
            "all x ((Territory(x) & CardTransaction(x)) -> (TransactionCurrency(x, VietnamDong) & PaymentCurrency(x, VietnamDong))).",
            "all x ((Territory(x) & Conversion(x) & ForeignCurrency(x)) -> Agreement(x) & StateBankRegulations(x)).",
            "all x ((OutsideTerritory(x) & CardTransaction(x)) -> PaymentCurrency(x, VietnamDong) & Agreement(x) & StateBankRegulations(x)).",
            "all x ((OutsideTerritory(x) & CardTransaction(x) & Cardholder(x)) -> PaymentCurrency(x, VietnamDong) & Agreement(x) & StateBankRegulations(x) & CardIssuingOrg(x))."
        ],
        "conclusion": "PossibleForeignExchange(x).",
        "id": "95fd7816-1864-4501-803d-d10677317dd7"
    },
    {
        "raw": "Predicates:\nProvideLoan(x, y) | BusinessInvestment(x) | ProhibitedBusinessLine(x) | PayCost(x) | MeetFinancialNeeds(x) | PurchaseGoodsServices(x) | BuyGoldBars(x) | BankLoan(x) | Gold(x).\n\nExplanation:\nProvideLoan(x, y): x provides a loan to y.\nBusinessInvestment(x): x is for business investment activities.\nProhibitedBusinessLine(x): x is a business line prohibited by laws.\nPayCost(x): x is for paying costs.\nMeetFinancialNeeds(x): x is for meeting financial needs of transactions.\nPurchaseGoodsServices(x): x is for purchasing goods and services.\nBuyGoldBars(x): x is for buying gold bars.\nBankLoan(x): x is a bank loan.\nGold(x): x is gold.\n\nPremises:\nall x (ProvideLoan(BankLoan(x), y) -> (BusinessInvestment(y) | PayCost(y) | MeetFinancialNeeds(y) | PurchaseGoodsServices(y) | BuyGoldBars(y))).\nProhibitedBusinessLine(BusinessInvestment(x)).\nPayCost(x) | MeetFinancialNeeds(x).\nPurchaseGoodsServices(x) -> ProhibitedBusinessLine(x).\n- BuyGoldBars(x).\n- ProvideLoan(BankLoan(x), y).\n\nConclusion:\n- BuyGoldBars(BankLoan(x)).",
        "premises": [
            "all x (ProvideLoan(BankLoan(x), y) -> (BusinessInvestment(y) | PayCost(y) | MeetFinancialNeeds(y) | PurchaseGoodsServices(y) | BuyGoldBars(y))).",
            "ProhibitedBusinessLine(BusinessInvestment(x)).",
            "PayCost(x) | MeetFinancialNeeds(x).",
            "PurchaseGoodsServices(x) -> ProhibitedBusinessLine(x).",
            "- BuyGoldBars(x).",
            "- ProvideLoan(BankLoan(x), y)."
        ],
        "conclusion": "- BuyGoldBars(BankLoan(x)).",
        "id": "e6b27f8f-63a7-4a1d-a95b-0b8b5244f3a1"
    },
    {
        "raw": "Predicates:\nMassGatherings(x) | StopMeetings(x) | GatherOutside(x) | MaintainDistance(x) | StopRituals(x) | StopActivities(x) | SuspendOperation(x) | CloseEstablishments(x) | RestrictMovement(x) | DirectRestriction(x) | SuspendTransportation(x) | Work(x) | Covid19Pandemic(x) | Bank(x) | MinistryOfTransport(x) | InfectedProvinces(x) | Hanoi(x) | HoChiMinhCity(x) | Nationwide(x) | PublicTransportation(x) | Vehicles(x) | Goods(x).\n\nExplanation:\nMassGatherings(x): x involves mass gatherings.\nStopMeetings(x): x stops meetings.\nGatherOutside(x): x gathers outside.\nMaintainDistance(x): x maintains a minimum distance between people.\nStopRituals(x): x stops religious rituals.\nStopActivities(x): x stops cultural, sport, and entertainment activities.\nSuspendOperation(x): x suspends the operation of establishments.\nCloseEstablishments(x): x closes establishments.\nRestrictMovement(x): x restricts the movement of people.\nDirectRestriction(x): x directs restrictions on transportation.\nSuspendTransportation(x): x suspends transportation activities.\nWork(x): x works.\nCovid19Pandemic(x): x is during the Covid-19 pandemic.\nBank(x): x is a bank.\nMinistryOfTransport(x): x is the Ministry of Transport.\nInfectedProvinces(x): x are infected provinces.\nHanoi(x): x is Hanoi.\nHoChiMinhCity(x): x is Ho Chi Minh City.\nNationwide(x): x is nationwide.\nPublicTransportation(x): x involves public transportation.\nVehicles(x): x are vehicles.\nGoods(x): x are goods.\n\nPremises:\nStopMeetings(x).\nGatherOutside(x).\nall x (MaintainDistance(x) -> PublicPlaces(x)).\nStopRituals(x).\nStopActivities(x).\nSuspendOperation(x).\nCloseEstablishments(x).\nRestrictMovement(x).\nDirectRestriction(x).\nSuspendTransportation(x).\nall x (Covid19Pandemic(x) -> Bank(x)).\nall x (DirectRestriction(x) -> (Hanoi(x) & HoChiMinhCity(x) & Nationwide(x))).\nall x (SuspendTransportation(x) -> (PublicTransportation(x) & Vehicles(x) & Goods(x))).\n\nConclusion:\nall x (Bank(x) & Covid19Pandemic(x) -> Work(x)).",
        "premises": [
            "StopMeetings(x).",
            "GatherOutside(x).",
            "all x (MaintainDistance(x) -> PublicPlaces(x)).",
            "StopRituals(x).",
            "StopActivities(x).",
            "SuspendOperation(x).",
            "CloseEstablishments(x).",
            "RestrictMovement(x).",
            "DirectRestriction(x).",
            "SuspendTransportation(x).",
            "all x (Covid19Pandemic(x) -> Bank(x)).",
            "all x (DirectRestriction(x) -> (Hanoi(x) & HoChiMinhCity(x) & Nationwide(x))).",
            "all x (SuspendTransportation(x) -> (PublicTransportation(x) & Vehicles(x) & Goods(x)))."
        ],
        "conclusion": "all x (Bank(x) & Covid19Pandemic(x) -> Work(x)).",
        "id": "230258b3-21a1-4dd3-a5e7-14305eb7b836"
    },
    {
        "raw": "Predicates:\nOpenCurrentAccount(x) | Sufficient(x) | Legitimate(x) | Valid(x) | EnterContract(x) | MeetInPerson(x) | VerifyInfo(x) | AgentBank(x) | IntermediaryBank(x) | Identify(x) | Responsible(x) | AccountHolder(x) | Individual(x) | Guardian(x) | LegalRep(x) | LivingAbroad(x) | ForeignCountry(x).\n\nExplanation:\nOpenCurrentAccount(x): x opens a current account.\nSufficient(x): x has sufficient documents.\nLegitimate(x): x has legitimate documents.\nValid(x): x has valid documents.\nEnterContract(x): x enters into a contract.\nMeetInPerson(x): x meets in person.\nVerifyInfo(x): x verifies customer information.\nAgentBank(x): x is an agent bank.\nIntermediaryBank(x): x is an intermediary bank.\nIdentify(x): x is identified.\nResponsible(x): x is responsible.\nAccountHolder(x): x is the account holder.\nIndividual(x): x is an individual.\nGuardian(x): x is a guardian.\nLegalRep(x): x is a legal representative.\nLivingAbroad(x): x is living abroad.\nForeignCountry(x): x is in a foreign country.\n\nPremises:\nall x ((Sufficient(x) & Legitimate(x) & Valid(x)) -> EnterContract(x)).\nall x ((Individual(x) & LivingAbroad(x)) -> ~MeetInPerson(x)).\nall x ((Individual(x) & LivingAbroad(x)) -> (VerifyInfo(x) & Identify(x) & Responsible(x))).\nall x ((Individual(x) & LivingAbroad(x)) -> (VerifyInfo(x) & Identify(x) & Responsible(x))).\nall x ((AgentBank(x) | IntermediaryBank(x)) -> Identify(x)).\nall x ((AgentBank(x) | IntermediaryBank(x)) -> Responsible(x)).\nall x ((Individual(x) & LivingAbroad(x)) -> OpenCurrentAccount(x)).\n\nConclusion:\nExist x (Individual(x) & LivingAbroad(x) & OpenCurrentAccount(x)).",
        "premises": [
            "all x ((Sufficient(x) & Legitimate(x) & Valid(x)) -> EnterContract(x)).",
            "all x ((Individual(x) & LivingAbroad(x)) -> ~MeetInPerson(x)).",
            "all x ((Individual(x) & LivingAbroad(x)) -> (VerifyInfo(x) & Identify(x) & Responsible(x))).",
            "all x ((Individual(x) & LivingAbroad(x)) -> (VerifyInfo(x) & Identify(x) & Responsible(x))).",
            "all x ((AgentBank(x) | IntermediaryBank(x)) -> Identify(x)).",
            "all x ((AgentBank(x) | IntermediaryBank(x)) -> Responsible(x)).",
            "all x ((Individual(x) & LivingAbroad(x)) -> OpenCurrentAccount(x))."
        ],
        "conclusion": "Exist x (Individual(x) & LivingAbroad(x) & OpenCurrentAccount(x)).",
        "id": "493689fe-2bee-4b7e-b5a3-836d0d4016d6"
    },
    {
        "raw": "Predicates:\nOpenAccount(x) | ApplicationForm(x) | UseForm(x) | IDCard(x) | IDPaper(x) | Passport(x) | BirthCertificate(x) | EntryVisa(x) | ExemptionDocument(x) | VietnameseCitizen(x) | Foreigner(x) | Bank(x) | Branch(x) | CheckingAccount(x) | PaymentServiceProvider(x) | Circular(x) | Governor(x) | StateBank(x) | Guidelines(x).\n\nExplanation:\nOpenAccount(x): x opens a bank account.\nApplicationForm(x): x fills out an application form.\nUseForm(x): x uses a specified form.\nIDCard(x): x has an ID card.\nIDPaper(x): x has an ID paper.\nPassport(x): x has a passport.\nBirthCertificate(x): x has a birth certificate.\nEntryVisa(x): x has an entry visa.\nExemptionDocument(x): x has a document proving exemption from entry visa.\nVietnameseCitizen(x): x is a Vietnamese citizen.\nForeigner(x): x is a foreigner.\nBank(x): x is a bank.\nBranch(x): x is a branch.\nCheckingAccount(x): x has a checking account.\nPaymentServiceProvider(x): x is a payment service provider.\nCircular(x): x is a circular.\nGovernor(x): x is the Governor.\nStateBank(x): x is the State Bank.\nGuidelines(x): x are guidelines.\n\nPremises:\nall x ((ApplicationForm(x) & UseForm(x)) -> OpenAccount(x)).\nIDCard(x) | IDPaper(x) | Passport(x) | (BirthCertificate(x) & VietnameseCitizen(x)) | (EntryVisa(x) & Foreigner(x)) | ExemptionDocument(x).\nall x ((Bank(x) | Branch(x)) & CheckingAccount(x) & PaymentServiceProvider(x) -> Guidelines(x)).\nCircular(x) & Governor(x) -> Guidelines(x).\n\nConclusion:\nall x (Foreigner(x) -> OpenAccount(x)).\n",
        "premises": [
            "all x ((ApplicationForm(x) & UseForm(x)) -> OpenAccount(x)).",
            "IDCard(x) | IDPaper(x) | Passport(x) | (BirthCertificate(x) & VietnameseCitizen(x)) | (EntryVisa(x) & Foreigner(x)) | ExemptionDocument(x).",
            "all x ((Bank(x) | Branch(x)) & CheckingAccount(x) & PaymentServiceProvider(x) -> Guidelines(x)).",
            "Circular(x) & Governor(x) -> Guidelines(x)."
        ],
        "conclusion": "all x (Foreigner(x) -> OpenAccount(x)).",
        "id": "6b572955-8836-4739-b856-aa1e912ff92f"
    },
    {
        "raw": "Predicates:\nProperty(x) | RealEstate(x) | MovableProperty(x) | ExistingProperty(x) | FutureProperty(x) | ValuablePapers(x) | ForeignCurrency(x) | GovernmentBonds(x) | CorporateBonds(x) | PromissoryNotes(x) | Shares(x) | Stocks(x) | Asset(x).\n\nExplanation:\nProperty(x): x is property.\nRealEstate(x): x is real estate.\nMovableProperty(x): x is movable property.\nExistingProperty(x): x is existing property.\nFutureProperty(x): x is future property.\nValuablePapers(x): x is valuable papers.\nForeignCurrency(x): x is in foreign currency.\nGovernmentBonds(x): x is government bonds.\nCorporateBonds(x): x is corporate bonds.\nPromissoryNotes(x): x is promissory notes.\nShares(x): x is shares.\nStocks(x): x is stocks.\nAsset(x): x is an asset.\n\nPremises:\nall x (Property(x) -> (Objects(x) | Money(x) | ValuablePapers(x) | PropertyRights(x))).\nall x (Property(x) -> (RealEstate(x) | MovableProperty(x))).\nall x (ValuablePapers(x) -> ForeignCurrency(x)).\nall x (ValuablePapers(x) -> (GovernmentBonds(x) | CorporateBonds(x) | PromissoryNotes(x) | Shares(x))).\n\nConclusion:\nall x (Stocks(x) -> Asset(x)).",
        "premises": [
            "all x (Property(x) -> (Objects(x) | Money(x) | ValuablePapers(x) | PropertyRights(x))).",
            "all x (Property(x) -> (RealEstate(x) | MovableProperty(x))).",
            "all x (ValuablePapers(x) -> ForeignCurrency(x)).",
            "all x (ValuablePapers(x) -> (GovernmentBonds(x) | CorporateBonds(x) | PromissoryNotes(x) | Shares(x)))."
        ],
        "conclusion": "all x (Stocks(x) -> Asset(x)).",
        "id": "ab0f849c-7637-4a9b-81b8-35140324fbc0"
    },
    {
        "raw": "Predicates:\nTake(x, y) | PayOut(x, y) | SavingsDeposit(x) | Location(x) | Legal(x) | TransactionLocation(x) | ElectronicMeans(x) | Passbook(y) | Receive(x, y) | Issue(x, y) | MultipleLocations(x) | EnsureSafe(x) | Accurate(x) | Safe(x) | Depositor(y) | OperationSafe(x) | CreditInstitution(x).\n\nExplanation:\nTake(x, y): x takes savings deposit of y.\nPayOut(x, y): x pays out savings deposit of y.\nSavingsDeposit(x): x is a savings deposit.\nLocation(x): x is a location.\nLegal(x): x is legal.\nTransactionLocation(x): x is a transaction location.\nElectronicMeans(x): x is via electronic means.\nPassbook(y): y is a passbook.\nReceive(x, y): x receives savings deposit of y.\nIssue(x, y): x issues passbook y.\nMultipleLocations(x): x has multiple transaction locations.\nEnsureSafe(x): x ensures safety.\nAccurate(x): x is accurate.\nSafe(x): x is safe.\nDepositor(y): y is a depositor.\nOperationSafe(x): x is safe in operation.\nCreditInstitution(x): x is a credit institution.\n\nPremises:\nall x (Take(CreditInstitution(x), SavingsDeposit(y)) -> (Location(y) & Legal(x) & TransactionLocation(x) & ElectronicMeans(x))).\nall x (Receive(CreditInstitution(x), Passbook(y)) -> (Location(x) | TransactionLocation(x))).\nall x (MultipleLocations(CreditInstitution(x)) -> (Accurate(x) & Safe(Depositor(y)) & OperationSafe(x))).\n\nConclusion:\nReceive(CreditInstitution(x), Passbook(y)) & Issue(CreditInstitution(x), Passbook(y)).",
        "premises": [
            "all x (Take(CreditInstitution(x), SavingsDeposit(y)) -> (Location(y) & Legal(x) & TransactionLocation(x) & ElectronicMeans(x))).",
            "all x (Receive(CreditInstitution(x), Passbook(y)) -> (Location(x) | TransactionLocation(x))).",
            "all x (MultipleLocations(CreditInstitution(x)) -> (Accurate(x) & Safe(Depositor(y)) & OperationSafe(x)))."
        ],
        "conclusion": "Receive(CreditInstitution(x), Passbook(y)) & Issue(CreditInstitution(x), Passbook(y)).",
        "id": "d6b119c0-4773-4b19-88ad-b9de5f9af16b"
    },
    {
        "raw": "Predicates:\nClientInfo(x) | KeepConfidential(x) | Provide(x) | Access(x) | NotAllowed(x) | VerificationInfo(x) | Accessing(x) | SecretKeys(x) | BiometricData(x) | Passwords(x) | VerificationData(x) | Approved(x) | RegulatoryAuthorities(x) | Request(x) | RightPurposes(x) | Contents(x) | Scope(x) | Competence(x) | Responsibility(x) | Use(x) | ThirdParty(x) | Consent(x) | Retain(x) | Preserve(x) | Cases(x) | Provided(x) | Applicant(x) | Cases(x) | RightRequest(x) | Specified(x) | Laws(x) | Resolutions(x) | Approval(x) | LawfulRepresentatives(x) | Leak(x) | Banker(x).\n\nExplanation:\nClientInfo(x): x is client information.\nKeepConfidential(x): x keeps client information confidential.\nProvide(x): x provides client information.\nAccess(x): x accesses banking services.\nNotAllowed(x): x is not allowed to provide client verification information.\nVerificationInfo(x): x has verification information.\nAccessing(x): x is accessing banking services.\nSecretKeys(x): x has secret keys.\nBiometricData(x): x has biometric data.\nPasswords(x): x has passwords.\nVerificationData(x): x has verification data.\nApproved(x): x is approved.\nRegulatoryAuthorities(x): x are regulatory authorities.\nRequest(x): x requests client information.\nRightPurposes(x): x requests for right purposes.\nContents(x): x requests for specific contents.\nScope(x): x requests within a certain scope.\nCompetence(x): x requests within their competence.\nResponsibility(x): x takes responsibility.\nUse(x): x uses client information.\nThirdParty(x): x provides client information to a third party.\nConsent(x): x provides client information with client's consent.\nRetain(x): x retains client information.\nPreserve(x): x preserves client information.\nCases(x): x involves cases of provision of client information.\nProvided(x): x is provided with client information.\nApplicant(x): x is the applicant.\nRightRequest(x): x has the right to request client information.\nSpecified(x): x is specified.\nLaws(x): x involves laws.\nResolutions(x): x involves resolutions.\nApproval(x): x has approval.\nLawfulRepresentatives(x): x are lawful representatives.\nLeak(x): x is information leakage.\nBanker(x): x is a banker.\n\nPremises:\nall x (ClientInfo(x) & (KeepConfidential(x) & Provide(x)) -> (Access(x) & NotAllowed(x))).\nall x (Accessing(x) & VerificationInfo(x) -> NotAllowed(x)).\nall x (Access(x) -> (SecretKeys(x) | BiometricData(x) | Passwords(x) | VerificationData(x))).\nall x (VerificationInfo(x) & ~Approved(x) -> ~Provide(x)).\nall x (RegulatoryAuthorities(x) & Request(x) -> (RightPurposes(x) & Contents(x) & Scope(x) & Competence(x))).\nall x (RegulatoryAuthorities(x) & Use(x) -> (Responsibility(x) & ThirdParty(x) & Consent(x))).\nall x (RegulatoryAuthorities(x) & Use(x) & ~Consent(x) -> ~Provide(x)).\nall x (Applicant(x) -> (Retain(x) & Preserve(x))).\nall x (Cases(x) & Provided(x) -> (Request(x) & RightRequest(x))).\nall x (RightRequest(x) -> (Specified(x) & Laws(x) & Resolutions(x) & Approval(x))).\nall x (Approval(x) -> (Laws(x) & Resolutions(x))).\nall x (Approval(x) -> (Approval(x) & LawfulRepresentatives(x))).\n\nConclusion:\n~(Leak(x) & Banker(x)).",
        "premises": [
            "all x (ClientInfo(x) & (KeepConfidential(x) & Provide(x)) -> (Access(x) & NotAllowed(x))).",
            "all x (Accessing(x) & VerificationInfo(x) -> NotAllowed(x)).",
            "all x (Access(x) -> (SecretKeys(x) | BiometricData(x) | Passwords(x) | VerificationData(x))).",
            "all x (VerificationInfo(x) & ~Approved(x) -> ~Provide(x)).",
            "all x (RegulatoryAuthorities(x) & Request(x) -> (RightPurposes(x) & Contents(x) & Scope(x) & Competence(x))).",
            "all x (RegulatoryAuthorities(x) & Use(x) -> (Responsibility(x) & ThirdParty(x) & Consent(x))).",
            "all x (RegulatoryAuthorities(x) & Use(x) & ~Consent(x) -> ~Provide(x)).",
            "all x (Applicant(x) -> (Retain(x) & Preserve(x))).",
            "all x (Cases(x) & Provided(x) -> (Request(x) & RightRequest(x))).",
            "all x (RightRequest(x) -> (Specified(x) & Laws(x) & Resolutions(x) & Approval(x))).",
            "all x (Approval(x) -> (Laws(x) & Resolutions(x))).",
            "all x (Approval(x) -> (Approval(x) & LawfulRepresentatives(x)))."
        ],
        "conclusion": "~(Leak(x) & Banker(x)).",
        "id": "eff43c90-3eb3-4871-a6c1-c043c45a8fc2"
    },
    {
        "raw": "Predicates:\nGem(x) | Diamond(x) | Ruby(x) | Emerald(x) | Sapphire(x) | Pearl(x) | PreciousMetal(x) | Silver(x) | Platinum(x) | FineArt(x) | Jewelry(x) | Cash(x) | ForeignCurrency(x) | VietnamDong(x) | CustomDeclaration(x) | CustomsFees(x) | Value(x) | StateBankRegulation(x) | Bring(x) | Foreigner(x) | Vietnam(x).\n\nExplanation:\nGem(x): x is a gem.\nDiamond(x): x is a diamond.\nRuby(x): x is a ruby.\nEmerald(x): x is an emerald.\nSapphire(x): x is a sapphire.\nPearl(x): x is a pearl.\nPreciousMetal(x): x is a precious metal.\nSilver(x): x is silver.\nPlatinum(x): x is platinum.\nFineArt(x): x is a fine art item.\nJewelry(x): x is jewelry.\nCash(x): x is cash.\nForeignCurrency(x): x is foreign currency.\nVietnamDong(x): x is Vietnam Dong.\nCustomDeclaration(x): x requires custom declaration.\nCustomsFees(x): x pays customs fees.\nValue(x): x has a certain value.\nStateBankRegulation(x): x is regulated by the State Bank of Vietnam.\nBring(x): x brings something.\nForeigner(x): x is a foreigner.\nVietnam(x): x is in Vietnam.\n\nPremises:\nall x (Gem(x) -> (Diamond(x) | Ruby(x) | Emerald(x) | Sapphire(x) | Pearl(x))).\nall x (PreciousMetal(x) -> (Silver(x) | Platinum(x) | FineArt(x) | Jewelry(x))).\nall x (CustomDeclaration(x) -> (Cash(x) & Gem(x))).\nall x (Value(x) -> StateBankRegulation(x)).\nForeigner(x).\nDiamond(x).\n\nConclusion:\nall x (Bring(x) & Diamond(x) & Foreigner(x) -> Vietnam(x)).",
        "premises": [
            "all x (Gem(x) -> (Diamond(x) | Ruby(x) | Emerald(x) | Sapphire(x) | Pearl(x))).",
            "all x (PreciousMetal(x) -> (Silver(x) | Platinum(x) | FineArt(x) | Jewelry(x))).",
            "all x (CustomDeclaration(x) -> (Cash(x) & Gem(x))).",
            "all x (Value(x) -> StateBankRegulation(x)).",
            "Foreigner(x).",
            "Diamond(x)."
        ],
        "conclusion": "all x (Bring(x) & Diamond(x) & Foreigner(x) -> Vietnam(x)).",
        "id": "45c18845-5024-4d6a-a857-fa844c908a18"
    },
    {
        "raw": "Predicates:\nVisit(x) | Present(x, y) | IdentityProof(x) | Joint(x) | SavingDeposit(x) | LegalRepresentative(x) | Documents(x) | LegalStatus(x) | Delegates(x) | Depositors(x) | IDCard(x) | CitizenIdentityCard(x) | Passport(x) | BirthCertificate(x) | Under14(x).\n\nExplanation:\nVisit(x): x visits transaction offices.\nPresent(x, y): x presents y.\nIdentityProof(x): x has identity proof.\nJoint(x): x is a joint savings deposit.\nSavingDeposit(x): x makes a savings deposit.\nLegalRepresentative(x): x is a legal representative.\nDocuments(x): x has documents.\nLegalStatus(x): x has legal representation status.\nDelegates(x): x is a legal delegate.\nDepositors(x): x are depositors.\nIDCard(x): x has an ID card.\nCitizenIdentityCard(x): x has a citizen identity card.\nPassport(x): x has a passport.\nBirthCertificate(x): x has a birth certificate.\nUnder14(x): x is under 14 years of age.\n\nPremises:\nall x all y ((SavingDeposit(x) & Depositors(y) & Joint(x)) -> Present(y, IdentityProof(y))).\nall x all y ((SavingDeposit(x) & LegalRepresentative(y)) -> (Present(y, Documents(y)) & Present(y, IdentityProof(y)) & Present(Depositors(y), IdentityProof(Depositors(y))))).\nall x (IdentityProof(x) -> (IDCard(x) | CitizenIdentityCard(x) | Passport(x) | (BirthCertificate(x) & Under14(x)))).\n\nConclusion:\nall x ((SavingDeposit(x) & Depositors(x)) -> (Present(x, IdentityProof(x)))).",
        "premises": [
            "all x all y ((SavingDeposit(x) & Depositors(y) & Joint(x)) -> Present(y, IdentityProof(y))).",
            "all x all y ((SavingDeposit(x) & LegalRepresentative(y)) -> (Present(y, Documents(y)) & Present(y, IdentityProof(y)) & Present(Depositors(y), IdentityProof(Depositors(y))))).",
            "all x (IdentityProof(x) -> (IDCard(x) | CitizenIdentityCard(x) | Passport(x) | (BirthCertificate(x) & Under14(x))))."
        ],
        "conclusion": "all x ((SavingDeposit(x) & Depositors(x)) -> (Present(x, IdentityProof(x)))).",
        "id": "2409b5fb-e120-4e60-8c30-2c925303a276"
    },
    {
        "raw": "Predicates:\nSavingsDeposit(x) | StateBank(x) | Currency(x) | Determine(x) | Payment(x) | Depositor(x) | Withdraw(x) | ForeignCurrency(x) | SmallAmount(x) | Guidance(x) | Allowed(x).\n\nExplanation:\nSavingsDeposit(x): x is a savings deposit.\nStateBank(x): x is the State Bank.\nCurrency(x): x is a currency.\nDetermine(x): x determines.\nPayment(x): x is a payment.\nDepositor(x): x is a depositor.\nWithdraw(x): x withdraws.\nForeignCurrency(x): x is a foreign currency.\nSmallAmount(x): x is a small amount.\nGuidance(x): x is guidance.\nAllowed(x): x is allowed.\n\nPremises:\nall x (SavingsDeposit(x) -> (Currency(x) & Determine(x) & Payment(x))).\nall x ((Currency(x) & Payment(x)) -> Depositor(x)).\nall x (Withdraw(x) -> (Payment(x) & ForeignCurrency(x))).\nall x (ForeignCurrency(x) -> Determine(x)).\nall x (SmallAmount(x) -> Guidance(x)).\n\nConclusion:\nall x (Withdraw(x) -> Allowed(x)).",
        "premises": [
            "all x (SavingsDeposit(x) -> (Currency(x) & Determine(x) & Payment(x))).",
            "all x ((Currency(x) & Payment(x)) -> Depositor(x)).",
            "all x (Withdraw(x) -> (Payment(x) & ForeignCurrency(x))).",
            "all x (ForeignCurrency(x) -> Determine(x)).",
            "all x (SmallAmount(x) -> Guidance(x))."
        ],
        "conclusion": "all x (Withdraw(x) -> Allowed(x)).",
        "id": "cbb72473-e56b-43d0-aa69-7facb39befc5"
    },
    {
        "raw": "Predicates:\nColorChange(x) | Faded(x) | Image(x) | Pattern(x) | Letter(x) | Number(x) | Crumpled(x) | Smeared(x) | Dirty(x) | Old(x) | Torn(x) | Stuck(x) | Intact(x) | Worn(x) | Rusted(x) | Damaged(x) | Plated(x) | Money(x) | Coins(x) | Reprinted(x) | Used(x).\n\nExplanation:\nColorChange(x): x has color change.\nFaded(x): x is faded.\nImage(x): x has an image.\nPattern(x): x has a pattern.\nLetter(x): x has letters.\nNumber(x): x has numbers.\nCrumpled(x): x is crumpled.\nSmeared(x): x is smeared.\nDirty(x): x is dirty.\nOld(x): x is old.\nTorn(x): x is torn.\nStuck(x): x is stuck.\nIntact(x): x is intact.\nWorn(x): x is worn.\nRusted(x): x is rusted.\nDamaged(x): x is damaged.\nPlated(x): x is plated.\nMoney(x): x is paper money.\nCoins(x): x is coins.\nReprinted(x): x is reprinted.\nUsed(x): x is used.\n\nPremises:\nall x (Money(x) & (ColorChange(x) | Faded(x) | Image(x) | Pattern(x) | Letter(x) | Number(x) | Crumpled(x) | Smeared(x) | Dirty(x) | Old(x) | Torn(x) | Stuck(x) | Intact(x))).\nall x (Coins(x) & (Worn(x) | Rusted(x) | Damaged(x) | Plated(x))).\nTorn(x).\nall x (Torn(x) -> (Reprinted(x) & Used(x))).\n\nConclusion:\nall x (Torn(x) -> (Reprinted(x) & Used(x))).",
        "premises": [
            "all x (Money(x) & (ColorChange(x) | Faded(x) | Image(x) | Pattern(x) | Letter(x) | Number(x) | Crumpled(x) | Smeared(x) | Dirty(x) | Old(x) | Torn(x) | Stuck(x) | Intact(x))).",
            "all x (Coins(x) & (Worn(x) | Rusted(x) | Damaged(x) | Plated(x))).",
            "Torn(x).",
            "all x (Torn(x) -> (Reprinted(x) & Used(x)))."
        ],
        "conclusion": "all x (Torn(x) -> (Reprinted(x) & Used(x))).",
        "id": "518370a1-3253-4a23-bde0-52b08c0d9355"
    },
    {
        "raw": "Predicates:\nLending(x) | CreditExtension(x) | Deliver(x, y) | Commit(x, y) | SumOfMoney(x) | Customer(y) | Purpose(x, z) | PeriodOfTime(x, t) | Agreement(x) | Repayment(x) | Principal(x) | Interest(x).\n\nExplanation:\nLending(x): x involves the act of lending.\nCreditExtension(x): x is a form of credit extension.\nDeliver(x, y): x delivers to y.\nCommit(x, y): x commits to y.\nSumOfMoney(x): x is a sum of money.\nCustomer(y): y is a customer.\nPurpose(x, z): x is for the purpose of z.\nPeriodOfTime(x, t): x is for a period of time t.\nAgreement(x): x is an agreement.\nRepayment(x): x involves repayment.\nPrincipal(x): x is the principal amount.\nInterest(x): x is the interest amount.\n\nPremises:\nall x (Lending(x) -> (CreditExtension(x) & Deliver(x, Customer(y)) & Purpose(x, z) & PeriodOfTime(x, t) & Agreement(x) & Repayment(x, Principal(x) & Interest(x)))).\n \nConclusion:\nLending(x) -> CreditExtension(x).",
        "premises": [
            "all x (Lending(x) -> (CreditExtension(x) & Deliver(x, Customer(y)) & Purpose(x, z) & PeriodOfTime(x, t) & Agreement(x) & Repayment(x, Principal(x) & Interest(x))))."
        ],
        "conclusion": "Lending(x) -> CreditExtension(x).",
        "id": "edabaddf-054f-4dc3-a486-345bcdc94a02"
    },
    {
        "raw": "Predicates:\nGrantLoan(x, y) | Customer(x) | LegalPerson(x) | Individual(x) | Aged(x) | LegalCapacity(x) | DemandLoan(x) | FeasiblePlan(x) | CapitalUse(x) | FinancialCapability(x) | RepayDebts(x) | BorrowLoan(x, y) | LendingInterestRate(x) | AssessCustomer(x) | TransparentStatus(x) | HealthyStatus(x) | CreditInstitution(y).\n\nExplanation:\nGrantLoan(x, y): Credit institution y grants a loan to customer x.\nCustomer(x): x is a customer.\nLegalPerson(x): x is a legal person.\nIndividual(x): x is an individual.\nAged(x): x's age.\nLegalCapacity(x): x has legal capacity.\nDemandLoan(x): x has a demand for a loan.\nFeasiblePlan(x): x has a feasible plan.\nCapitalUse(x): x's plan on the use of capital.\nFinancialCapability(x): x has financial capability.\nRepayDebts(x): x can repay debts.\nBorrowLoan(x, y): x borrows a loan from credit institution y.\nLendingInterestRate(x): x is the lending interest rate.\nAssessCustomer(x): Credit institution assesses customer x.\nTransparentStatus(x): x has a transparent financial status.\nHealthyStatus(x): x has a healthy financial status.\nCreditInstitution(y): y is a credit institution.\n\nPremises:\nall x (Customer(x) & LegalPerson(x) -> (Aged(x) >= 18 & LegalCapacity(x))).\nall x (Customer(x) & Individual(x) -> ((Aged(x) >= 18 & LegalCapacity(x)) | (15 <= Aged(x) < 18 & ~LossLegalCapacity(x)))).\nall x (Customer(x) -> DemandLoan(x)).\nall x (Customer(x) -> FeasiblePlan(x)).\nall x (Customer(x) -> CapitalUse(x)).\nall x (Customer(x) -> FinancialCapability(x)).\nall x (Customer(x) -> RepayDebts(x)).\nall x, y (BorrowLoan(x, y) & LendingInterestRate(y) -> AssessCustomer(x) & TransparentStatus(x) & HealthyStatus(x)).\n\nConclusion:\n~exists x (Customer(x) & Individual(x) & Aged(x) < 18).",
        "premises": [
            "all x (Customer(x) & LegalPerson(x) -> (Aged(x) >= 18 & LegalCapacity(x))).",
            "all x (Customer(x) & Individual(x) -> ((Aged(x) >= 18 & LegalCapacity(x)) | (15 <= Aged(x) < 18 & ~LossLegalCapacity(x)))).",
            "all x (Customer(x) -> DemandLoan(x)).",
            "all x (Customer(x) -> FeasiblePlan(x)).",
            "all x (Customer(x) -> CapitalUse(x)).",
            "all x (Customer(x) -> FinancialCapability(x)).",
            "all x (Customer(x) -> RepayDebts(x)).",
            "all x, y (BorrowLoan(x, y) & LendingInterestRate(y) -> AssessCustomer(x) & TransparentStatus(x) & HealthyStatus(x))."
        ],
        "conclusion": "~exists x (Customer(x) & Individual(x) & Aged(x) < 18).",
        "id": "d6225731-29df-4c75-a249-5f177e60b994"
    },
    {
        "raw": "Predicates:\nCreditInstitution(x) | Post(x, y) | TransactionOffice(x) | Website(x) | SavingsDepositInterestRate(x) | Fees(x) | ForeignCurrency(x) | Procedures(x) | Regulations(x) | SavingsDeposit(x) | Depositor(x) | Access(x) | Actions(x) | Crumpled(x) | Torn(x) | Lost(x) | Passport(x) | Required(x) | Publish(x) | InterestRate(x) | SavingsInterest(x).\n\nExplanation:\nCreditInstitution(x): x is a credit institution.\nPost(x, y): x publicly posts y.\nTransactionOffice(x): x is a transaction office.\nWebsite(x): x is a website.\nSavingsDepositInterestRate(x): x is the savings deposit interest rate.\nFees(x): x represents fees.\nForeignCurrency(x): x is a foreign currency.\nProcedures(x): x represents procedures.\nRegulations(x): x represents regulations.\nSavingsDeposit(x): x is a savings deposit.\nDepositor(x): x is a depositor.\nAccess(x): x represents access.\nActions(x): x represents actions.\nCrumpled(x): x is crumpled.\nTorn(x): x is torn.\nLost(x): x is lost.\nPassport(x): x is a passport.\nRequired(x): x is required.\nPublish(x): x publishes.\nInterestRate(x): x is an interest rate.\nSavingsInterest(x): x is savings interest.\n\nPremises:\nall x (CreditInstitution(x) -> (Post(TransactionOffice(x), SavingsDepositInterestRate(x)) & Post(Website(x), SavingsDepositInterestRate(x)))).\nall x (Post(x, y) -> (SavingsDepositInterestRate(y) & Fees(y) & ForeignCurrency(y) & Procedures(y) & Regulations(y) & Actions(y))).\nall x (Procedures(x) -> (SavingsDeposit(x) & CreditInstitution(x) & Depositor(x))).\nall x (Actions(x) -> (Crumpled(x) & Torn(x) & Lost(x) & Passport(x))).\nall x (Required(x) -> Publish(x)).\nall x (InterestRate(x) -> SavingsInterest(x)).\n\nConclusion:\nRequired(Publish(InterestRate(SavingsInterest))).",
        "premises": [
            "all x (CreditInstitution(x) -> (Post(TransactionOffice(x), SavingsDepositInterestRate(x)) & Post(Website(x), SavingsDepositInterestRate(x)))).",
            "all x (Post(x, y) -> (SavingsDepositInterestRate(y) & Fees(y) & ForeignCurrency(y) & Procedures(y) & Regulations(y) & Actions(y))).",
            "all x (Procedures(x) -> (SavingsDeposit(x) & CreditInstitution(x) & Depositor(x))).",
            "all x (Actions(x) -> (Crumpled(x) & Torn(x) & Lost(x) & Passport(x))).",
            "all x (Required(x) -> Publish(x)).",
            "all x (InterestRate(x) -> SavingsInterest(x))."
        ],
        "conclusion": "Required(Publish(InterestRate(SavingsInterest))).",
        "id": "1a9db09c-fb00-42ba-aa93-5ec05ecc2c6e"
    },
    {
        "raw": "Predicates:\nOpenCheckingAccount(x) | PrepareApplication(x) | SubmitApplication(x) | BankBranch(x) | ElectronicSubmission(x) | CollectInformation(x) | InspectIdentity(x) | VerifyIdentity(x) | WarnClient(x) | ProvideContents(x) | EnterAgreement(x) | NotifyAccountDetails(x) | Possible(x) | Online(x) | ProhibitedActs(x).\n\nExplanation:\nOpenCheckingAccount(x): x opens a checking account.\nPrepareApplication(x): x prepares an application.\nSubmitApplication(x): x submits an application.\nBankBranch(x): x is a bank/foreign bank's branch.\nElectronicSubmission(x): x submits an application electronically.\nCollectInformation(x): x collects information about the application.\nInspectIdentity(x): x inspects the client's identity.\nVerifyIdentity(x): x verifies the client's identity.\nWarnClient(x): x warns the client about prohibited acts.\nProvideContents(x): x provides the client with the contents of the agreement.\nEnterAgreement(x): x enters into an agreement with the client.\nNotifyAccountDetails(x): x notifies the account details.\nPossible(x): x is possible.\nOnline(x): x is online.\nProhibitedActs(x): x involves prohibited acts.\n\nPremises:\nall x (OpenCheckingAccount(x) -> (PrepareApplication(x) & SubmitApplication(x) & (BankBranch(x) & (ElectronicSubmission(x) | DirectSubmission(x) | PostSubmission(x))))).\nall x (ElectronicSubmission(x) -> CollectInformation(x) & InspectIdentity(x) & VerifyIdentity(x) & WarnClient(x) & ProvideContents(x) & EnterAgreement(x) & NotifyAccountDetails(x)).\nProhibitedActs(x).\n-Online(x) | Possible(x).\n\nConclusion:\nPossible(OnlineBankAccount).",
        "premises": [
            "all x (OpenCheckingAccount(x) -> (PrepareApplication(x) & SubmitApplication(x) & (BankBranch(x) & (ElectronicSubmission(x) | DirectSubmission(x) | PostSubmission(x))))).",
            "all x (ElectronicSubmission(x) -> CollectInformation(x) & InspectIdentity(x) & VerifyIdentity(x) & WarnClient(x) & ProvideContents(x) & EnterAgreement(x) & NotifyAccountDetails(x)).",
            "ProhibitedActs(x).",
            "-Online(x) | Possible(x)."
        ],
        "conclusion": "Possible(OnlineBankAccount).",
        "id": "1ba59967-2eb6-4a3c-971c-6a5f97bd4205"
    },
    {
        "raw": "Predicates:\nEligible(x) | Circulation(x) | Responsible(x) | Collect(x) | Exchange(x) | Customer(x) | Demand(x) | Quantity(x) | Procedure(x) | Document(x) | Banknote(x) | ChangeColor(x) | Fade(x) | Image(x) | Pattern(x) | Letter(x) | Digit(x) | Crumple(x) | Smear(x) | Dirty(x) | Old(x) | Torn(x) | Glue(x) | Intact(x) | Coin(x) | Worn(x) | Rusted(x) | Damage(x) | Plated(x) | TechnicalError(x) | Printing(x) | Coining(x) | Manufacturer(x) | Folded(x) | Picture(x) | Color(x) | Ink(x) | Limit(x).\n\nExplanation:\nEligible(x): x is eligible for circulation.\nCirculation(x): x is in circulation.\nResponsible(x): x is responsible.\nCollect(x): x collects money.\nExchange(x): x exchanges money.\nCustomer(x): x is a customer.\nDemand(x): x has demand.\nQuantity(x): x is a quantity.\nProcedure(x): x requires procedures.\nDocument(x): x requires documents.\nBanknote(x): x is a banknote.\nChangeColor(x): x changes color.\nFade(x): x fades.\nImage(x): x has an image.\nPattern(x): x has a pattern.\nLetter(x): x has a letter.\nDigit(x): x has a digit.\nCrumple(x): x is crumpled.\nSmear(x): x is smeared.\nDirty(x): x is dirty.\nOld(x): x is old.\nTorn(x): x is torn.\nGlue(x): x is glued.\nIntact(x): x is intact.\nCoin(x): x is a coin.\nWorn(x): x is worn.\nRusted(x): x is rusted.\nDamage(x): x is damaged.\nPlated(x): x has a plated layer.\nTechnicalError(x): x has a technical error.\nPrinting(x): x is related to printing.\nCoining(x): x is related to coining.\nManufacturer(x): x is a manufacturer.\nFolded(x): x is folded.\nPicture(x): x has a picture.\nColor(x): x has a color.\nInk(x): x is printing ink.\nLimit(x): x is a limit.\n\nPremises:\nall x (\u00acEligible(x) -> (\u00acCirculation(x) & Responsible(x) & Collect(x) & Exchange(x) & Customer(x) & Demand(x) & \u00acLimit(x) & \u00acProcedure(x) & \u00acDocument(x))).\nall x ((ChangeColor(x) | Fade(x) | Crumple(x) | Smear(x) | Dirty(x) | Old(x) | Torn(x) | Glue(x)) -> Banknote(x) & Intact(x)).\nall x ((Worn(x) | Rusted(x) | Damage(x) | Plated(x)) -> Coin(x) & Image(x) & Pattern(x) & Letter(x) & Digit(x)).\nall x (TechnicalError(x) -> (Printing(x) | Coining(x)) & Manufacturer(x) & (Folded(x) | \u00acPicture(x) | \u00acColor(x) | Ink(x)).\n\nConclusion:\nThere is no limit on the number of exchange of money not qualified for circulation.",
        "premises": [
            "all x (\u00acEligible(x) -> (\u00acCirculation(x) & Responsible(x) & Collect(x) & Exchange(x) & Customer(x) & Demand(x) & \u00acLimit(x) & \u00acProcedure(x) & \u00acDocument(x))).",
            "all x ((ChangeColor(x) | Fade(x) | Crumple(x) | Smear(x) | Dirty(x) | Old(x) | Torn(x) | Glue(x)) -> Banknote(x) & Intact(x)).",
            "all x ((Worn(x) | Rusted(x) | Damage(x) | Plated(x)) -> Coin(x) & Image(x) & Pattern(x) & Letter(x) & Digit(x)).",
            "all x (TechnicalError(x) -> (Printing(x) | Coining(x)) & Manufacturer(x) & (Folded(x) | \u00acPicture(x) | \u00acColor(x) | Ink(x))."
        ],
        "conclusion": "There is no limit on the number of exchange of money not qualified for circulation.",
        "id": "dbdd0aa6-c943-4640-b2e5-25f55d68c88b"
    },
    {
        "raw": "Predicates:\nDestruction(x) | Illegal(x) | Money(x) | Violation(x) | Fine(x) | Sabotage(x) | Confiscate(x) | Exhibit(x) | Instrumentalities(x) | Transfer(x) | CompetentAuthority(x) | Action(x) | Own(x) | Burn(x).\n\nExplanation:\nDestruction(x): x engages in destruction.\nIllegal(x): x is illegal.\nMoney(x): x is money.\nViolation(x): x is a violation of the law.\nFine(x): x incurs a fine.\nSabotage(x): x sabotages.\nConfiscate(x): x is confiscated.\nExhibit(x): x is an exhibit.\nInstrumentalities(x): x is instrumentalities.\nTransfer(x): x is transferred.\nCompetentAuthority(x): x is a competent authority.\nAction(x): x is further actions.\nOwn(x): x owns something.\nBurn(x): x burns something.\n\nPremises:\nDestruction(x) -> Illegal(x).\nViolations(x) -> Destruction(x).\nFine(x).\nall x (Illegal(x) -> Confiscate(Exhibit(x) & Instrumentalities(x))).\nConfiscate(x) -> Transfer(x, CompetentAuthority(x), Action(x)).\nOwn(5Million) & Burn(5Million).\n\nConclusion:\nIllegal(Burn(5Million)).",
        "premises": [
            "Destruction(x) -> Illegal(x).",
            "Violations(x) -> Destruction(x).",
            "Fine(x).",
            "all x (Illegal(x) -> Confiscate(Exhibit(x) & Instrumentalities(x))).",
            "Confiscate(x) -> Transfer(x, CompetentAuthority(x), Action(x)).",
            "Own(5Million) & Burn(5Million)."
        ],
        "conclusion": "Illegal(Burn(5Million)).",
        "id": "2bc3743b-8eea-4526-9094-fb077be0ff9f"
    },
    {
        "raw": "Predicates:\nProvideGuidelines(x) | Procedure(x) | ElectronicDeposit(x) | CheckingAccount(x) | Depositor(x) | CreditInstitution(x) | LawRegulation(x) | ElectronicTransaction(x) | AntiMoneyLaundering(x) | RelevantLaw(x) | Accurate(x) | Safe(x) | RetainInformation(x) | MeetRequirements(x) | Trace(x) | Inspection(x) | DisputeSettlement(x) | Withdraw(x) | Bank(x) | Deposit(x) | Allowed(x).\n\nExplanation:\nProvideGuidelines(x): x provides guidelines.\nProcedure(x): x follows procedures.\nElectronicDeposit(x): x involves electronic savings deposits.\nCheckingAccount(x): x has a checking account.\nDepositor(x): x is a depositor.\nCreditInstitution(x): x is a credit institution.\nLawRegulation(x): x follows regulations of the law.\nElectronicTransaction(x): x involves electronic transactions.\nAntiMoneyLaundering(x): x follows anti-money laundering regulations.\nRelevantLaw(x): x follows relevant laws.\nAccurate(x): x ensures accuracy.\nSafe(x): x ensures safety.\nRetainInformation(x): x retains information.\nMeetRequirements(x): x meets requirements.\nTrace(x): x allows tracing.\nInspection(x): x allows inspection.\nDisputeSettlement(x): x settles disputes.\nWithdraw(x): x withdraws.\nBank(x): x is a bank.\nDeposit(x): x deposits money.\nAllowed(x): x is allowed.\n\nPremises:\nall x (CreditInstitution(x) & ProvideGuidelines(x) -> (Procedure(x) & ElectronicDeposit(x) & CheckingAccount(x) & Depositor(x) & LawRegulation(x) & ElectronicTransaction(x) & AntiMoneyLaundering(x) & RelevantLaw(x) & Accurate(x) & Safe(x))).\nall x (CreditInstitution(x) & RetainInformation(x) -> (ElectronicDeposit(x) & MeetRequirements(x) & Trace(x) & Inspection(x) & DisputeSettlement(x))).\nall x (Withdraw(x) & Bank(x) -> (Procedure(x) & Deposit(x) & Allowed(x)).\n\nConclusion:\nall x (Deposit(x) & Bank(x) -> Withdraw(x)).",
        "premises": [
            "all x (CreditInstitution(x) & ProvideGuidelines(x) -> (Procedure(x) & ElectronicDeposit(x) & CheckingAccount(x) & Depositor(x) & LawRegulation(x) & ElectronicTransaction(x) & AntiMoneyLaundering(x) & RelevantLaw(x) & Accurate(x) & Safe(x))).",
            "all x (CreditInstitution(x) & RetainInformation(x) -> (ElectronicDeposit(x) & MeetRequirements(x) & Trace(x) & Inspection(x) & DisputeSettlement(x))).",
            "all x (Withdraw(x) & Bank(x) -> (Procedure(x) & Deposit(x) & Allowed(x))."
        ],
        "conclusion": "all x (Deposit(x) & Bank(x) -> Withdraw(x)).",
        "id": "7893bac9-b762-4845-b819-66eaad53cf99"
    },
    {
        "raw": "Predicates:\nOpenAccount(x) | IdentificationRequired(x) | ApplicationForm(x) | CitizenIDCard(x) | Passport(x) | BirthCertificate(x) | EntryVisa(x) | ExemptionDocument(x) | VietnameseCitizen(x) | Under14Years(x) | Foreigner(x) | Guardian(x) | LegalRepresentative(x) | Bank(x) | ForeignBankBranch(x) | StateBankVietnam(x).\n\nExplanation:\nOpenAccount(x): x opens a bank account.\nIdentificationRequired(x): x requires identification for account opening.\nApplicationForm(x): x uses an application form for account opening.\nCitizenIDCard(x): x has a citizen identification card.\nPassport(x): x has a passport.\nBirthCertificate(x): x has a birth certificate.\nEntryVisa(x): x has an entry visa.\nExemptionDocument(x): x has a document proving exemption from entry visa.\nVietnameseCitizen(x): x is a Vietnamese citizen.\nUnder14Years(x): x is under 14 years old.\nForeigner(x): x is a foreigner.\nGuardian(x): x is a guardian.\nLegalRepresentative(x): x is a legal representative.\nBank(x): x is a bank.\nForeignBankBranch(x): x is a foreign bank branch.\nStateBankVietnam(x): x is the State Bank of Vietnam.\n\nPremises:\nall x (OpenAccount(x) -> (ApplicationForm(x) & IdentificationRequired(x))).\nIdentificationRequired(x).\nall x (ApplicationForm(x) -> (Bank(x) | ForeignBankBranch(x))).\nall x (CitizenIDCard(x) | Passport(x) | (BirthCertificate(x) & VietnameseCitizen(x) & Under14Years(x)) | EntryVisa(x) | (Foreigner(x) & ExemptionDocument(x))).\nall x ((Guardian(x) | LegalRepresentative(x)) -> (ApplicationForm(x) & IdentificationRequired(x))).\n\nConclusion:\n-OpenAccount(x) | IdentificationRequired(x).",
        "premises": [
            "all x (OpenAccount(x) -> (ApplicationForm(x) & IdentificationRequired(x))).",
            "IdentificationRequired(x).",
            "all x (ApplicationForm(x) -> (Bank(x) | ForeignBankBranch(x))).",
            "all x (CitizenIDCard(x) | Passport(x) | (BirthCertificate(x) & VietnameseCitizen(x) & Under14Years(x)) | EntryVisa(x) | (Foreigner(x) & ExemptionDocument(x))).",
            "all x ((Guardian(x) | LegalRepresentative(x)) -> (ApplicationForm(x) & IdentificationRequired(x)))."
        ],
        "conclusion": "-OpenAccount(x) | IdentificationRequired(x).",
        "id": "507d7ebc-666c-4df8-90ec-453a4ab9aff5"
    },
    {
        "raw": "Predicates:\nLegalRepresentative(x) | CreditInstitution(x) | ResideInVietnam(x) | Authorize(x) | ManagerOrExecutive(x) | ExerciseRights(x) | FulfillObligations(x).\n\nExplanation:\nLegalRepresentative(x): x is a legal representative.\nCreditInstitution(x): x is a credit institution.\nResideInVietnam(x): x resides in Vietnam.\nAuthorize(x): x authorizes another person.\nManagerOrExecutive(x): x is a manager or executive.\nExerciseRights(x): x exercises rights.\nFulfillObligations(x): x fulfills obligations.\n\nPremises:\nall x (LegalRepresentative(x) & CreditInstitution(x) -> (ResideInVietnam(x) | (Authorize(x) & ManagerOrExecutive(x) & ResideInVietnam(x) & ExerciseRights(x) & FulfillObligations(x)))).\n\nConclusion:\nLegalRepresentative(x) & CreditInstitution(x) -> ResideInVietnam(x).",
        "premises": [
            "all x (LegalRepresentative(x) & CreditInstitution(x) -> (ResideInVietnam(x) | (Authorize(x) & ManagerOrExecutive(x) & ResideInVietnam(x) & ExerciseRights(x) & FulfillObligations(x))))."
        ],
        "conclusion": "LegalRepresentative(x) & CreditInstitution(x) -> ResideInVietnam(x).",
        "id": "05986d5a-46ec-4155-afee-ddb82890daee"
    },
    {
        "raw": "Predicates:\nCitizen(x) | Age(x) | LegalCapacity(x) | SavingsDeposit(x) | RestrictedCapacity(x) | LostCapacity(x) | CivilActCapacity(x) | LimitedCapacity(x) | CognitionControl(x) | BehaviorControl(x) | LegalRepresentative(x) | Guardian(x) | Entitled(x) | DepositMoney(x).\n\nExplanation:\nCitizen(x): x is a Vietnamese citizen.\nAge(x): x has a certain age.\nLegalCapacity(x): x has legal capacity.\nSavingsDeposit(x): x makes savings deposit transactions.\nRestrictedCapacity(x): x has restricted legal capacity.\nLostCapacity(x): x has lost legal capacity.\nCivilActCapacity(x): x has civil act capacity.\nLimitedCapacity(x): x has limited legal capacity.\nCognitionControl(x): x has limited cognition control.\nBehaviorControl(x): x has limited behavior control.\nLegalRepresentative(x): x is a legal representative.\nGuardian(x): x is a guardian.\nEntitled(x): x is entitled to do something.\nDepositMoney(x): x deposits money.\n\nPremises:\nall x (Citizen(x) & Age(x) >= 18 & LegalCapacity(x)).\nall x (Citizen(x) & Age(x) >= 15 & Age(x) < 18 & ~RestrictedCapacity(x) & ~LostCapacity(x) & CivilActCapacity(x)).\nall x (Citizen(x) & (LimitedCapacity(x) | LostCapacity(x) | Age(x) < 15) -> SavingsDeposit(x) & LegalRepresentative(x)).\nall x (Citizen(x) & LimitedCapacity(x) & (CognitionControl(x) | BehaviorControl(x)) -> SavingsDeposit(x) & Guardian(x)).\n\nConclusion:\nall x (Citizen(x) & (LimitedCapacity(x) | LostCapacity(x)) -> Entitled(x) & DepositMoney(x)).",
        "premises": [
            "all x (Citizen(x) & Age(x) >= 18 & LegalCapacity(x)).",
            "all x (Citizen(x) & Age(x) >= 15 & Age(x) < 18 & ~RestrictedCapacity(x) & ~LostCapacity(x) & CivilActCapacity(x)).",
            "all x (Citizen(x) & (LimitedCapacity(x) | LostCapacity(x) | Age(x) < 15) -> SavingsDeposit(x) & LegalRepresentative(x)).",
            "all x (Citizen(x) & LimitedCapacity(x) & (CognitionControl(x) | BehaviorControl(x)) -> SavingsDeposit(x) & Guardian(x))."
        ],
        "conclusion": "all x (Citizen(x) & (LimitedCapacity(x) | LostCapacity(x)) -> Entitled(x) & DepositMoney(x)).",
        "id": "dc4d41d8-283a-48ab-9e3a-2d9937d4e69c"
    },
    {
        "raw": "Predicates:\nPoor(x) | EthnicMinority(x) | DifficultConditions(x) | IslandCommune(x) | IslandDistrict(x) | Eligible(x) | HealthInsurance(x) | Applicant(x) | HouseholdRegistration(x) | SeverelyDisadvantagedArea(x).\n\nExplanation:\nPoor(x): x is a member of a poor household.\nEthnicMinority(x): x is an ethnic minority person.\nDifficultConditions(x): x lives in an area with difficult socio-economic conditions.\nIslandCommune(x): x lives in an island commune.\nIslandDistrict(x): x lives in an island district.\nEligible(x): x is eligible for something.\nHealthInsurance(x): x has health insurance.\nApplicant(x): x is an applicant.\nHouseholdRegistration(x): x has a household registration.\nSeverelyDisadvantagedArea(x): x lives in a severely disadvantaged area.\n\nPremises:\nall x (Poor(x) -> (EthnicMinority(x) | DifficultConditions(x) | IslandCommune(x) | IslandDistrict(x))).\nall x (Eligible(x) -> HealthInsurance(x)).\nall x (HouseholdRegistration(x) & SeverelyDisadvantagedArea(x) -> Eligible(x)).\n\nConclusion:\nall x (Applicant(x) & HouseholdRegistration(x) & SeverelyDisadvantagedArea(x) -> HealthInsurance(x)).",
        "premises": [
            "all x (Poor(x) -> (EthnicMinority(x) | DifficultConditions(x) | IslandCommune(x) | IslandDistrict(x))).",
            "all x (Eligible(x) -> HealthInsurance(x)).",
            "all x (HouseholdRegistration(x) & SeverelyDisadvantagedArea(x) -> Eligible(x))."
        ],
        "conclusion": "all x (Applicant(x) & HouseholdRegistration(x) & SeverelyDisadvantagedArea(x) -> HealthInsurance(x)).",
        "id": "57ea0a2c-e5a3-45bd-accd-b58b09932847"
    },
    {
        "raw": "Predicates:\nCertificate(x) | Manufacturer(x) | Seller(x) | Obtain(x) | Operate(x) | Condition(x) | Issue(x) | DietarySupplements(x) | Comply(x) | Requirement(x) | Establishment(x) | SmallProduction(x) | NoFixedLocation(x) | PreliminaryProcessing(x) | PrePackagedFoods(x) | CollectiveKitchens(x) | Registration(x) | FoodBusiness(x) | CompanyCafeteria(x) | FoodSafety(x).\n\nExplanation:\nCertificate(x): x holds a certificate.\nManufacturer(x): x is a food manufacturer.\nSeller(x): x is a food seller.\nObtain(x): x obtains a certificate.\nOperate(x): x operates.\nCondition(x): x fulfills food safety conditions.\nIssue(x): x issues certificates.\nDietarySupplements(x): x manufactures dietary supplements.\nComply(x): x complies with requirements.\nRequirement(x): x meets specific requirements.\nEstablishment(x): x is an establishment.\nSmallProduction(x): x engages in small-scale production.\nNoFixedLocation(x): x operates without a fixed location.\nPreliminaryProcessing(x): x performs small preliminary processing.\nPrePackagedFoods(x): x trades pre-packaged foods.\nCollectiveKitchens(x): x operates collective kitchens.\nRegistration(x): x is registered.\nFoodBusiness(x): x is in the food business.\nCompanyCafeteria(x): x is the company's cafeteria.\nFoodSafety(x): x relates to food safety.\n\nPremises:\nall x (Manufacturer(x) | Seller(x) -> (Obtain(x) & Operate(x))).\nall x (Obtain(x) & Operate(x) -> Certificate(x)).\nall x (Certificate(x) -> Issue(x)).\nall x (Manufacturer(x) -> Condition(x)).\nall x (DietarySupplements(x) -> Comply(x) & Requirement(x)).\nall x (Establishment(x) -> -Obtain(x)).\nall x (SmallProduction(x) | NoFixedLocation(x) | PreliminaryProcessing(x) | PrePackagedFoods(x) | CollectiveKitchens(x) | -Registration(x) -> -Obtain(x)).\nall x (CollectiveKitchens(x) & -Registration(x) -> -FoodBusiness(x)).\nall x (CompanyCafeteria(x) -> FoodSafety(x)).\n\nConclusion:\nall x (CompanyCafeteria(x) -> -Obtain(x)).",
        "premises": [
            "all x (Manufacturer(x) | Seller(x) -> (Obtain(x) & Operate(x))).",
            "all x (Obtain(x) & Operate(x) -> Certificate(x)).",
            "all x (Certificate(x) -> Issue(x)).",
            "all x (Manufacturer(x) -> Condition(x)).",
            "all x (DietarySupplements(x) -> Comply(x) & Requirement(x)).",
            "all x (Establishment(x) -> -Obtain(x)).",
            "all x (SmallProduction(x) | NoFixedLocation(x) | PreliminaryProcessing(x) | PrePackagedFoods(x) | CollectiveKitchens(x) | -Registration(x) -> -Obtain(x)).",
            "all x (CollectiveKitchens(x) & -Registration(x) -> -FoodBusiness(x)).",
            "all x (CompanyCafeteria(x) -> FoodSafety(x))."
        ],
        "conclusion": "all x (CompanyCafeteria(x) -> -Obtain(x)).",
        "id": "5474fafd-fcaa-4998-bc7d-181156cf0638"
    },
    {
        "raw": "Predicates:\nEnjoySicknessBenefit(x) | WorkingUnderNormalConditions(x) | CountedOnWorkingDays(x) | ExcludeDays(x) | PaidSocialInsurance(x) | TetHoliday(x) | FullPaidLeave(x) | SalaryBasis(x) | PaymentSocialInsurance(x) | SicknessRegimeEntitlement(x) | Laborers(x) | Entitled(x) | PercentageSalary(x).\n\nExplanation:\nEnjoySicknessBenefit(x): x is entitled to sickness benefit.\nWorkingUnderNormalConditions(x): x works under normal conditions.\nCountedOnWorkingDays(x): x's sickness benefit is counted on working days.\nExcludeDays(x): certain days are excluded from counting sickness benefit.\nPaidSocialInsurance(x): x has paid social insurance premiums.\nTetHoliday(x): x is during the Tet holiday.\nFullPaidLeave(x): x is entitled to full paid leave.\nSalaryBasis(x): x's salary is the basis for payment of social insurance premiums.\nPaymentSocialInsurance(x): x's payment of social insurance premiums.\nSicknessRegimeEntitlement(x): x is entitled to sickness regime.\nLaborers(x): x is a laborer.\nEntitled(x): x is entitled to certain benefits.\nPercentageSalary(x): x receives a certain percentage of their salary.\n\nPremises:\nall x (WorkingUnderNormalConditions(x) & SicknessRegimeEntitlement(x) & Laborers(x) & PaidSocialInsurance(x) & CountedOnWorkingDays(x) & ExcludeDays(x) -> SicknessRegimeEntitlement(x)).\nall x (TetHoliday(x) & FullPaidLeave(x) -> Entitled(x)).\nall x (Entitled(x) & EnjoySicknessBenefit(x) -> PercentageSalary(x)).\n\nConclusion:\nall x (TetHoliday(x) -> EnjoySicknessBenefit(x)).",
        "premises": [
            "all x (WorkingUnderNormalConditions(x) & SicknessRegimeEntitlement(x) & Laborers(x) & PaidSocialInsurance(x) & CountedOnWorkingDays(x) & ExcludeDays(x) -> SicknessRegimeEntitlement(x)).",
            "all x (TetHoliday(x) & FullPaidLeave(x) -> Entitled(x)).",
            "all x (Entitled(x) & EnjoySicknessBenefit(x) -> PercentageSalary(x))."
        ],
        "conclusion": "all x (TetHoliday(x) -> EnjoySicknessBenefit(x)).",
        "id": "54707371-b963-40a7-a2d4-e8a783e78781"
    },
    {
        "raw": "Predicates:\nDisabled(x) | BodyPartImpairment(x) | FunctionalImpairment(x) | DifficultyWork(x) | DifficultyLive(x) | DifficultyStudy(x) | Article(x) | Law(x) | Decree(x) | Beneficiary(x) | CareFundSupport(x) | Nurture(x) | Pregnant(x) | Nursing(x) | MedicalCouncil(x) | ImpairmentLevel(x) | SelfSufficiency(x) | WorkingCapacityDecrease(x) | SevereDisability(x) | ExtremelySevereDisability(x) | StateBudgetFunding(x) | Certificate(x) | HeartDisease(x) | DisabilityBenefits(x).\n\nExplanation:\nDisabled(x): x is a disabled person.\nBodyPartImpairment(x): x has impairment in one or more body parts.\nFunctionalImpairment(x): x has functional impairment.\nDifficultyWork(x): x has difficulty in working.\nDifficultyLive(x): x has difficulty in living.\nDifficultyStudy(x): x has difficulty in studying.\nArticle(x): x is an article.\nLaw(x): x is a law.\nDecree(x): x is a decree.\nBeneficiary(x): x is a beneficiary.\nCareFundSupport(x): x receives care fund support.\nNurture(x): x nurtures.\nPregnant(x): x is pregnant.\nNursing(x): x is nursing.\nMedicalCouncil(x): x is a Medical Examination Council.\nImpairmentLevel(x): x has an impairment level.\nSelfSufficiency(x): x is self-sufficient.\nWorkingCapacityDecrease(x): x has a decrease in working capacity.\nSevereDisability(x): x has severe disability.\nExtremelySevereDisability(x): x has extremely severe disability.\nStateBudgetFunding(x): x receives state budget funding.\nCertificate(x): x has a certificate.\nHeartDisease(x): x has heart disease.\nDisabilityBenefits(x): x is entitled to disability benefits.\n\nPremises:\nall x (Disabled(x) -> (BodyPartImpairment(x) | FunctionalImpairment(x) | DifficultyWork(x) | DifficultyLive(x) | DifficultyStudy(x))).\nArticle(x) & Law(x) -> Decree(x).\nDecree(x) & Article(x) -> (Beneficiary(x) & CareFundSupport(x)).\nBeneficiary(x) -> (Nurture(x) | Pregnant(x) | Nursing(x)).\nMedicalCouncil(x) -> ImpairmentLevel(x).\nImpairmentLevel(x) -> (SelfSufficiency(x) | WorkingCapacityDecrease(x)).\nSelfSufficiency(x) & WorkingCapacityDecrease(x) -> (ExtremelySevereDisability(x) | SevereDisability(x)).\nMedicalCouncil(x) & Decree(x) -> ImpairmentLevel(x).\nStateBudgetFunding(x) -> (ImpairmentLevel(x) & Certificate(x)).\nHeartDisease(x).\n-DisabilityBenefits(x).\n\nConclusion:\nall x (HeartDisease(x) -> DisabilityBenefits(x)).",
        "premises": [
            "all x (Disabled(x) -> (BodyPartImpairment(x) | FunctionalImpairment(x) | DifficultyWork(x) | DifficultyLive(x) | DifficultyStudy(x))).",
            "Article(x) & Law(x) -> Decree(x).",
            "Decree(x) & Article(x) -> (Beneficiary(x) & CareFundSupport(x)).",
            "Beneficiary(x) -> (Nurture(x) | Pregnant(x) | Nursing(x)).",
            "MedicalCouncil(x) -> ImpairmentLevel(x).",
            "ImpairmentLevel(x) -> (SelfSufficiency(x) | WorkingCapacityDecrease(x)).",
            "SelfSufficiency(x) & WorkingCapacityDecrease(x) -> (ExtremelySevereDisability(x) | SevereDisability(x)).",
            "MedicalCouncil(x) & Decree(x) -> ImpairmentLevel(x).",
            "StateBudgetFunding(x) -> (ImpairmentLevel(x) & Certificate(x)).",
            "HeartDisease(x).",
            "-DisabilityBenefits(x)."
        ],
        "conclusion": "all x (HeartDisease(x) -> DisabilityBenefits(x)).",
        "id": "6f354fa6-f9c2-439d-9759-2ace00b873d8"
    },
    {
        "raw": "Predicates:\nNew(x) | Determined(x) | Research(x) | Complete(x) | Accept(x) | Apply(x) | Issue(x) | Certificate(x) | Appraise(x) | Propose(x) | Granted(x) | Specify(x) | Permit(x) | OfficiallyApply(x) | Review(x) | Assess(x) | Establish(x) | Classified(x) | ApplyFirstTime(x) | HealthcareEstablishment(x) | Law(x).\n\nExplanation:\nNew(x): x is new.\nDetermined(x): x is determined.\nResearch(x): x is researched.\nComplete(x): x is completed.\nAccept(x): x is accepted.\nApply(x): x is applied.\nIssue(x): x is issued.\nCertificate(x): x is a certificate of research results.\nAppraise(x): x is appraised.\nPropose(x): x is proposed.\nGranted(x): x is granted.\nSpecify(x): x is specified.\nPermit(x): x is permitted.\nOfficiallyApply(x): x is officially applied.\nReview(x): x is reviewed.\nAssess(x): x is assessed.\nEstablish(x): x is established.\nClassified(x): x is classified.\nApplyFirstTime(x): x is applied for the first time.\nHealthcareEstablishment(x): x is a healthcare establishment.\nLaw(x): x is a law.\n\nPremises:\nall x (New(x) -> Determine(x)).\nResearch(x) & Complete(x) & Accept(x) & Apply(x) & Issue(x) -> Certificate(x).\nResearch(x) & Complete(x) & Accept(x) & Apply(x) & Issue(x) -> DepartmentOfScience(x).\nall x (New(x) -> (Research(x) & Complete(x) & Accept(x) & Apply(x) & Issue(x))).\nall x (Apply(x) & Review(x) & Assess(x) & Establish(x) -> ProfessionalCouncil(x)).\nall x (New(x) -> (Appraise(x) & Propose(x) & Granted(x))).\nall x (Specify(x) -> (Permit(x) & OfficiallyApply(x) & Review(x) & Assess(x) & Establish(x))).\nall x (New(x) -> (Specify(x) & ApplyFirstTime(x) & HealthcareEstablishment(x))).\nall x (Classified(x) -> (Apply(x) & HealthcareEstablishment(x))).\n\nConclusion:\nall x (New(x) & Law(x)).",
        "premises": [
            "all x (New(x) -> Determine(x)).",
            "Research(x) & Complete(x) & Accept(x) & Apply(x) & Issue(x) -> Certificate(x).",
            "Research(x) & Complete(x) & Accept(x) & Apply(x) & Issue(x) -> DepartmentOfScience(x).",
            "all x (New(x) -> (Research(x) & Complete(x) & Accept(x) & Apply(x) & Issue(x))).",
            "all x (Apply(x) & Review(x) & Assess(x) & Establish(x) -> ProfessionalCouncil(x)).",
            "all x (New(x) -> (Appraise(x) & Propose(x) & Granted(x))).",
            "all x (Specify(x) -> (Permit(x) & OfficiallyApply(x) & Review(x) & Assess(x) & Establish(x))).",
            "all x (New(x) -> (Specify(x) & ApplyFirstTime(x) & HealthcareEstablishment(x))).",
            "all x (Classified(x) -> (Apply(x) & HealthcareEstablishment(x)))."
        ],
        "conclusion": "all x (New(x) & Law(x)).",
        "id": "d532c08f-20c7-48e8-94d0-7366ce837326"
    },
    {
        "raw": "Predicates:\nEmployee(x) | LaborContract(x) | TermUnder3Months(x) | PartTimeOfficial(x) | Participant(x) | ProductionActivity(x) | BusinessActivity(x) | ServiceActivity(x) | CooperativeMember(x) | SelfEmployed(x) | WorkAbroad(x) | CompulsorySocialInsurance(x) | LumpSumSocialInsurance(x) | BornIn1985(x) | Address(x) | SocialInsuranceParticipant(x) | ForeignInvestmentEnterprise(x) | TrangBangIndustrialPark(x) | GiveBirth(x) | StayHome(x) | ChildCare(x) | ParticipateSocialInsurance(x) | Individual(x).\n\nExplanation:\nEmployee(x): x is an employee.\nLaborContract(x): x works under a labor contract.\nTermUnder3Months(x): x has a labor contract with a term of under 3 months.\nPartTimeOfficial(x): x is a part-time official at commune, village, or residential group levels.\nParticipant(x): x participates in activities.\nProductionActivity(x): x is involved in production activities.\nBusinessActivity(x): x is involved in business activities.\nServiceActivity(x): x is involved in service activities.\nCooperativeMember(x): x is a non-salaried cooperative member.\nSelfEmployed(x): x is self-employed.\nWorkAbroad(x): x works abroad for a certain period.\nCompulsorySocialInsurance(x): x participates in compulsory social insurance.\nLumpSumSocialInsurance(x): x has received lump-sum social insurance.\nBornIn1985(x): x was born in 1985.\nAddress(x): x has an address.\nSocialInsuranceParticipant(x): x participates in social insurance.\nForeignInvestmentEnterprise(x): x works in a Foreign Investment Enterprise.\nTrangBangIndustrialPark(x): x works at Trang Bang Industrial Park.\nGiveBirth(x): x has given birth.\nStayHome(x): x wants to stay home.\nChildCare(x): x is caring for a child.\nParticipateSocialInsurance(x): x continues to participate in social insurance.\nIndividual(x): x is an individual.\n\nPremises:\nall x (Employee(x) & LaborContract(x) & TermUnder3Months(x)) | PartTimeOfficial(x) | (Participant(x) & (ProductionActivity(x) | BusinessActivity(x) | ServiceActivity(x) | CooperativeMember(x) | SelfEmployed(x) | (WorkAbroad(x) & -CompulsorySocialInsurance(x) & -LumpSumSocialInsurance(x)))).\nBornIn1985(x) & Address(x, LongThanhTrungCommune, HoaThanhDistrict, TayNinhProvince).\nSocialInsuranceParticipant(x) & BornIn1985(x) & Address(x, LongThanhTrungCommune, HoaThanhDistrict, TayNinhProvince) & ParticipateSocialInsurance(x) & ForeignInvestmentEnterprise(x) & TrangBangIndustrialPark(x) & GiveBirth(x) & StayHome(x) & ChildCare(x) & -WorkAbroad(x).\n-StayHome(x) | -ChildCare(x).\nall x (Participant(x) -> Individual(x)).\n\nConclusion:\nall x (SocialInsuranceParticipant(x) & BornIn1985(x) & Address(x, LongThanhTrungCommune, HoaThanhDistrict, TayNinhProvince) & ParticipateSocialInsurance(x) & -WorkAbroad(x) -> Individual(x)).",
        "premises": [
            "all x (Employee(x) & LaborContract(x) & TermUnder3Months(x)) | PartTimeOfficial(x) | (Participant(x) & (ProductionActivity(x) | BusinessActivity(x) | ServiceActivity(x) | CooperativeMember(x) | SelfEmployed(x) | (WorkAbroad(x) & -CompulsorySocialInsurance(x) & -LumpSumSocialInsurance(x)))).",
            "BornIn1985(x) & Address(x, LongThanhTrungCommune, HoaThanhDistrict, TayNinhProvince).",
            "SocialInsuranceParticipant(x) & BornIn1985(x) & Address(x, LongThanhTrungCommune, HoaThanhDistrict, TayNinhProvince) & ParticipateSocialInsurance(x) & ForeignInvestmentEnterprise(x) & TrangBangIndustrialPark(x) & GiveBirth(x) & StayHome(x) & ChildCare(x) & -WorkAbroad(x).",
            "-StayHome(x) | -ChildCare(x).",
            "all x (Participant(x) -> Individual(x))."
        ],
        "conclusion": "all x (SocialInsuranceParticipant(x) & BornIn1985(x) & Address(x, LongThanhTrungCommune, HoaThanhDistrict, TayNinhProvince) & ParticipateSocialInsurance(x) & -WorkAbroad(x) -> Individual(x)).",
        "id": "493e5e87-1286-42f4-8a97-82472b5c70e6"
    },
    {
        "raw": "Predicates:\nVietnamese(x) | Employee(x) | SocialInsuranceSubject(x) | Employer(x) | AccountingServiceCompany(x) | PaySocialInsurance(x).\n\nExplanation:\nVietnamese(x): x is a Vietnamese citizen.\nEmployee(x): x is an employee.\nSocialInsuranceSubject(x): x is a subject of compulsory social insurance.\nEmployer(x): x is an employer.\nAccountingServiceCompany(x): x is an accounting service company.\nPaySocialInsurance(x): x pays social insurance.\n\nPremises:\nall x (Employee(x) & SocialInsuranceSubject(x) -> Vietnamese(x)).\nall x (Employer(x) & SocialInsuranceSubject(x) -> EmployerType(x)).\nall x (EmployerType(x) -> PaySocialInsurance(x)).\n\nConclusion:\nexists x (Employer(y) & AccountingServiceCompany(x) & ~PaySocialInsurance(x)).",
        "premises": [
            "all x (Employee(x) & SocialInsuranceSubject(x) -> Vietnamese(x)).",
            "all x (Employer(x) & SocialInsuranceSubject(x) -> EmployerType(x)).",
            "all x (EmployerType(x) -> PaySocialInsurance(x))."
        ],
        "conclusion": "exists x (Employer(y) & AccountingServiceCompany(x) & ~PaySocialInsurance(x)).",
        "id": "bdd62613-2791-4c38-8208-196087b2726a"
    },
    {
        "raw": "Predicates:\nEmployee(x) | LaborContract(x) | IndefiniteTerm(x) | FullTerm(x) | SocialInsurance(x) | Participate(x) | Obliged(x) | ContinueWorking(x) | Pay(x).\n\nExplanation:\nEmployee(x): x is an employee.\nLaborContract(x): x has a labor contract.\nIndefiniteTerm(x): x has an indefinite-term labor contract.\nFullTerm(x): x has a labor contract with a term of full three months or more.\nSocialInsurance(x): x is social insurance.\nParticipate(x): x participates in social insurance.\nObliged(x): x is obliged to participate in social insurance.\nContinueWorking(x): x continues working.\nPay(x): x pays for social insurance.\n\nPremises:\nall x (Employee(x) & (IndefiniteTerm(x) | (LaborContract(x) & FullTerm(x))) -> Participate(x) & Obliged(x)).\nall x (Participate(x) & ContinueWorking(x)) -> -Pay(x).\n\nConclusion:\nexists x (Employee(x) & Participate(x) & ContinueWorking(x) & -Pay(x)).",
        "premises": [
            "all x (Employee(x) & (IndefiniteTerm(x) | (LaborContract(x) & FullTerm(x))) -> Participate(x) & Obliged(x)).",
            "all x (Participate(x) & ContinueWorking(x)) -> -Pay(x)."
        ],
        "conclusion": "exists x (Employee(x) & Participate(x) & ContinueWorking(x) & -Pay(x)).",
        "id": "2b92d223-d013-4bab-a31d-70189fbf1718"
    },
    {
        "raw": "Predicates:\nWorkedAt(x) | EligibleForCompulsoryInsurance(x) | ParticipateInCompulsoryInsurance(x) | ParticipateInVoluntaryInsurance(x) | NotEligible(x) | MaternityBenefit(x) | Switch(x).\n\nExplanation:\nWorkedAt(x): x has worked at the Company.\nEligibleForCompulsoryInsurance(x): x is eligible for compulsory social insurance.\nParticipateInCompulsoryInsurance(x): x participates in compulsory social insurance.\nParticipateInVoluntaryInsurance(x): x participates in voluntary social insurance.\nNotEligible(x): x is not eligible as prescribed by the Law on Social Security.\nMaternityBenefit(x): x is entitled to the maternity benefit.\nSwitch(x): x switches from voluntary social insurance to compulsory social insurance.\n\nPremises:\nall x ((WorkedAt(x) & EligibleForCompulsoryInsurance(x)) -> (ParticipateInCompulsoryInsurance(x) & ~ParticipateInVoluntaryInsurance(x) & NotEligible(x))).\nall x (MaternityBenefit(x) -> ParticipateInCompulsoryInsurance(x) & ~ParticipateInVoluntaryInsurance(x)).\n\nConclusion:\nIs it possible to switch from voluntary social insurance to compulsory social insurance?",
        "premises": [
            "all x ((WorkedAt(x) & EligibleForCompulsoryInsurance(x)) -> (ParticipateInCompulsoryInsurance(x) & ~ParticipateInVoluntaryInsurance(x) & NotEligible(x))).",
            "all x (MaternityBenefit(x) -> ParticipateInCompulsoryInsurance(x) & ~ParticipateInVoluntaryInsurance(x))."
        ],
        "conclusion": "Is it possible to switch from voluntary social insurance to compulsory social insurance?",
        "id": "dc3ca2e6-3505-4157-94cb-8cdff143296b"
    },
    {
        "raw": "Predicates:\nPostpone(x) | Conscription(x) | Sibling(x) | NonCommissionedOfficer(x) | Soldier(x) | MilitarySchool(x) | NationalEducationSystem(x) | FormalEducation(x) | ContinuingEducation(x) | StudyAbroad(x) | TrainingDuration(x) | SchoolAdmissionDate(x) | Order(x) | EnlistmentNotice(x) | School(x) | AdmissionProcedures(x) | Study(x) | ConcentratedTrainingCourse(x) | FullTimeTrainingCourse(x) | SchoolStipulatedDate(x) | Graduation(x) | LevelOfTraining(x) | BridgeProgram(x) | Attend(x) | StopAttending(x) | DropOut(x) | LegitimateReasons(x) | Enroll(x) | PayTuition(x) | ActuallyAttend(x) | ChangeCourse(x) | Examine(x) | ValidReasons(x).\n\nExplanation:\nPostpone(x): x is entitled to postponement of conscription.\nConscription(x): x is subject to conscription.\nSibling(x): x has one sibling.\nNonCommissionedOfficer(x): x is a non-commissioned officer.\nSoldier(x): x is a soldier.\nMilitarySchool(x): x studies in a military school.\nNationalEducationSystem(x): x is in the national education system.\nFormalEducation(x): x receives formal education.\nContinuingEducation(x): x is in a continuing education program.\nStudyAbroad(x): x studies abroad.\nTrainingDuration(x): x has a training duration.\nSchoolAdmissionDate(x): x has a school admission date.\nOrder(x): x receives an order.\nEnlistmentNotice(x): x receives an enlistment notice.\nSchool(x): x is a school.\nAdmissionProcedures(x): x completes admission procedures.\nStudy(x): x is studying.\nConcentratedTrainingCourse(x): x is in a concentrated training course.\nFullTimeTrainingCourse(x): x is in a full-time training course.\nSchoolStipulatedDate(x): x has a school stipulated date.\nGraduation(x): x graduates.\nLevelOfTraining(x): x is at a certain level of training.\nBridgeProgram(x): x is in a bridge program.\nAttend(x): x attends.\nStopAttending(x): x stops attending.\nDropOut(x): x drops out.\nLegitimateReasons(x): x has legitimate reasons.\nEnroll(x): x enrolls.\nPayTuition(x): x pays tuition.\nActuallyAttend(x): x actually attends.\nChangeCourse(x): x changes course.\nExamine(x): x is examined.\nValidReasons(x): x has valid reasons.\n\nPremises:\nall x (Postpone(x) -> (Sibling(x) & ((NonCommissionedOfficer(x) | Soldier(x)) & (MilitarySchool(x) | NationalEducationSystem(x))))).\nall x (Study(x) -> FormalEducation(x)).\nall x (ContinuingEducation(x) -> Study(x)).\nall x (StudyAbroad(x) -> TrainingDuration(x)).\nall x (SchoolAdmissionDate(x) -> (AdmissionProcedures(x) & Study(x))).\nall x (Order(x) & EnlistmentNotice(x) -> \u00acPostpone(x)).\nall x ((NationalEducationSystem(x) & FormalEducation(x)) -> ConcentratedTrainingCourse(x)).\nall x (ConcentratedTrainingCourse(x) & \u00acContinueStudy(x) -> \u00acPostpone(x)).\nall x (FullTimeTrainingCourse(x) -> (SchoolStipulatedDate(x) & Graduation(x))).\nall x (BridgeProgram(x) -> ContinuousUninterrupted(x)).\nall x (Attend(x) -> \u00ac(NonSpecifiedCourses(x) | StopAttending(x) | DropOut(x) | (StopStudying(x) & LegitimateReasons(x)) | FinishCourse(x) | (Enroll(x) & PayTuition(x) & \u00acActuallyAttend(x)) | (AttendFirstCourse(x) & DropOut(x) & ChangeCourse(x)))).\nall x (Examine(x) & \u00acValidReasons(x) -> Conscription(x)).\n\nConclusion:\nall x ((NationalEducationSystem(x) & FormalEducation(x)) -> \u00acPostpone(x)).",
        "premises": [
            "all x (Postpone(x) -> (Sibling(x) & ((NonCommissionedOfficer(x) | Soldier(x)) & (MilitarySchool(x) | NationalEducationSystem(x))))).",
            "all x (Study(x) -> FormalEducation(x)).",
            "all x (ContinuingEducation(x) -> Study(x)).",
            "all x (StudyAbroad(x) -> TrainingDuration(x)).",
            "all x (SchoolAdmissionDate(x) -> (AdmissionProcedures(x) & Study(x))).",
            "all x (Order(x) & EnlistmentNotice(x) -> \u00acPostpone(x)).",
            "all x ((NationalEducationSystem(x) & FormalEducation(x)) -> ConcentratedTrainingCourse(x)).",
            "all x (ConcentratedTrainingCourse(x) & \u00acContinueStudy(x) -> \u00acPostpone(x)).",
            "all x (FullTimeTrainingCourse(x) -> (SchoolStipulatedDate(x) & Graduation(x))).",
            "all x (BridgeProgram(x) -> ContinuousUninterrupted(x)).",
            "all x (Attend(x) -> \u00ac(NonSpecifiedCourses(x) | StopAttending(x) | DropOut(x) | (StopStudying(x) & LegitimateReasons(x)) | FinishCourse(x) | (Enroll(x) & PayTuition(x) & \u00acActuallyAttend(x)) | (AttendFirstCourse(x) & DropOut(x) & ChangeCourse(x)))).",
            "all x (Examine(x) & \u00acValidReasons(x) -> Conscription(x))."
        ],
        "conclusion": "all x ((NationalEducationSystem(x) & FormalEducation(x)) -> \u00acPostpone(x)).",
        "id": "31b9c53f-ee37-40ff-9f81-8934835f0e96"
    },
    {
        "raw": "Predicates:\nPatient(x) | MedicalExam(x) | Treatment(x) | HealthFacility(x) | HealthInsuranceCard(x) | Contract(x) | Sign(x) | Pay(x) | BringDocuments(x) | SocialInsuranceAgency(x) | DirectPayment(x) | Benefits(x) | TechnicalLevels(x) | Techniques(x) | HospitalGrade(x) | ValidDocuments(x) | MinistryOfHealth(x) | MinistryOfFinance(x) | Costs(x) | Payment(x) | HealthFund(x) | Exceed(x) | Level(x) | Appendix(x) | Circular(x) | Dossier(x) | WrittenRequest(x) | ValidPhoto(x) | HospitalDischargePaper(x) | Prescription(x) | MedicalBook(x) | SocialSecurityOffice(x) | FollowProcedures(x) | PowerOfAttorney(x) | Certificate(x) | LegalRepresentation(x) | UniversityHospital(x).\n\nExplanation:\nPatient(x): x is a patient.\nMedicalExam(x): x undergoes medical examination.\nTreatment(x): x receives medical treatment.\nHealthFacility(x): x is a health facility.\nHealthInsuranceCard(x): x has a health insurance card.\nContract(x): x signs a contract.\nSign(x): x signs.\nPay(x): x pays.\nBringDocuments(x): x brings documents.\nSocialInsuranceAgency(x): x is the social insurance agency.\nDirectPayment(x): x receives direct payment.\nBenefits(x): x receives benefits.\nTechnicalLevels(x): x has technical levels.\nTechniques(x): x uses medical techniques.\nHospitalGrade(x): x is of hospital grade.\nValidDocuments(x): x has valid documents.\nMinistryOfHealth(x): x is the Ministry of Health.\nMinistryOfFinance(x): x is the Ministry of Finance.\nCosts(x): x incurs costs.\nPayment(x): x makes a payment.\nHealthFund(x): x is the health fund.\nExceed(x): x exceeds.\nLevel(x): x is a level.\nAppendix(x): x is an appendix.\nCircular(x): x is a circular.\nDossier(x): x has a dossier.\nWrittenRequest(x): x has a written request.\nValidPhoto(x): x has a valid photo.\nHospitalDischargePaper(x): x has a hospital discharge paper.\nPrescription(x): x has a prescription.\nMedicalBook(x): x has a medical book.\nSocialSecurityOffice(x): x is the social security office.\nFollowProcedures(x): x follows payment procedures.\nPowerOfAttorney(x): x has a power of attorney.\nCertificate(x): x has a certificate.\nLegalRepresentation(x): x has legal representation.\nUniversityHospital(x): x is the University of Medicine and Pharmacy Hospital.\n\nPremises:\nall x (Patient(x) & MedicalExam(x) & Treatment(x) & HealthFacility(x) & (-HealthInsuranceCard(x) | -Contract(x)) -> (Pay(x) & BringDocuments(x) & SocialInsuranceAgency(x) & DirectPayment(x) & Benefits(x) & TechnicalLevels(x) & Techniques(x) & HospitalGrade(x) & ValidDocuments(x) & MinistryOfHealth(x) & MinistryOfFinance(x) & Costs(x) & Payment(x) & HealthFund(x) & -Exceed(x) & Level(x) & Appendix(x) & Circular(x))).\nall x (Dossier(x) -> (WrittenRequest(x) & ValidPhoto(x) & HospitalDischargePaper(x) & Prescription(x) & MedicalBook(x))).\nall x (Patient(x) & -FollowProcedures(x) -> (PowerOfAttorney(x) | Certificate(x) | LegalRepresentation(x))).\n\nConclusion:\nPatient(x) & UniversityHospital(x) & -HealthInsuranceCard(x) -> \u00acPayment(x).",
        "premises": [
            "all x (Patient(x) & MedicalExam(x) & Treatment(x) & HealthFacility(x) & (-HealthInsuranceCard(x) | -Contract(x)) -> (Pay(x) & BringDocuments(x) & SocialInsuranceAgency(x) & DirectPayment(x) & Benefits(x) & TechnicalLevels(x) & Techniques(x) & HospitalGrade(x) & ValidDocuments(x) & MinistryOfHealth(x) & MinistryOfFinance(x) & Costs(x) & Payment(x) & HealthFund(x) & -Exceed(x) & Level(x) & Appendix(x) & Circular(x))).",
            "all x (Dossier(x) -> (WrittenRequest(x) & ValidPhoto(x) & HospitalDischargePaper(x) & Prescription(x) & MedicalBook(x))).",
            "all x (Patient(x) & -FollowProcedures(x) -> (PowerOfAttorney(x) | Certificate(x) | LegalRepresentation(x)))."
        ],
        "conclusion": "Patient(x) & UniversityHospital(x) & -HealthInsuranceCard(x) -> \u00acPayment(x).",
        "id": "70b60076-ec55-431f-9b3e-c0b440d90dbe"
    },
    {
        "raw": "Predicates:\nEntitled(x) | Participate(x) | Leave(x) | Pay(x) | Adopt(x) | Pregnant(x) | GiveBirth(x) | PutDevice(x) | Sterilization(x) | Twins(x) | AdditionalLeave(x) | CheckUp(x) | WorkingDays(x) | GiveBirthSamePlace(x) | EnjoyBenefits(x) | SocialInsurance(x) | HealthInsurance(x) | MaternityBenefits(x) | Employee(x) | FemaleEmployee(x) | Child(x) | UnderFourMonthsChild(x) | IntrauterineDevice(x).\n\nExplanation:\nEntitled(x): x is entitled to a specific benefit.\nParticipate(x): x participates in a specific program.\nLeave(x): x takes leave.\nPay(x): x pays for a service.\nAdopt(x): x adopts a child.\nPregnant(x): x is pregnant.\nGiveBirth(x): x gives birth.\nPutDevice(x): x puts an intrauterine device.\nSterilization(x): x undergoes sterilization.\nTwins(x): x gives birth to twins.\nAdditionalLeave(x): x is entitled to additional leave.\nCheckUp(x): x undergoes a check-up.\nWorkingDays(x): x is calculated by working days.\nGiveBirthSamePlace(x): x gives birth at the same place of initial medical care.\nEnjoyBenefits(x): x enjoys benefits.\nSocialInsurance(x): x is related to social insurance.\nHealthInsurance(x): x is related to health insurance.\nMaternityBenefits(x): x is related to maternity benefits.\nEmployee(x): x is an employee.\nFemaleEmployee(x): x is a female employee.\nChild(x): x is a child.\nUnderFourMonthsChild(x): x adopts an under-four-month child.\nIntrauterineDevice(x): x puts an intrauterine device.\n\nPremises:\nall x (Entitled(x) -> (Participate(x) | Leave(x) | Pay(x) | Adopt(x) | Pregnant(x) | GiveBirth(x) | PutDevice(x) | Sterilization(x))).\nall x (Participate(x) & FemaleEmployee(x) -> (Entitled(x) & MaternityBenefits(x))).\nall x (GiveBirth(x) & Adopt(x) -> (Participate(x) & Pay(x))).\nall x (Twins(x) -> (GiveBirth(x) & AdditionalLeave(x))).\nall x (CheckUp(x) -> WorkingDays(x)).\nall x (GiveBirthSamePlace(x) -> EnjoyBenefits(x)).\nall x (SocialInsurance(x) & HealthInsurance(x) -> Entitled(x)).\n\nConclusion:\nExist x (Entitled(x) & -SocialInsurance(x) & -HealthInsurance(x)).",
        "premises": [
            "all x (Entitled(x) -> (Participate(x) | Leave(x) | Pay(x) | Adopt(x) | Pregnant(x) | GiveBirth(x) | PutDevice(x) | Sterilization(x))).",
            "all x (Participate(x) & FemaleEmployee(x) -> (Entitled(x) & MaternityBenefits(x))).",
            "all x (GiveBirth(x) & Adopt(x) -> (Participate(x) & Pay(x))).",
            "all x (Twins(x) -> (GiveBirth(x) & AdditionalLeave(x))).",
            "all x (CheckUp(x) -> WorkingDays(x)).",
            "all x (GiveBirthSamePlace(x) -> EnjoyBenefits(x)).",
            "all x (SocialInsurance(x) & HealthInsurance(x) -> Entitled(x))."
        ],
        "conclusion": "Exist x (Entitled(x) & -SocialInsurance(x) & -HealthInsurance(x)).",
        "id": "7a81af60-1f5d-43ac-bb43-b4afe8ed0d87"
    },
    {
        "raw": "Predicates:\nParticipate(x, y) | Compulsory(x) | Voluntary(x) | Work(x) | Unable(x) | Possible(x).\n\nExplanation:\nParticipate(x, y): x participates in insurance y.\nCompulsory(x): x is compulsory insurance.\nVoluntary(x): x is voluntary insurance.\nWork(x): x works.\nUnable(x): x is unable to work.\nPossible(x): x is possible.\n\nPremises:\nall x (Unable(x) -> Participate(x, Voluntary)).\nall x (Work(x) -> Participate(x, Compulsory)).\n\nConclusion:\nPossible(all x (Participate(x, Compulsory) & Participate(x, Voluntary))).",
        "premises": [
            "all x (Unable(x) -> Participate(x, Voluntary)).",
            "all x (Work(x) -> Participate(x, Compulsory))."
        ],
        "conclusion": "Possible(all x (Participate(x, Compulsory) & Participate(x, Voluntary))).",
        "id": "86f1fdbc-28b7-4306-a744-f9ebcd7d1cdb"
    },
    {
        "raw": "Predicates:\nParticipate(x) | Valid(x) | Return(x) | GiveBirth(x) | Use(x) | MaternityBenefits(x) | Eligible(x) | PoorHousehold(x) | HealthInsuranceCard(x) | Employer(x) | PeopleCommittee(x) | Commune(x).\n\nExplanation:\nParticipate(x): x is required to participate.\nValid(x): x is valid.\nReturn(x): x needs to return.\nGiveBirth(x): x gives birth.\nUse(x): x uses.\nMaternityBenefits(x): x receives maternity benefits.\nEligible(x): x is eligible.\nPoorHousehold(x): x has a poor household.\nHealthInsuranceCard(x): x has a health insurance card.\nEmployer(x): x is the employer.\nPeopleCommittee(x): x is the People's Committee.\nCommune(x): x is the commune.\n\nPremises:\nall x (Participate(x) -> (HealthInsuranceCard(x) & Employer(x))).\n-Valid(x) | Return(x).\nall x (GiveBirth(x) -> (Use(Employer(x)) & MaternityBenefits(x))).\nall x (Use(PoorHousehold(x)) -> -Eligible(x)).\nall x (Use(Employer(x)) -> MaternityBenefits(x)).\n\nConclusion:\n-Use(PoorHousehold(x)) | -Eligible(x).",
        "premises": [
            "all x (Participate(x) -> (HealthInsuranceCard(x) & Employer(x))).",
            "-Valid(x) | Return(x).",
            "all x (GiveBirth(x) -> (Use(Employer(x)) & MaternityBenefits(x))).",
            "all x (Use(PoorHousehold(x)) -> -Eligible(x)).",
            "all x (Use(Employer(x)) -> MaternityBenefits(x))."
        ],
        "conclusion": "-Use(PoorHousehold(x)) | -Eligible(x).",
        "id": "4ef9ba76-3299-4ec9-84de-5a0ac6f31bd6"
    },
    {
        "raw": "Predicates:\nHealthInsurance(x) | HealthInsuranceCard(x) | ChildbirthCosts(x) | RegularMedicalCare(x) | Hospital(x) | Location(x) | SocialInsuranceAgency(x) | Pay(x) | Rate(x) | MedicalServices(x) | CommuneLevel(x) | TotalCost(x) | BasePay(x) | ConsecutiveYears(x) | CoPayments(x) | Certificate(x) | NonCoPayment(x) | Benefit(x) | Employee(x) | BuyInsurance(x).\n\nExplanation:\nHealthInsurance(x): x has health insurance.\nHealthInsuranceCard(x): x has a health insurance card.\nChildbirthCosts(x): x incurs childbirth costs.\nRegularMedicalCare(x): x receives regular medical care.\nHospital(x): x is a hospital.\nLocation(x): x is located at a specific place.\nSocialInsuranceAgency(x): x is the social insurance agency.\nPay(x): x is paid.\nRate(x): x is paid at a certain rate.\nMedicalServices(x): x receives medical services.\nCommuneLevel(x): x receives medical services at the commune level.\nTotalCost(x): x incurs a total cost.\nBasePay(x): x is the base pay amount.\nConsecutiveYears(x): x has participated in health insurance for consecutive years.\nCoPayments(x): x has co-payments for medical expenses.\nCertificate(x): x is granted a certificate.\nNonCoPayment(x): x is granted a certificate of non-co-payment.\nBenefit(x): x receives a benefit.\nEmployee(x): x is an employee.\nBuyInsurance(x): x buys health insurance.\n\nPremises:\nall x (HealthInsuranceCard(x) & RegularMedicalCare(x) & Hospital(x) & Location(x) & SocialInsuranceAgency(x) & (Rate(x) = 100%)).\nall x (HealthInsuranceCard(x) & RegularMedicalCare(x) & Hospital(x) & Location(x) & SocialInsuranceAgency(x) & (Rate(x) = 80%)).\nall x (ConsecutiveYears(x) & CoPayments(x) & Certificate(x) -> NonCoPayment(x)).\nall x (ConsecutiveYears(x) & CoPayments(x) & Certificate(x) -> Benefit(x)).\nall x (Employee(x) & (CoPayments(x) > 6 months' base salary) & BuyInsurance(x) -> Benefit(x)).\n\nConclusion:\nexists x (Employee(x) & BuyInsurance(x) & Benefit(x)).",
        "premises": [
            "all x (HealthInsuranceCard(x) & RegularMedicalCare(x) & Hospital(x) & Location(x) & SocialInsuranceAgency(x) & (Rate(x) = 100%)).",
            "all x (HealthInsuranceCard(x) & RegularMedicalCare(x) & Hospital(x) & Location(x) & SocialInsuranceAgency(x) & (Rate(x) = 80%)).",
            "all x (ConsecutiveYears(x) & CoPayments(x) & Certificate(x) -> NonCoPayment(x)).",
            "all x (ConsecutiveYears(x) & CoPayments(x) & Certificate(x) -> Benefit(x)).",
            "all x (Employee(x) & (CoPayments(x) > 6 months' base salary) & BuyInsurance(x) -> Benefit(x))."
        ],
        "conclusion": "exists x (Employee(x) & BuyInsurance(x) & Benefit(x)).",
        "id": "4b7f4894-0434-4998-b807-74e051d6f7f4"
    },
    {
        "raw": "Predicates:\nMember(x, y) | Group(x) | UseCard(x) | Pay(x) | ReturnCard(x) | ReturnPremium(x) | PublicServant(x) | PoliceRelative(x) | SocialInsuranceAgency(x) | Spouse(x, y) | ServePolice(x) | Participate(x) | HealthInsurance(x) | Work(x).\n\nExplanation:\nMember(x, y): x is a member of entity y.\nGroup(x): x belongs to a specific group.\nUseCard(x): x uses a health insurance card.\nPay(x): x pays for health insurance.\nReturnCard(x): x returns a health insurance card.\nReturnPremium(x): x receives the collected health insurance premium.\nPublicServant(x): x is a public servant.\nPoliceRelative(x): x is a relative of a police officer.\nSocialInsuranceAgency(x): x is the social insurance agency.\nSpouse(x, y): x is the spouse of y.\nServePolice(x): x serves in the police.\nParticipate(x): x participates in health insurance.\nHealthInsurance(x): x has health insurance.\nWork(x): x works.\n\nPremises:\nall x, y ((Member(x, y) & Group(x)) -> (Group(x) = 1)).\nall x (UseCard(x) -> (Group(x) = 1)).\nall x ((PublicServant(x) & Group(x) = 1) -> Pay(x)).\nall x ((PoliceRelative(x) & ServePolice(x)) -> ReturnCard(x)).\nall x ((PoliceRelative(x) & ServePolice(x)) -> ReturnPremium(SocialInsuranceAgency(x))).\n\nConclusion:\nExist x, y (Spouse(x, y) & PoliceRelative(y) & Work(x) & -Participate(x)).",
        "premises": [
            "all x, y ((Member(x, y) & Group(x)) -> (Group(x) = 1)).",
            "all x (UseCard(x) -> (Group(x) = 1)).",
            "all x ((PublicServant(x) & Group(x) = 1) -> Pay(x)).",
            "all x ((PoliceRelative(x) & ServePolice(x)) -> ReturnCard(x)).",
            "all x ((PoliceRelative(x) & ServePolice(x)) -> ReturnPremium(SocialInsuranceAgency(x)))."
        ],
        "conclusion": "Exist x, y (Spouse(x, y) & PoliceRelative(y) & Work(x) & -Participate(x)).",
        "id": "fa04eca7-4055-4299-9d44-093b8f7b206a"
    },
    {
        "raw": "Predicates:\nChange(x) | Damaged(x) | InformationChanged(x) | GenderChanged(x) | HometownRedetermined(x) | ErrorInInformation(x) | RequestOfCitizen(x) | Lost(x) | RestoreVietnameseNationality(x) | ChangePermanentResidence(x) | RenewCitizenship(x) | SubmitDocument(x) | RecoverUsedCard(x) | RecoverUsedCardForCases(x) | FollowProcedures(x) | CollectInformation(x) | SelectTypeOfCard(x) | DescribeIdentityCharacteristics(x) | CollectFingerprints(x) | TakePortraitPhotos(x) | PrintInformation(x) | IssueAppointmentPapers(x) | RetrieveCard(x) | SearchIdentificationInformation(x) | ProcessApplications(x) | ApproveApplications(x) | ReturnCards(x) | RegisterForReturn(x) | CoordinateWithDelivery(x) | PayCharges(x).\n\nExplanation:\nChange(x): x undergoes a change in Citizen Identification Card.\nDamaged(x): x's Citizen Identification Card is damaged beyond use.\nInformationChanged(x): x's information on the Citizen Identification Card is changed.\nGenderChanged(x): x's gender is changed.\nHometownRedetermined(x): x's hometown is re-determined.\nErrorInInformation(x): there is an error in information on x's Citizen Identification Card.\nRequestOfCitizen(x): x requests a change.\nLost(x): x's Citizen Identification Card is lost.\nRestoreVietnameseNationality(x): x's Vietnamese nationality is restored.\nChangePermanentResidence(x): x changes permanent residence.\nRenewCitizenship(x): x needs to renew citizenship.\nSubmitDocument(x): x submits a document.\nRecoverUsedCard(x): used citizen's identity cards are recovered.\nRecoverUsedCardForCases(x): used citizen's identity cards are recovered in specific cases.\nFollowProcedures(x): x follows specified procedures.\nCollectInformation(x): information is collected.\nSelectTypeOfCard(x): type of card is selected.\nDescribeIdentityCharacteristics(x): identity characteristics are described.\nCollectFingerprints(x): fingerprints are collected.\nTakePortraitPhotos(x): portrait photos are taken.\nPrintInformation(x): information is printed.\nIssueAppointmentPapers(x): appointment papers are issued.\nRetrieveCard(x): card is retrieved.\nSearchIdentificationInformation(x): identification information is searched.\nProcessApplications(x): applications are processed.\nApproveApplications(x): applications are approved.\nReturnCards(x): cards are returned.\nRegisterForReturn(x): citizens register for the return of cards.\nCoordinateWithDelivery(x): coordination with delivery service providers is done.\nPayCharges(x): charges are paid.\n\nPremises:\nall x (Change(x) -> (Damaged(x) | InformationChanged(x) | GenderChanged(x) | HometownRedetermined(x) | ErrorInInformation(x) | RequestOfCitizen(x))).\nLost(x).\nall x (RestoreVietnameseNationality(x) -> ChangePermanentResidence(x)).\nall x (SubmitDocument(x) -> CollectInformation(x)).\nall x (FollowProcedures(x) -> (CollectInformation(x) & SelectTypeOfCard(x) & DescribeIdentityCharacteristics(x) & CollectFingerprints(x) & TakePortraitPhotos(x) & PrintInformation(x) & IssueAppointmentPapers(x))).\nall x (RetrieveCard(x) -> (ChangePermanentResidence(x) | Change(x))).\nall x (ProcessApplications(x) -> ApproveApplications(x)).\nall x (ReturnCards(x) -> RegisterForReturn(x) & CoordinateWithDelivery(x) & PayCharges(x)).\n\nConclusion:\nall x (ChangePermanentResidence(x) -> RenewCitizenship(x)).",
        "premises": [
            "all x (Change(x) -> (Damaged(x) | InformationChanged(x) | GenderChanged(x) | HometownRedetermined(x) | ErrorInInformation(x) | RequestOfCitizen(x))).",
            "Lost(x).",
            "all x (RestoreVietnameseNationality(x) -> ChangePermanentResidence(x)).",
            "all x (SubmitDocument(x) -> CollectInformation(x)).",
            "all x (FollowProcedures(x) -> (CollectInformation(x) & SelectTypeOfCard(x) & DescribeIdentityCharacteristics(x) & CollectFingerprints(x) & TakePortraitPhotos(x) & PrintInformation(x) & IssueAppointmentPapers(x))).",
            "all x (RetrieveCard(x) -> (ChangePermanentResidence(x) | Change(x))).",
            "all x (ProcessApplications(x) -> ApproveApplications(x)).",
            "all x (ReturnCards(x) -> RegisterForReturn(x) & CoordinateWithDelivery(x) & PayCharges(x))."
        ],
        "conclusion": "all x (ChangePermanentResidence(x) -> RenewCitizenship(x)).",
        "id": "3777135a-b0cb-4ea1-bee8-13a57c92d958"
    },
    {
        "raw": "Predicates:\nRegisterDeath(x) | CommunePeopleCommittee(x) | LastResidence(x) | Unidentifiable(x) | Died(x) | Discovered(x) | Residence(x) | Permanent(x) | Temporary(x) | CurrentStay(x) | Register(x) | Allowed(x).\n\nExplanation:\nRegisterDeath(x): x registers a death.\nCommunePeopleCommittee(x): x is the commune-level People's Committee.\nLastResidence(x): x is the last place of residence.\nUnidentifiable(x): x is unidentifiable.\nDied(x): x died.\nDiscovered(x): x's body was discovered.\nResidence(x): x's residence.\nPermanent(x): x's permanent residence.\nTemporary(x): x's temporary residence.\nCurrentStay(x): x's current place of stay.\nRegister(x): x registers.\nAllowed(x): x is allowed.\n\nPremises:\nall x (RegisterDeath(x) -> (CommunePeopleCommittee(x) & LastResidence(x))).\nall x ((LastResidence(x) & Unidentifiable(x)) -> CommunePeopleCommittee(x)).\nall x ((LastResidence(x) & Unidentifiable(x)) -> Register(x)).\nall x ((Residence(x) & Permanent(x) & Temporary(x)) -> CurrentStay(x)).\nall x ((Permanent(x) | Temporary(x)) -> Residence(x)).\nall x (CommunePeopleCommittee(x) -> RegisterDeath(x)).\nall x (Residence(x) -> Permanent(x) | Temporary(x)).\n\nConclusion:\nall x ((Died(x) | Discovered(x)) & Temporary(x) -> Allowed(x)).",
        "premises": [
            "all x (RegisterDeath(x) -> (CommunePeopleCommittee(x) & LastResidence(x))).",
            "all x ((LastResidence(x) & Unidentifiable(x)) -> CommunePeopleCommittee(x)).",
            "all x ((LastResidence(x) & Unidentifiable(x)) -> Register(x)).",
            "all x ((Residence(x) & Permanent(x) & Temporary(x)) -> CurrentStay(x)).",
            "all x ((Permanent(x) | Temporary(x)) -> Residence(x)).",
            "all x (CommunePeopleCommittee(x) -> RegisterDeath(x)).",
            "all x (Residence(x) -> Permanent(x) | Temporary(x))."
        ],
        "conclusion": "all x ((Died(x) | Discovered(x)) & Temporary(x) -> Allowed(x)).",
        "id": "80e16e72-c33f-4904-940e-453ebbd7490e"
    },
    {
        "raw": "Predicates:\nSelfPrintedInvoice(x) | AccountingSoftware(x) | SaleSoftware(x) | Organizations(x) | TaxOffices(x) | Decisions(x) | InvoiceNumber(x) | Copy(x) | InvoicePrintingSoftware(x) | DataChange(x) | Authorized(x).\n\nExplanation:\nSelfPrintedInvoice(x): x applies self-printed invoices.\nAccountingSoftware(x): x has accounting software.\nSaleSoftware(x): x has sale software.\nOrganizations(x): x is an organization.\nTaxOffices(x): x is a tax office.\nDecisions(x): x issues decisions.\nInvoiceNumber(x): x is an ordinal number on invoices.\nCopy(x): x is a copy of an invoice.\nInvoicePrintingSoftware(x): x is invoice-printing software.\nDataChange(x): x changes data on applications.\nAuthorized(x): x is authorized.\n\nPremises:\nall x (SelfPrintedInvoice(x) & (PointA(x) -> ~AccountingSoftware(x))).\nall x (SelfPrintedInvoice(x) & (PointB(x) -> AccountingSoftware(x) & SaleSoftware(x))).\nall x (Organizations(x) & SelfPrintedInvoice(x) -> Decisions(x) & Responsibility(x)).\nall x (InvoiceNumber(x) -> PrintedOnce(x) & (PrintedAgain(x) -> Copy(x))).\nall x (InvoicePrintingSoftware(x) -> Confidentiality(x) & Decentralization(x)).\nUnauthorized(x) & DataChange(x).\n\nConclusion:\n~all x (Organizations(x) & SelfPrintedInvoice(x) -> Decisions(x) & Responsibility(x)).",
        "premises": [
            "all x (SelfPrintedInvoice(x) & (PointA(x) -> ~AccountingSoftware(x))).",
            "all x (SelfPrintedInvoice(x) & (PointB(x) -> AccountingSoftware(x) & SaleSoftware(x))).",
            "all x (Organizations(x) & SelfPrintedInvoice(x) -> Decisions(x) & Responsibility(x)).",
            "all x (InvoiceNumber(x) -> PrintedOnce(x) & (PrintedAgain(x) -> Copy(x))).",
            "all x (InvoicePrintingSoftware(x) -> Confidentiality(x) & Decentralization(x)).",
            "Unauthorized(x) & DataChange(x)."
        ],
        "conclusion": "~all x (Organizations(x) & SelfPrintedInvoice(x) -> Decisions(x) & Responsibility(x)).",
        "id": "39cee6c8-c086-4a40-88fb-03f281469e5e"
    },
    {
        "raw": "Predicates:\nOrganization(x) | Enterprise(x) | BusinessActivity(x) | BusinessHousehold(x) | Individual(x) | ExtraSmallEnterprise(x) | DifficultArea(x) | SelfPrintingEligible(x) | BuyInvoices(x) | TaxOffice(x) | PrintInvoices(x).\n\nExplanation:\nOrganization(x): x is an organization.\nEnterprise(x): x is an enterprise.\nBusinessActivity(x): x engages in business activities.\nBusinessHousehold(x): x is a business household.\nIndividual(x): x is an individual.\nExtraSmallEnterprise(x): x is an extra-small enterprise.\nDifficultArea(x): x is in a geographical area with difficult or extremely difficult socio-economic conditions.\nSelfPrintingEligible(x): x is eligible for self-printing invoices.\nBuyInvoices(x): x buys invoices.\nTaxOffice(x): x is a tax office.\nPrintInvoices(x): x prints invoices.\n\nPremises:\nall x ((Organization(x) & \u00acEnterprise(x)) -> (BusinessActivity(x) | BusinessHousehold(x) | Individual(x) | ExtraSmallEnterprise(x) | DifficultArea(x))).\n\u00acSelfPrintingEligible(x) -> BuyInvoices(x).\nall x ((\u00acPrintInvoices(x) & \u00acSelfPrintingEligible(x)) -> BuyInvoices(TaxOffice(x))).\n\nConclusion:\nall x ((\u00acPrintInvoices(x) & \u00acSelfPrintingEligible(x)) -> BuyInvoices(TaxOffice(x))).",
        "premises": [
            "all x ((Organization(x) & \u00acEnterprise(x)) -> (BusinessActivity(x) | BusinessHousehold(x) | Individual(x) | ExtraSmallEnterprise(x) | DifficultArea(x))).",
            "\u00acSelfPrintingEligible(x) -> BuyInvoices(x).",
            "all x ((\u00acPrintInvoices(x) & \u00acSelfPrintingEligible(x)) -> BuyInvoices(TaxOffice(x)))."
        ],
        "conclusion": "all x ((\u00acPrintInvoices(x) & \u00acSelfPrintingEligible(x)) -> BuyInvoices(TaxOffice(x))).",
        "id": "84996f9b-d0fe-4f40-a860-cb6537aa06e6"
    },
    {
        "raw": "Predicates:\nUse(x) | Print(x) | Electronic(x) | Invoice(x) | Organization(x).\n\nExplanation:\nUse(x): x uses invoices.\nPrint(x): x prints invoices.\nElectronic(x): x uses electronic invoices.\nInvoice(x): x is an invoice.\nOrganization(x): x is an organization.\n\nPremises:\nall x (Use(x) -> (Print(x) | Electronic(x))).\n\nConclusion:\nall x (Organization(x) -> (Print(x) & Electronic(x))).",
        "premises": [
            "all x (Use(x) -> (Print(x) | Electronic(x)))."
        ],
        "conclusion": "all x (Organization(x) -> (Print(x) & Electronic(x))).",
        "id": "133acf38-3607-43eb-9f2d-70c6898e4a59"
    },
    {
        "raw": "Predicates:\nAuthorize(x, y) | Register(x, y) | Specify(x, y) | Earn(x, y) | Provide(x, y) | CarryOut(x, y) | PayTax(x, y) | Notify(x, y) | Entitled(x) | Employee(x) | Employer(x) | Tax(x) | Document(x) | Individual(x) | Dependant(x) | Agency(x) | IdentificationNumber(x) | Declaration(x) | Payment(x).\n\nExplanation:\nAuthorize(x, y): x authorizes y to perform a specific action.\nRegister(x, y): x registers with y.\nSpecify(x, y): x is specified in y.\nEarn(x, y): x earns income from y.\nProvide(x, y): x provides y.\nCarryOut(x, y): x carries out an action on behalf of y.\nPayTax(x, y): x pays tax to y.\nNotify(x, y): x notifies y.\nEntitled(x): x is entitled to do something.\nEmployee(x): x is an employee.\nEmployer(x): x is an employer.\nTax(x): x refers to tax.\nDocument(x): x is a document.\nIndividual(x): x is an individual.\nDependant(x): x is a dependant.\nAgency(x): x is an agency.\nIdentificationNumber(x): x is an identification number.\nDeclaration(x): x refers to tax declaration.\nPayment(x): x refers to tax payment.\n\nPremises:\nall x,y (Earn(x, y) & Specify(x, y) -> Register(x, y)).\nall x,y (Earn(x, y) & Employer(x) -> Authorize(x, Employer(x))).\nall x,y (Individual(x) & Earn(x, y) -> Provide(x, Document(y))).\nall x,y (Individual(x) & Employer(y) -> CarryOut(y, Register(x, Dependant(x)))).\nall x,y (Individual(x) & PayTax(x, Agency(y)) -> Authorize(x, Agency(y))).\nall x,y (Individual(x) & Notify(x, IdentificationNumber(y)) -> Notify(x, Payment(y)).\n\nConclusion:\nall x (Employee(x) & Entitled(x) -> Authorize(x, Employer(x))).",
        "premises": [
            "all x,y (Earn(x, y) & Specify(x, y) -> Register(x, y)).",
            "all x,y (Earn(x, y) & Employer(x) -> Authorize(x, Employer(x))).",
            "all x,y (Individual(x) & Earn(x, y) -> Provide(x, Document(y))).",
            "all x,y (Individual(x) & Employer(y) -> CarryOut(y, Register(x, Dependant(x)))).",
            "all x,y (Individual(x) & PayTax(x, Agency(y)) -> Authorize(x, Agency(y))).",
            "all x,y (Individual(x) & Notify(x, IdentificationNumber(y)) -> Notify(x, Payment(y))."
        ],
        "conclusion": "all x (Employee(x) & Entitled(x) -> Authorize(x, Employer(x))).",
        "id": "f9a2c172-ef1b-4839-9c9a-032d4485a0ad"
    },
    {
        "raw": "Predicates:\nReactivate(x) | FulfillTaxLiabilities(x) | Taxpayer(x) | Enterprise(x) | BusinessEntity(x) | OtherEntity(x) | HouseholdBusiness(x) | Notify(x) | Operate(x) | RegisteredAddress(x) | BusinessRegistrationAuthority(x) | Decision(x) | Revocation(x) | Certificate(x) | RegulatoryAuthority(x) | Document(x) | License(x).\n\nExplanation:\nReactivate(x): x is reactivated.\nFulfillTaxLiabilities(x): x fulfills tax liabilities.\nTaxpayer(x): x is a taxpayer.\nEnterprise(x): x is an enterprise.\nBusinessEntity(x): x is a business entity.\nOtherEntity(x): x is another entity.\nHouseholdBusiness(x): x is a household business.\nNotify(x): x is notified.\nOperate(x): x operates.\nRegisteredAddress(x): x has a registered address.\nBusinessRegistrationAuthority(x): x is the business registration authority.\nDecision(x): x is a decision.\nRevocation(x): x is a revocation.\nCertificate(x): x is a certificate.\nRegulatoryAuthority(x): x is a regulatory authority.\nDocument(x): x is a document.\nLicense(x): x is a license.\n\nPremises:\nall x (Reactivate(x) & FulfillTaxLiabilities(x) -> Notify(x) & (Enterprise(x) | BusinessEntity(x) | OtherEntity(x) | HouseholdBusiness(x)) & \u00acOperate(x) & RegisteredAddress(x) & \u00acDecision(x) & Revocation(x) & (Certificate(x) | Document(x) | License(x))).\n-Operate(x) | \u00acRegisteredAddress(x) | Decision(x) | \u00acRevocation(x) | Certificate(x).\nDocument(x) -> Revocation(x).\n\nConclusion:\nReactivate(x).",
        "premises": [
            "all x (Reactivate(x) & FulfillTaxLiabilities(x) -> Notify(x) & (Enterprise(x) | BusinessEntity(x) | OtherEntity(x) | HouseholdBusiness(x)) & \u00acOperate(x) & RegisteredAddress(x) & \u00acDecision(x) & Revocation(x) & (Certificate(x) | Document(x) | License(x))).",
            "-Operate(x) | \u00acRegisteredAddress(x) | Decision(x) | \u00acRevocation(x) | Certificate(x).",
            "Document(x) -> Revocation(x)."
        ],
        "conclusion": "Reactivate(x).",
        "id": "38693347-2dba-4022-8e4c-67c5211b8da6"
    },
    {
        "raw": "Predicates:\nReactivate(x, y) | Operation(x) | Taxpayer(y) | BusinessEntity(y) | OtherEntity(y) | HouseholdBusiness(y) | SubmitApplication(y) | Deactivate(y) | Notification(y) | WishResume(y) | TID(y).\n\nExplanation:\nReactivate(x, y): x reactivates the tax identification number of y.\nOperation(x): x is an operation.\nTaxpayer(y): y is a taxpayer.\nBusinessEntity(y): y is a business entity.\nOtherEntity(y): y is another entity.\nHouseholdBusiness(y): y is a household business.\nSubmitApplication(y): y submits an application.\nDeactivate(y): y deactivates.\nNotification(y): y receives a notification.\nWishResume(y): y wishes to resume operation.\nTID(y): y has a tax identification number.\n\nPremises:\nall x, y ((Operation(x) & SubmitApplication(y) & Deactivate(y) & ~Notification(y) & WishResume(y) & Taxpayer(y) & (BusinessEntity(y) | OtherEntity(y) | HouseholdBusiness(y))) -> Reactivate(x, y)).\n\nConclusion:\nall x, y ((Operation(x) & SubmitApplication(y) & Deactivate(y) & ~Notification(y) & WishResume(y) & Taxpayer(y) & (BusinessEntity(y) | OtherEntity(y) | HouseholdBusiness(y))) -> Reactivate(x, y)).",
        "premises": [
            "all x, y ((Operation(x) & SubmitApplication(y) & Deactivate(y) & ~Notification(y) & WishResume(y) & Taxpayer(y) & (BusinessEntity(y) | OtherEntity(y) | HouseholdBusiness(y))) -> Reactivate(x, y))."
        ],
        "conclusion": "all x, y ((Operation(x) & SubmitApplication(y) & Deactivate(y) & ~Notification(y) & WishResume(y) & Taxpayer(y) & (BusinessEntity(y) | OtherEntity(y) | HouseholdBusiness(y))) -> Reactivate(x, y)).",
        "id": "c15cda2d-998a-413a-b925-111c720100ad"
    },
    {
        "raw": "Predicates:\nRegularEntrant(x) | WorkPurpose(x) | DutyFreeQuota(x) | DutyExemptQuota(x) | AircraftOperator(x) | Attendant(x) | TrainOperator(x) | SeagoingShip(x) | VietnameseDriver(x) | Worker(x) | NeighboringCountry(x) | LandBorder(x) | TaxEvasion(x) | HandLuggage(x) | Customs(x).\n\nExplanation:\nRegularEntrant(x): x is a person regularly entering Vietnam for work purposes.\nWorkPurpose(x): x enters Vietnam for work purposes.\nDutyFreeQuota(x): x is entitled to duty-free luggage quotas.\nDutyExemptQuota(x): x is entitled to duty-exempt luggage quotas.\nAircraftOperator(x): x is an aircraft operator.\nAttendant(x): x is an attendant on international flights.\nTrainOperator(x): x is a train operator.\nSeagoingShip(x): x is an officer or crewmember on seagoing ships.\nVietnameseDriver(x): x is a Vietnamese driver.\nWorker(x): x is a worker.\nNeighboringCountry(x): x is in a neighboring country.\nLandBorder(x): x borders on Vietnam's land.\nTaxEvasion(x): x engages in tax evasion.\nHandLuggage(x): x has hand luggage.\nCustoms(x): x relates to customs.\n\nPremises:\nall x (RegularEntrant(x) & WorkPurpose(x) -> -DutyFreeQuota(x) & DutyExemptQuota(x)).\nAircraftOperator(x) & Attendant(x).\nTrainOperator(x) & Attendant(x).\nSeagoingShip(x).\nVietnameseDriver(x) & Worker(x) & NeighboringCountry(x) & LandBorder(x).\nDutyFreeQuota(x) | DutyExemptQuota(x) <- PrimeMinisterDecision(x).\n\nConclusion:\nall x (HandLuggage(x) & -Customs(x) -> TaxEvasion(x)).",
        "premises": [
            "all x (RegularEntrant(x) & WorkPurpose(x) -> -DutyFreeQuota(x) & DutyExemptQuota(x)).",
            "AircraftOperator(x) & Attendant(x).",
            "TrainOperator(x) & Attendant(x).",
            "SeagoingShip(x).",
            "VietnameseDriver(x) & Worker(x) & NeighboringCountry(x) & LandBorder(x).",
            "DutyFreeQuota(x) | DutyExemptQuota(x) <- PrimeMinisterDecision(x)."
        ],
        "conclusion": "all x (HandLuggage(x) & -Customs(x) -> TaxEvasion(x)).",
        "id": "6473199d-f793-4959-81c2-21226cb73cc9"
    },
    {
        "raw": "Predicates:\nRevenue(x) | LessThan100M(x) | Taxpayers(x) | Residents(x) | Manufacture(x) | Sell(x) | GoodsServices(x) | Businesspeople(x) | PracticeIndependently(x) | Licensed(x) | Trades(x) | LotteryAgent(x) | InsuranceAgent(x) | MLM_Agent(x) | FixedPrices(x) | Contract(x) | BusinessCooperation(x) | AgriculturalProduction(x) | ForestryProduction(x) | SaltMaking(x) | Aquaculture(x) | Fishing(x) | TaxExemption(x) | TaxpayersExempt(x) | PersonalIncomeTax(x) | Above100K(x) | FlatTax(x) | Subsidies(x) | Factors(x) | Assessment(x) | LocalTrades(x) | Groceries(x) | Home(x) | Taxes(x).\n\nExplanation:\nRevenue(x): x's revenue amount.\nLessThan100M(x): x's revenue is less than VND 100 million per year.\nTaxpayers(x): x is a taxpayer.\nResidents(x): x is a resident.\nManufacture(x): x manufactures goods.\nSell(x): x sells goods or services.\nGoodsServices(x): x is related to goods and services.\nBusinesspeople(x): x is a businessperson.\nPracticeIndependently(x): x practices independently in business.\nLicensed(x): x has a license.\nTrades(x): x is involved in trades.\nLotteryAgent(x): x acts as a lottery agent.\nInsuranceAgent(x): x acts as an insurance agent.\nMLM_Agent(x): x acts as a multi-level marketing agent.\nFixedPrices(x): x has fixed prices.\nContract(x): x signs a contract.\nBusinessCooperation(x): x cooperates with organizations.\nAgriculturalProduction(x): x is involved in agricultural production.\nForestryProduction(x): x is involved in forestry production.\nSaltMaking(x): x is involved in salt making.\nAquaculture(x): x is involved in aquaculture.\nFishing(x): x is involved in fishing.\nTaxExemption(x): x is exempt from tax.\nTaxpayersExempt(x): x is exempt from being a taxpayer.\nPersonalIncomeTax(x): x is liable to personal income tax.\nAbove100K(x): x's revenue is above $100,000 per year.\nFlatTax(x): x pays a flat tax on revenue.\nSubsidies(x): x receives subsidies.\nFactors(x): x depends on various factors.\nAssessment(x): x is assessed.\nLocalTrades(x): x is related to local trades.\nGroceries(x): x sells groceries.\nHome(x): x sells goods at home.\nTaxes(x): x is related to taxes.\n\nPremises:\nall x (Revenue(x) & LessThan100M(x) -> Taxpayers(x)).\nall x (Taxpayers(x) -> Residents(x) & Manufacture(x) & Sell(x) & GoodsServices(x)).\nall x (PracticeIndependently(x) -> (Licensed(x) | Trades(x) | LotteryAgent(x) | InsuranceAgent(x) | MLM_Agent(x) | BusinessCooperation(x) | AgriculturalProduction(x) | ForestryProduction(x) | SaltMaking(x) | Aquaculture(x) | Fishing(x) & ~TaxExemption(x))).\n~TaxpayersExempt(x) -> ~PersonalIncomeTax(x).\nall x (Revenue(x) & Above100K(x) -> FlatTax(x)).\nall x (Subsidies(x) -> Factors(x) & Assessment(x) & LocalTrades(x)).\n- Taxes(x) | Groceries(x) | Home(x).\n\nConclusion:\nTaxes(Home(x))?.",
        "premises": [
            "all x (Revenue(x) & LessThan100M(x) -> Taxpayers(x)).",
            "all x (Taxpayers(x) -> Residents(x) & Manufacture(x) & Sell(x) & GoodsServices(x)).",
            "all x (PracticeIndependently(x) -> (Licensed(x) | Trades(x) | LotteryAgent(x) | InsuranceAgent(x) | MLM_Agent(x) | BusinessCooperation(x) | AgriculturalProduction(x) | ForestryProduction(x) | SaltMaking(x) | Aquaculture(x) | Fishing(x) & ~TaxExemption(x))).",
            "~TaxpayersExempt(x) -> ~PersonalIncomeTax(x).",
            "all x (Revenue(x) & Above100K(x) -> FlatTax(x)).",
            "all x (Subsidies(x) -> Factors(x) & Assessment(x) & LocalTrades(x)).",
            "- Taxes(x) | Groceries(x) | Home(x)."
        ],
        "conclusion": "Taxes(Home(x))?.",
        "id": "52c3e0e4-7096-44e3-bb8a-6cb0010fcd38"
    },
    {
        "raw": "Predicates:\nLiableToDuty(x) | ExciseTax(x) | Goods(x) | Abroad(x) | Sale(x) | Overseas(x) | Fair(x) | Exhibition(x) | Carry(x) | FillProcedures(x) | Invitation(x) | RegistrationPaper(x) | ExportGoodsDeclaration(x) | Certification(x) | ListOfGoods(x) | MoneyPaymentDocuments(x) | Value(x) | CashCollectedGoods(x) | PrescribedLevel(x) | Seller(x) | Declare(x) | CustomsOffice(x) | ProduceDocument(x) | Remittance(x) | Bank(x) | TaxFree(x) | Qualify(x) | ObtainDocuments(x) | Liquor(x) | Company(x) | Taxed(x).\n\nExplanation:\nLiableToDuty(x): x is liable to duty.\nExciseTax(x): x is subject to excise tax.\nGoods(x): x refers to goods.\nAbroad(x): x is abroad.\nSale(x): x is sold.\nOverseas(x): x is overseas.\nFair(x): x is a fair.\nExhibition(x): x is an exhibition.\nCarry(x): x carries goods.\nFillProcedures(x): x fills procedures.\nInvitation(x): x has an invitation.\nRegistrationPaper(x): x has a registration paper.\nExportGoodsDeclaration(x): x has an export goods declaration.\nCertification(x): x has certification.\nListOfGoods(x): x has a list of goods.\nMoneyPaymentDocuments(x): x has money payment documents.\nValue(x): x refers to value.\nCashCollectedGoods(x): x has cash-collected goods.\nPrescribedLevel(x): x is the prescribed level.\nSeller(x): x is a seller.\nDeclare(x): x declares.\nCustomsOffice(x): x is the customs office.\nProduceDocument(x): x produces a document.\nRemittance(x): x has remittance.\nBank(x): x is a bank.\nTaxFree(x): x is tax-free.\nQualify(x): x qualifies.\nObtainDocuments(x): x obtains documents.\nLiquor(x): x is liquor.\nCompany(x): x is a company.\nTaxed(x): x is taxed.\n\nPremises:\nall x (LiableToDuty(x) & ExciseTax(x) -> -TaxFree(x)).\nall x (Goods(x) & Abroad(x) & Sale(x) & Overseas(x) & Fair(x) & Exhibition(x) -> -LiableToDuty(x) & -ExciseTax(x)).\nall x (Carry(x) & Goods(x) & Abroad(x) & Sale(x) & Overseas(x) & Fair(x) & Exhibition(x) -> FillProcedures(x)).\nall x (FillProcedures(x) -> (Invitation(x) & RegistrationPaper(x) & ExportGoodsDeclaration(x) & Certification(x) & ListOfGoods(x) & MoneyPaymentDocuments(x))).\nall x (Value(x) & CashCollectedGoods(x) & PrescribedLevel(x) & Seller(x) -> (Declare(x) & CustomsOffice(x) & ProduceDocument(x) & Remittance(x) & Bank(x))).\nall x (Carry(x) & Liquor(x) & Abroad(x) & Sale(x) & Fair(x) & Exhibition(x) -> -Taxed(x)).\nall x (Company(x) & Carry(x) & Liquor(x) & Abroad(x) & Sale(x) & Fair(x) & Exhibition(x) -> TaxFree(x)).\nall x (Qualify(x) -> (Invitation(x) & ListOfGoods(x) & MoneyPaymentDocuments(x))).\n\nConclusion:\nall x (Goods(x) & Abroad(x) & Sale(x) & Fair(x) & Exhibition(x) -> -Taxed(x)).",
        "premises": [
            "all x (LiableToDuty(x) & ExciseTax(x) -> -TaxFree(x)).",
            "all x (Goods(x) & Abroad(x) & Sale(x) & Overseas(x) & Fair(x) & Exhibition(x) -> -LiableToDuty(x) & -ExciseTax(x)).",
            "all x (Carry(x) & Goods(x) & Abroad(x) & Sale(x) & Overseas(x) & Fair(x) & Exhibition(x) -> FillProcedures(x)).",
            "all x (FillProcedures(x) -> (Invitation(x) & RegistrationPaper(x) & ExportGoodsDeclaration(x) & Certification(x) & ListOfGoods(x) & MoneyPaymentDocuments(x))).",
            "all x (Value(x) & CashCollectedGoods(x) & PrescribedLevel(x) & Seller(x) -> (Declare(x) & CustomsOffice(x) & ProduceDocument(x) & Remittance(x) & Bank(x))).",
            "all x (Carry(x) & Liquor(x) & Abroad(x) & Sale(x) & Fair(x) & Exhibition(x) -> -Taxed(x)).",
            "all x (Company(x) & Carry(x) & Liquor(x) & Abroad(x) & Sale(x) & Fair(x) & Exhibition(x) -> TaxFree(x)).",
            "all x (Qualify(x) -> (Invitation(x) & ListOfGoods(x) & MoneyPaymentDocuments(x)))."
        ],
        "conclusion": "all x (Goods(x) & Abroad(x) & Sale(x) & Fair(x) & Exhibition(x) -> -Taxed(x)).",
        "id": "2fa34069-cac5-4419-9da6-8d84ab0710e9"
    },
    {
        "raw": "Predicates:\nTaxpayer(x) | Subject(x) | MonthlyDeclaration(x) | QuarterlyDeclaration(x) | Declare(x) | VAT(x) | Company(x).\n\nExplanation:\nTaxpayer(x): x is a taxpayer.\nSubject(x): x is subject to tax declaration.\nMonthlyDeclaration(x): x makes monthly tax declaration.\nQuarterlyDeclaration(x): x makes quarterly tax declaration.\nDeclare(x): x declares taxes.\nVAT(x): x is Value Added Tax.\nCompany(x): x is a company.\n\nPremises:\nall x (Taxpayer(x) & Subject(x) -> (MonthlyDeclaration(x) | QuarterlyDeclaration(x))).\nCompany(x).\nall x (Company(x) -> Subject(x)).\nall x (VAT(x) -> Declare(x)).\n\nConclusion:\nall x (Company(x) & QuarterlyDeclaration(x) -> Declare(VAT(x))).",
        "premises": [
            "all x (Taxpayer(x) & Subject(x) -> (MonthlyDeclaration(x) | QuarterlyDeclaration(x))).",
            "Company(x).",
            "all x (Company(x) -> Subject(x)).",
            "all x (VAT(x) -> Declare(x))."
        ],
        "conclusion": "all x (Company(x) & QuarterlyDeclaration(x) -> Declare(VAT(x))).",
        "id": "b97c3e4f-6c35-4e68-923e-c6823c7c63de"
    },
    {
        "raw": "Predicates:\nComply(x) | Earn(x,y) | Revenue(x,y) | Register(x) | Apply(x) | Provide(x) | Operating(x) | TaxCredit(x) | Foreign(x) | Prospecting(x) | Investment(x) | New(x) | Approval(x) | Authority(x) | ApplyMethod(x) | InvestmentProject(x) | InvestmentPlan(x) | SubjectTo(x,y) | Registration(x) | DoingBusiness(x) | MainContracts(x) | Subcontracts(x) | RecordVAT(x) | Eligible(x) | DeductionMethod(x).\n\nExplanation:\nComply(x): x fully complies with regulations.\nEarn(x,y): x earns y amount.\nRevenue(x,y): x has annual revenue of y.\nRegister(x): x voluntarily registers.\nApply(x): x applies a method.\nProvide(x): x provides goods and services for prospecting.\nOperating(x): x is operating.\nTaxCredit(x): x applies for tax credit method.\nForeign(x): x is foreign.\nProspecting(x): x is prospecting.\nInvestment(x): x has an investment project.\nNew(x): x is newly established.\nApproval(x): x is approved.\nAuthority(x): x is a competent authority.\nApplyMethod(x): x applies a method.\nInvestmentProject(x): x has an investment project.\nInvestmentPlan(x): x has an investment plan.\nSubjectTo(x,y): x is subject to y.\nRegistration(x): x is registered.\nDoingBusiness(x): x is doing business.\nMainContracts(x): x is under main contracts.\nSubcontracts(x): x is under subcontracts.\nRecordVAT(x): x records VAT.\nEligible(x): x is eligible.\nDeductionMethod(x): x is the tax deduction method.\n\nPremises:\nall x (Operating(x) & Earn(x,y) & y >= 1000000000 -> Comply(x)).\nall x (Register(x) & -Apply(x) & -ApplyMethod(x) -> Comply(x)).\nall x (Foreign(x) & Provide(x) & Prospecting(x) -> DoingBusiness(x)).\nall x (Operating(x) & Earn(x,y) & y < 1000000000 & SubjectTo(x,\"VAT\") -> Comply(x)).\nall x (New(x) & InvestmentProject(x) & ApplyMethod(x) -> Eligible(x)).\nall x (New(x) & -Approval(x) & InvestmentProject(x) & InvestmentPlan(x) -> Eligible(x)).\nall x (New(x) & Investment(x) -> Registration(x) & ApplyMethod(x)).\nall x (New(x) & Investment(x) & -Approval(x) & Registration(x) -> ApplyMethod(x)).\nall x (New(x) & -Approval(x) & Registration(x) -> ApplyMethod(x)).\nall x (Foreign(x) & DoingBusiness(x) & -MainContracts(x) & -Subcontracts(x) -> RecordVAT(x)).\nall x (RecordVAT(x) -> Eligible(x)).\n\nConclusion:\nall x (Eligible(x) -> DeductionMethod(x)).",
        "premises": [
            "all x (Operating(x) & Earn(x,y) & y >= 1000000000 -> Comply(x)).",
            "all x (Register(x) & -Apply(x) & -ApplyMethod(x) -> Comply(x)).",
            "all x (Foreign(x) & Provide(x) & Prospecting(x) -> DoingBusiness(x)).",
            "all x (Operating(x) & Earn(x,y) & y < 1000000000 & SubjectTo(x,\"VAT\") -> Comply(x)).",
            "all x (New(x) & InvestmentProject(x) & ApplyMethod(x) -> Eligible(x)).",
            "all x (New(x) & -Approval(x) & InvestmentProject(x) & InvestmentPlan(x) -> Eligible(x)).",
            "all x (New(x) & Investment(x) -> Registration(x) & ApplyMethod(x)).",
            "all x (New(x) & Investment(x) & -Approval(x) & Registration(x) -> ApplyMethod(x)).",
            "all x (New(x) & -Approval(x) & Registration(x) -> ApplyMethod(x)).",
            "all x (Foreign(x) & DoingBusiness(x) & -MainContracts(x) & -Subcontracts(x) -> RecordVAT(x)).",
            "all x (RecordVAT(x) -> Eligible(x))."
        ],
        "conclusion": "all x (Eligible(x) -> DeductionMethod(x)).",
        "id": "b53b7956-d273-456d-a7b9-54f59ca6794f"
    },
    {
        "raw": "Predicates:\nChangeResidence(x) | InformMembers(x) | Chairman(x) | NewResidence(x) | TontineHolder(x) | Notify(x) | TontineGroup(x) | AnnuitShare(x) | OpenTontine(x) | AnnuitReceivingMember(x) | Pay(x) | CopyFamilyRegister(x) | ProvideInfo(x) | Request(x) | SendNotices(x) | Agree(x) | Law(x) | AdministrativePenalties(x) | Penalty(x) | Violation(x) | FailNotify(x) | SufficientInfo(x) | TontineGroups(x) | TontineOpening(x) | JoinGroup(x) | MakeMinutes(x) | PrincipalContents(x) | TontyBook(x) | HandOver(x) | PeopleCommittee(x) | Commune(x) | Taxpayer(x) | Minutes(x) | TontineologyGroup(x) | Tonty(x) | NotifyCommittee(x) | NotifyEstablishment(x) | HeavyLoans(x) | InterestRates(x) | CivilCode(x) | RaiseCapital(x) | RemedialMeasures(x) | TransferProfits(x) | StateBudget(x) | Fines(x) | ChapterII(x) | Organization(x) | Individual(x) | Twice(x).\n\nExplanation:\nChangeResidence(x): x changes his/her residence.\nInformMembers(x): x informs members.\nChairman(x): x is the chairman.\nNewResidence(x): x's new residence.\nTontineHolder(x): x is the tontine holder.\nNotify(x): x notifies.\nTontineGroup(x): x is a tontine group.\nAnnuitShare(x): x has annuity shares.\nOpenTontine(x): x opens a tontine.\nAnnuitReceivingMember(x): x is the annuity-receiving member.\nPay(x): x pays.\nCopyFamilyRegister(x): x copies the family register.\nProvideInfo(x): x provides information.\nRequest(x): x requests.\nSendNotices(x): x sends notices.\nAgree(x): x agrees.\nLaw(x): x follows the law.\nAdministrativePenalties(x): x faces administrative penalties.\nPenalty(x): x incurs a penalty.\nViolation(x): x violates.\nFailNotify(x): x fails to notify.\nSufficientInfo(x): x provides sufficient information.\nTontineGroups(x): x is in tontine groups.\nJoinGroup(x): x joins a group.\nMakeMinutes(x): x makes minutes.\nPrincipalContents(x): x includes principal contents.\nTontyBook(x): x keeps a tonty book.\nHandOver(x): x hands over.\nPeopleCommittee(x): x is the People's Committee.\nCommune(x): x is a commune.\nTaxpayer(x): x is a taxpayer.\nMinutes(x): x makes minutes.\nTontineologyGroup(x): x is in a tontineology group.\nNotifyCommittee(x): x notifies the committee.\nNotifyEstablishment(x): x notifies the establishment.\nHeavyLoans(x): x provides heavy loans.\nInterestRates(x): x is interest rates.\nCivilCode(x): x follows the Civil Code.\nRaiseCapital(x): x raises capital.\nRemedialMeasures(x): x are remedial measures.\nTransferProfits(x): x transfers profits.\nStateBudget(x): x is the state budget.\nFines(x): x incurs fines.\nChapterII(x): x is Chapter II.\nOrganization(x): x is an organization.\nIndividual(x): x is an individual.\nTwice(x): x is twice.\n\nPremises:\nall x (Chairman(x) & ChangeResidence(x) -> InformMembers(x)).\nall x (TontineHolder(x) -> (Notify(x, NewResidence(x)) & Notify(x, TontineGroup(x), AnnuitShare(x), OpenTontine(x), AnnuitReceivingMember(x)) & Pay(x) & CopyFamilyRegister(x) & ProvideInfo(x) & Request(x) & SendNotices(x) & Agree(x) & Law(x))).\nall x (FailNotify(x) -> (Violation(x) & Penalty(x))).\nall x (Violation(x) -> (AdministrativePenalties(x) & Penalty(x))).\nall x (Violation(x) -> (FailNotify(x) | SufficientInfo(x) | TontineGroups(x) | AnnuitShare(x) | TontineOpening(x) | JoinGroup(x) | MakeMinutes(x) | PrincipalContents(x) | TontyBook(x) | HandOver(x) | PeopleCommittee(x) | Commune(x) | Taxpayer(x) | Minutes(x) | TontineologyGroup(x) | NotifyCommittee(x) | NotifyEstablishment(x) | HeavyLoans(x) | InterestRates(x) | CivilCode(x) | RaiseCapital(x) | RemedialMeasures(x) | TransferProfits(x) | StateBudget(x))).\nall x (Fines(x) -> (ChapterII(x) & Organization(x) & Individual(x) & Twice(x))).\n\nConclusion:\nall x (ChangeResidence(x) -> InformMembers(x)).",
        "premises": [
            "all x (Chairman(x) & ChangeResidence(x) -> InformMembers(x)).",
            "all x (TontineHolder(x) -> (Notify(x, NewResidence(x)) & Notify(x, TontineGroup(x), AnnuitShare(x), OpenTontine(x), AnnuitReceivingMember(x)) & Pay(x) & CopyFamilyRegister(x) & ProvideInfo(x) & Request(x) & SendNotices(x) & Agree(x) & Law(x))).",
            "all x (FailNotify(x) -> (Violation(x) & Penalty(x))).",
            "all x (Violation(x) -> (AdministrativePenalties(x) & Penalty(x))).",
            "all x (Violation(x) -> (FailNotify(x) | SufficientInfo(x) | TontineGroups(x) | AnnuitShare(x) | TontineOpening(x) | JoinGroup(x) | MakeMinutes(x) | PrincipalContents(x) | TontyBook(x) | HandOver(x) | PeopleCommittee(x) | Commune(x) | Taxpayer(x) | Minutes(x) | TontineologyGroup(x) | NotifyCommittee(x) | NotifyEstablishment(x) | HeavyLoans(x) | InterestRates(x) | CivilCode(x) | RaiseCapital(x) | RemedialMeasures(x) | TransferProfits(x) | StateBudget(x))).",
            "all x (Fines(x) -> (ChapterII(x) & Organization(x) & Individual(x) & Twice(x)))."
        ],
        "conclusion": "all x (ChangeResidence(x) -> InformMembers(x)).",
        "id": "b8ab422f-0f14-408d-9711-d829f1ea3f48"
    },
    {
        "raw": "Predicates:\nRecognize(x, y) | Parent(x) | Child(y) | Die(x) | Married(x) | Consent(x) | Adult(x) | Adopted(x) | Father(y) | Mother(y) | EditorialBoard(x) | Lawful(x).\n\nExplanation:\nRecognize(x, y): x recognizes y as their child.\nParent(x): x is a parent.\nChild(y): y is a child.\nDie(x): x has died.\nMarried(x): x is married.\nConsent(x): x consents.\nAdult(x): x is an adult.\nAdopted(x): x is adopted.\nFather(y): y is a father.\nMother(y): y is a mother.\nEditorialBoard(x): x is the Editorial Board.\nLawful(x): x is lawful.\n\nPremises:\nall x (Parent(x) -> Recognize(x, y)).\nall x (Married(x) & Recognize(x, y) -> ~Consent(y)).\nall x (Child(y) -> Recognize(x, y)).\nall x (Adult(y) & Adopted(y) & ~Consent(Father(y)) -> Adopted(y) & ~Consent(Mother(y))).\nEditorialBoard(x) & all x (Parent(x) & Die(x) -> Recognize(x, y)).\n\nConclusion:\nall x (Parent(x) & Die(x) -> Lawful(Recognize(x, y))).",
        "premises": [
            "all x (Parent(x) -> Recognize(x, y)).",
            "all x (Married(x) & Recognize(x, y) -> ~Consent(y)).",
            "all x (Child(y) -> Recognize(x, y)).",
            "all x (Adult(y) & Adopted(y) & ~Consent(Father(y)) -> Adopted(y) & ~Consent(Mother(y))).",
            "EditorialBoard(x) & all x (Parent(x) & Die(x) -> Recognize(x, y))."
        ],
        "conclusion": "all x (Parent(x) & Die(x) -> Lawful(Recognize(x, y))).",
        "id": "4725c77b-b97f-4cd7-925a-f4971c7fad39"
    },
    {
        "raw": "Predicates:\nCommonProperty(x) | PropertyCreated(x) | IncomeGenerated(x) | LawfulIncome(x) | Inherited(x) | Donated(x) | AgreedProperty(x) | Gold(x) | Borrowed(x) | MotherInLaw(x) | Reclaim(x) | Papers(x).\n\nExplanation:\nCommonProperty(x): x is considered common property.\nPropertyCreated(x): x is property created by husband and/or wife.\nIncomeGenerated(x): x is income generated from labor, production, and business activities.\nLawfulIncome(x): x is lawful income.\nInherited(x): x is property jointly inherited.\nDonated(x): x is property donated.\nAgreedProperty(x): x is property agreed upon as common property.\nGold(x): x is gold.\nBorrowed(x): x is borrowed.\nMotherInLaw(x): x is the mother-in-law.\nReclaim(x): x is reclaimed.\nPapers(x): x is papers.\n\nPremises:\nall x (CommonProperty(x) -> (PropertyCreated(x) | IncomeGenerated(x) | LawfulIncome(x) | Inherited(x) | Donated(x) | AgreedProperty(x))).\nBorrowed(Gold) & MotherInLaw(Gold).\n- Papers(Gold).\n\nConclusion:\n- Reclaim(Gold).",
        "premises": [
            "all x (CommonProperty(x) -> (PropertyCreated(x) | IncomeGenerated(x) | LawfulIncome(x) | Inherited(x) | Donated(x) | AgreedProperty(x))).",
            "Borrowed(Gold) & MotherInLaw(Gold).",
            "- Papers(Gold)."
        ],
        "conclusion": "- Reclaim(Gold).",
        "id": "a5b711e6-fec4-427a-b585-7813856759d9"
    },
    {
        "raw": "Predicates:\nElderly(x) | Age(x) | Pension(x) | SocialInsurance(x) | HealthInsurance(x) | DeathBenefit(x) | State(x).\n\nExplanation:\nElderly(x): x is elderly.\nAge(x): x's age.\nPension(x): x receives a pension.\nSocialInsurance(x): x receives social insurance benefits.\nHealthInsurance(x): x has health insurance.\nDeathBenefit(x): x has a death benefit.\nState(x): x is the State.\n\nPremises:\nall x ((Elderly(x) & Age(x) >= 80) & -(Pension(x) | SocialInsurance(x) | HealthInsurance(x)) -> HealthInsurance(x)).\nall x ((Elderly(x) & Age(x) >= 80) & -(Pension(x) | SocialInsurance(x) | HealthInsurance(x)) -> -(Pension(x) | SocialInsurance(x) | DeathBenefit(x))).\n\nConclusion:\nall x ((Elderly(x) & Age(x) >= 80) & -(Pension(x) | SocialInsurance(x) | HealthInsurance(x)) -> HealthInsurance(DeathBenefit(x))).",
        "premises": [
            "all x ((Elderly(x) & Age(x) >= 80) & -(Pension(x) | SocialInsurance(x) | HealthInsurance(x)) -> HealthInsurance(x)).",
            "all x ((Elderly(x) & Age(x) >= 80) & -(Pension(x) | SocialInsurance(x) | HealthInsurance(x)) -> -(Pension(x) | SocialInsurance(x) | DeathBenefit(x)))."
        ],
        "conclusion": "all x ((Elderly(x) & Age(x) >= 80) & -(Pension(x) | SocialInsurance(x) | HealthInsurance(x)) -> HealthInsurance(DeathBenefit(x))).",
        "id": "d8436917-cdb6-434e-bf1a-4f2d92eee212"
    },
    {
        "raw": "Predicates:\nGuilty(x) | Buying(x) | Selling(x) | Crime(x) | Fake(x) | Heard(x) | Car(x) | CallPolice(x) | FindOut(x) | NatureOfCrime(x).\n\nExplanation:\nGuilty(x): x is guilty of a crime.\nBuying(x): x is buying something.\nSelling(x): x is selling something.\nCrime(x): x commits a crime.\nFake(x): x is fake.\nHeard(x): x heard about something.\nCar(x): x is a car.\nCallPolice(x): x calls the police.\nFindOut(x): x finds out about something.\nNatureOfCrime(x): x is in the nature of a crime.\n\nPremises:\nall x ((Buying(x) & Selling(x)) -> ~Guilty(x)).\nall x ((Heard(x) & ~Fake(x)) -> (CallPolice(x) & FindOut(x))).\n\nConclusion:\nGuilty(x) | NatureOfCrime(x).",
        "premises": [
            "all x ((Buying(x) & Selling(x)) -> ~Guilty(x)).",
            "all x ((Heard(x) & ~Fake(x)) -> (CallPolice(x) & FindOut(x)))."
        ],
        "conclusion": "Guilty(x) | NatureOfCrime(x).",
        "id": "0b825725-dbf3-44be-b0e2-159759f3ff46"
    },
    {
        "raw": "Predicates:\nIssue(x, y) | Vietnamese(x) | Foreigner(x) | ResidenceUnidentifiable(x) | Reside(x, y) | FileApplication(x, y) | LeaveVietnam(x) | Competent(x, y) | Request(x, y) | Authorization(x, y) | Procedure(x, y) | JudicialRecordCard(x) | Father(x, y) | Mother(x, y) | Spouse(x, y) | Child(x, y) | DirectSubmission(x) | Dossier(x, y) | ApplicationForm(x) | Certificate(x) | Passport(x) | Notarized(x) | WrittenAuthorization(x) | CriminalRecordNumber(x).\n\nExplanation:\nIssue(x, y): x issues y.\nVietnamese(x): x is Vietnamese.\nForeigner(x): x is a foreigner.\nResidenceUnidentifiable(x): x's residence is unidentifiable.\nReside(x, y): x resides in y.\nFileApplication(x, y): x files an application with y.\nLeaveVietnam(x): x leaves Vietnam.\nCompetent(x, y): x is competent in y.\nRequest(x, y): x requests y.\nAuthorization(x, y): x authorizes y.\nProcedure(x, y): x carries out procedures for y.\nJudicialRecordCard(x): x is a judicial record card.\nFather(x, y): x is the father of y.\nMother(x, y): x is the mother of y.\nSpouse(x, y): x is the spouse of y.\nChild(x, y): x is the child of y.\nDirectSubmission(x): x directly submits.\nDossier(x, y): x is a dossier for y.\nApplicationForm(x): x is an application form.\nCertificate(x): x is a certificate.\nPassport(x): x is a passport.\nNotarized(x): x is notarized.\nWrittenAuthorization(x): x is a written authorization.\nCriminalRecordNumber(x): x is a criminal record number.\n\nPremises:\nall x ((Vietnamese(x) & ResidenceUnidentifiable(x)) -> Issue(NationalCenterForJudicialRecords, JudicialRecordCard)).\nall x ((Foreigner(x) & Reside(x, Vietnam)) -> Issue(NationalCenterForJudicialRecords, JudicialRecordCard)).\nall x ((Foreigner(x) & LeaveVietnam(x)) -> FileApplication(NationalCenterForJudicialRecords, JudicialRecordCard)).\nall x (Competent(NationalCenterForJudicialRecords, Issue(x, JudicialRecordCard))).\nall x ((Request(x, JudicialRecordCard) & (Father(x, y) | Mother(x, y) | Spouse(x, y) | Child(x, y))) -> ~WrittenAuthorization(x)).\nall x ((~DirectSubmission(x) & ~WrittenAuthorization(x)) -> Procedure(AnotherPerson, Request(x, JudicialRecordCard))).\nDossier(Request, JudicialRecordCard).\nApplicationForm(ApplicationForm).\nCertificate(Certificate).\nPassport(Passport).\nNotarized(Notarized).\n~WrittenAuthorization(Father, Child).\n\nConclusion:\nall x ((Request(x, CriminalRecordNumber) & (Father(x, y) | Mother(x, y) | Spouse(x, y) | Child(x, y))) -> ~WrittenAuthorization(x)).",
        "premises": [
            "all x ((Vietnamese(x) & ResidenceUnidentifiable(x)) -> Issue(NationalCenterForJudicialRecords, JudicialRecordCard)).",
            "all x ((Foreigner(x) & Reside(x, Vietnam)) -> Issue(NationalCenterForJudicialRecords, JudicialRecordCard)).",
            "all x ((Foreigner(x) & LeaveVietnam(x)) -> FileApplication(NationalCenterForJudicialRecords, JudicialRecordCard)).",
            "all x (Competent(NationalCenterForJudicialRecords, Issue(x, JudicialRecordCard))).",
            "all x ((Request(x, JudicialRecordCard) & (Father(x, y) | Mother(x, y) | Spouse(x, y) | Child(x, y))) -> ~WrittenAuthorization(x)).",
            "all x ((~DirectSubmission(x) & ~WrittenAuthorization(x)) -> Procedure(AnotherPerson, Request(x, JudicialRecordCard))).",
            "Dossier(Request, JudicialRecordCard).",
            "ApplicationForm(ApplicationForm).",
            "Certificate(Certificate).",
            "Passport(Passport).",
            "Notarized(Notarized).",
            "~WrittenAuthorization(Father, Child)."
        ],
        "conclusion": "all x ((Request(x, CriminalRecordNumber) & (Father(x, y) | Mother(x, y) | Spouse(x, y) | Child(x, y))) -> ~WrittenAuthorization(x)).",
        "id": "fe3b1bfa-7f90-4dce-a1f7-008bf0e5d5f5"
    },
    {
        "raw": "Predicates:\nFileDivorce(x) | MarriageLicense(x) | ObtainMarriageCertificate(x) | ContactCivilStatusOffice(x) | Copy(x) | StateReason(x) | SubmitOriginal(x) | Spouse(x) | Required(x) | PermanentResident(x) | ContactPoliceAuthority(x) | ConfirmResidence(x) | SeparateApplication(x) | CertifyDivorce(x) | BirthRegistration(x) | ApplyCopy(x) | AddressAttempts(x) | HelpPaperwork(x) | SupplementDocuments(x) | RequiredByCourt(x) | ApplyCourtOrder(x) | SettlementPlace(x) | PeopleCourt(x) | ReachAgreement(x) | Work(x) | Agree(x) | SettleCase(x).\n\nExplanation:\nFileDivorce(x): x files for divorce.\nMarriageLicense(x): x has a marriage license.\nObtainMarriageCertificate(x): x obtains a marriage certificate.\nContactCivilStatusOffice(x): x contacts the civil status office.\nCopy(x): x obtains a copy.\nStateReason(x): x states the reason.\nSubmitOriginal(x): x submits the original.\nSpouse(x): x is the spouse.\nRequired(x): it is required.\nPermanentResident(x): x is a permanent resident.\nContactPoliceAuthority(x): x contacts the police authority.\nConfirmResidence(x): x confirms residence.\nSeparateApplication(x): x makes a separate application.\nCertifyDivorce(x): x certifies the divorce.\nBirthRegistration(x): x registers a birth.\nApplyCopy(x): x applies for a copy.\nAddressAttempts(x): x addresses attempts.\nHelpPaperwork(x): x helps with paperwork.\nSupplementDocuments(x): x supplements documents.\nRequiredByCourt(x): required by the court.\nApplyCourtOrder(x): x applies for a court order.\nSettlementPlace(x): x is the place of settlement.\nPeopleCourt(x): x is the People's Court.\nReachAgreement(x): x reaches an agreement.\nWork(x): x works.\nAgree(x): x agrees.\nSettleCase(x): x settles the case.\n\nPremises:\nFileDivorce(x) | ~MarriageLicense(x).\nObtainMarriageCertificate(x) -> ContactCivilStatusOffice(x) & Copy(x) & StateReason(x).\nDuringProcess(SubmitOriginal(Spouse)).\nContactPoliceAuthority(x) -> ConfirmResidence(x).\nSeparateApplication(x) | CertifyDivorce(x).\nBirthRegistration(x) -> ContactCivilStatusAuthority(x) & ApplyCopy(x).\nContactAuthorities(AddressAttempts(x)).\n~SupplementDocuments(RequiredByCourt(x)) -> ApplyCourtOrder(Sister) & SupplementDocuments(Spouse).\nSettlementPlace(PeopleCourt(x), Husband) | ReachAgreement(You, Spouse).\nWork(Spouse).\n\nConclusion:\n~MarriageLicense(x) & ~ObtainMarriageCertificate(x) -> FileDivorce(x).",
        "premises": [
            "FileDivorce(x) | ~MarriageLicense(x).",
            "ObtainMarriageCertificate(x) -> ContactCivilStatusOffice(x) & Copy(x) & StateReason(x).",
            "DuringProcess(SubmitOriginal(Spouse)).",
            "ContactPoliceAuthority(x) -> ConfirmResidence(x).",
            "SeparateApplication(x) | CertifyDivorce(x).",
            "BirthRegistration(x) -> ContactCivilStatusAuthority(x) & ApplyCopy(x).",
            "ContactAuthorities(AddressAttempts(x)).",
            "~SupplementDocuments(RequiredByCourt(x)) -> ApplyCourtOrder(Sister) & SupplementDocuments(Spouse).",
            "SettlementPlace(PeopleCourt(x), Husband) | ReachAgreement(You, Spouse).",
            "Work(Spouse)."
        ],
        "conclusion": "~MarriageLicense(x) & ~ObtainMarriageCertificate(x) -> FileDivorce(x).",
        "id": "3b17b2c1-d9eb-47c7-979b-bac41de9ea28"
    },
    {
        "raw": "Predicates:\nHandleBy(x, y) | Contact(x) | Bring(x, y) | Settlement(x) | UnemploymentInsurance(x) | Authorized(x) | Employee(x) | Center(y) | Guidance(x) | SocialInsuranceBook(x) | CopyOf(x, y) | BirthCertificate(x) | DecisionOnResignation(x).\n\nExplanation:\nHandleBy(x, y): x is handled by y.\nContact(x): x contacts for guidance.\nBring(x, y): x brings y for settlement.\nSettlement(x): x is settled.\nUnemploymentInsurance(x): x is unemployment insurance.\nAuthorized(x): x is authorized.\nEmployee(x): x is an employee.\nCenter(y): y is a center.\nGuidance(x): x provides guidance.\nSocialInsuranceBook(x): x has a social insurance book.\nCopyOf(x, y): x has a copy of y.\nBirthCertificate(x): x has a birth certificate.\nDecisionOnResignation(x): x has a decision on resignation.\n\nPremises:\nall x (UnemploymentInsurance(x) & HandleBy(x, y) -> Contact(y)).\nall x (Employee(x) -> Bring(x, Center(y) & SocialInsuranceBook(x) & CopyOf(x, BirthCertificate(x)) & CopyOf(x, DecisionOnResignation(x)))).\n\nConclusion:\nall x (UnemploymentInsurance(x) -> Authorized(x)).",
        "premises": [
            "all x (UnemploymentInsurance(x) & HandleBy(x, y) -> Contact(y)).",
            "all x (Employee(x) -> Bring(x, Center(y) & SocialInsuranceBook(x) & CopyOf(x, BirthCertificate(x)) & CopyOf(x, DecisionOnResignation(x))))."
        ],
        "conclusion": "all x (UnemploymentInsurance(x) -> Authorized(x)).",
        "id": "c134d882-f74b-41ed-88bf-deb6676cbbb6"
    },
    {
        "raw": "Predicates:\nAbandoned(x) | Transfer(x) | Adopted(x) | Register(x) | PeopleCommittee(x) | Record(x) | NurturingCenter(x) | Adoption(x) | Reside(x).\n\nExplanation:\nAbandoned(x): x is an abandoned child.\nTransfer(x): x is transferred to nurturing centers.\nAdopted(x): x is adopted.\nRegister(x): x is registered.\nPeopleCommittee(x): x is the People's Committee.\nRecord(x): x makes records.\nNurturingCenter(x): x is a nurturing center.\nAdoption(x): x is an adoption process.\nReside(x): x resides in a certain place.\n\nPremises:\nall x (Abandoned(x) & \u00acTransfer(x) -> Register(Record(x))).\nall x (Transfer(x) & Adopted(x) -> Register(Record(x))).\nall x (Adopted(x) & NurturingCenter(x) -> Register(Record(x))).\nall x (NurturingCenter(x) -> PeopleCommittee(x)).\nall x (Register(x) -> PeopleCommittee(x)).\nall x (Adoption(x) -> Register(x)).\nall x (Reside(x) -> PeopleCommittee(x)).\n\nConclusion:\nall x (Adoption(x) -> Register(PeopleCommittee(x))).\n",
        "premises": [
            "all x (Abandoned(x) & \u00acTransfer(x) -> Register(Record(x))).",
            "all x (Transfer(x) & Adopted(x) -> Register(Record(x))).",
            "all x (Adopted(x) & NurturingCenter(x) -> Register(Record(x))).",
            "all x (NurturingCenter(x) -> PeopleCommittee(x)).",
            "all x (Register(x) -> PeopleCommittee(x)).",
            "all x (Adoption(x) -> Register(x)).",
            "all x (Reside(x) -> PeopleCommittee(x))."
        ],
        "conclusion": "all x (Adoption(x) -> Register(PeopleCommittee(x))).",
        "id": "b9a9ff0f-6478-4a9f-a23c-5c85538cc0a2"
    },
    {
        "raw": "Predicates:\nAdopt(x) | FullCapacity(x) | OlderThan(x, y) | Health(x) | Economy(x) | Accommodation(x) | GoodMoralStatus(x) | Stepfather(x) | Stepchild(x) | Stepmother(x) | SeparateChild(x) | Aunt(x) | Uncle(x) | Nephew(x) | Niece(x) | Single(x) | Married(x) | Grandson(x) | Grandchild(x).\n\nExplanation:\nAdopt(x): x adopts a child.\nFullCapacity(x): x has full capacity of civil act.\nOlderThan(x, y): x is older than y.\nHealth(x): x has conditions on health.\nEconomy(x): x has conditions on economy.\nAccommodation(x): x has conditions on accommodation.\nGoodMoralStatus(x): x has good moral status.\nStepfather(x): x is a stepfather.\nStepchild(x): x is a stepchild.\nStepmother(x): x is a stepmother.\nSeparateChild(x): x adopts a separate child.\nAunt(x): x is an aunt.\nUncle(x): x is an uncle.\nNephew(x): x is a nephew.\nNiece(x): x is a niece.\nSingle(x): x is adopted by a single person.\nMarried(x): x is adopted by both married persons.\nGrandson(x): x is a grandson.\nGrandchild(x): x is a grandchild.\n\nPremises:\nall x (Adopt(x) -> (FullCapacity(x) & OlderThan(x, y) & Health(x) & Economy(x) & Accommodation(x) & GoodMoralStatus(x))).\nall x (Stepfather(x) -> Stepchild(x)).\nall x (Stepmother(x) -> SeparateChild(x)).\nall x (Aunt(x) | Uncle(x) -> Nephew(x) | Niece(x)).\nall x (Single(x) | Married(x)).\nall x (Grandson(x) -> OlderThan(x, y) & Grandchild(x)).\n\nConclusion:\nThere is no direct conclusion based on the premises provided.",
        "premises": [
            "all x (Adopt(x) -> (FullCapacity(x) & OlderThan(x, y) & Health(x) & Economy(x) & Accommodation(x) & GoodMoralStatus(x))).",
            "all x (Stepfather(x) -> Stepchild(x)).",
            "all x (Stepmother(x) -> SeparateChild(x)).",
            "all x (Aunt(x) | Uncle(x) -> Nephew(x) | Niece(x)).",
            "all x (Single(x) | Married(x)).",
            "all x (Grandson(x) -> OlderThan(x, y) & Grandchild(x))."
        ],
        "conclusion": "There is no direct conclusion based on the premises provided.",
        "id": "ee8bb1b3-5bb6-47d9-84e8-d7421ffc78dc"
    },
    {
        "raw": "Predicates:\nAdopter(x) | MeetConditions(x) | Age(x) | HealthConditions(x) | EconomicConditions(x) | AccommodationConditions(x) | MoralQualities(x) | NotAdopt(x) | Restricted(x) | Serving(x) | ImprisonmentPenalties(x) | CriminalRecord(x) | Stepfather(x) | Stepchild(x) | StepchildOf(x) | StepchildOfWife(x) | StepchildOfHusband(x) | Aunt(x) | Uncle(x) | Niece(x) | Nephew(x) | Law(x) | Prohibit(x) | Single(x) | AdoptingChildren(x).\n\nExplanation:\nAdopter(x): x is an adopter.\nMeetConditions(x): x meets adoption conditions.\nAge(x): x is of a certain age.\nHealthConditions(x): x meets health conditions.\nEconomicConditions(x): x meets economic conditions.\nAccommodationConditions(x): x meets accommodation conditions.\nMoralQualities(x): x has good moral qualities.\nNotAdopt(x): x is not allowed to adopt.\nRestricted(x): x is restricted.\nServing(x): x is serving a penalty.\nImprisonmentPenalties(x): x is serving imprisonment penalties.\nCriminalRecord(x): x has a criminal record.\nStepfather(x): x is a stepfather.\nStepchild(x): x is a stepchild.\nStepchildOf(x): x is a stepchild of someone.\nStepchildOfWife(x): x is a stepchild of the wife.\nStepchildOfHusband(x): x is a stepchild of the husband.\nAunt(x): x is an aunt.\nUncle(x): x is an uncle.\nNiece(x): x is a niece.\nNephew(x): x is a nephew.\nLaw(x): x is a law.\nProhibit(x): x is prohibited.\nSingle(x): x is single.\nAdoptingChildren(x): x adopts children.\n\nPremises:\nall x (Adopter(x) -> (MeetConditions(x) & Age(x) & HealthConditions(x) & EconomicConditions(x) & AccommodationConditions(x) & MoralQualities(x))).\nnot all x (Adopter(x) -> NotAdopt(x)).\nnot all x (Adopter(x) -> Restricted(x)).\nnot all x (Adopter(x) -> Serving(x)).\nnot all x (Adopter(x) -> (CriminalRecord(x) & IntentionalInfringement(x))).\nall x (Stepfather(x) & StepchildOfWife(x) -> not all y (Law(y) & Prohibit(y, Single(x)))).\n-AdoptingChildren(x) | Single(x).\n\nConclusion:\nall x (Single(x) -> AdoptingChildren(x)).",
        "premises": [
            "all x (Adopter(x) -> (MeetConditions(x) & Age(x) & HealthConditions(x) & EconomicConditions(x) & AccommodationConditions(x) & MoralQualities(x))).",
            "not all x (Adopter(x) -> NotAdopt(x)).",
            "not all x (Adopter(x) -> Restricted(x)).",
            "not all x (Adopter(x) -> Serving(x)).",
            "not all x (Adopter(x) -> (CriminalRecord(x) & IntentionalInfringement(x))).",
            "all x (Stepfather(x) & StepchildOfWife(x) -> not all y (Law(y) & Prohibit(y, Single(x)))).",
            "-AdoptingChildren(x) | Single(x)."
        ],
        "conclusion": "all x (Single(x) -> AdoptingChildren(x)).",
        "id": "4f6a9b65-564d-45fb-a258-719994b43e47"
    },
    {
        "raw": "Predicates:\nSibling(x) | Give(x, y) | Adopt(y) | ChangeName(y) | BirthName(y) | BirthCertificate(y) | AdoptiveMother(y) | BiologicalMother(y) | HaveChild(z).\n\nExplanation:\nSibling(x): x is a sibling.\nGive(x, y): x gives y to someone.\nAdopt(y): y is adopted.\nChangeName(y): y changes his/her last name.\nBirthName(y): y has his/her birth name.\nBirthCertificate(y): y has a birth certificate.\nAdoptiveMother(y): y is listed as the adoptive mother.\nBiologicalMother(y): y is the biological mother.\nHaveChild(z): z has a child.\n\nPremises:\nall x, y (Sibling(x) & Give(x, y) -> (Adopt(y) & ChangeName(y) & ~BirthName(y) & BirthCertificate(y) & AdoptiveMother(y) & ~BiologicalMother(y))).\nall y (Adopt(y) -> ChangeName(y)).\nall y (Adopt(y) -> ~BirthName(y)).\nall y (Adopt(y) -> BirthCertificate(y)).\nall y (Adopt(y) -> AdoptiveMother(y)).\nall y (Adopt(y) -> ~BiologicalMother(y)).\n\nConclusion:\nall z (HaveChild(z) -> (Adopt(w) & HaveChild(w))).",
        "premises": [
            "all x, y (Sibling(x) & Give(x, y) -> (Adopt(y) & ChangeName(y) & ~BirthName(y) & BirthCertificate(y) & AdoptiveMother(y) & ~BiologicalMother(y))).",
            "all y (Adopt(y) -> ChangeName(y)).",
            "all y (Adopt(y) -> ~BirthName(y)).",
            "all y (Adopt(y) -> BirthCertificate(y)).",
            "all y (Adopt(y) -> AdoptiveMother(y)).",
            "all y (Adopt(y) -> ~BiologicalMother(y))."
        ],
        "conclusion": "all z (HaveChild(z) -> (Adopt(w) & HaveChild(w))).",
        "id": "cb5661bd-324e-4172-9aff-613a3842d0a0"
    },
    {
        "raw": "Predicates:\nConsidered(x) | Settled(x) | Prepare(x, y) | ConsularlyLegalized(x) | Translated(x) | Certified(x) | MadeIn(x, y) | Prepare(x, y) | IssuedBy(x, y) | TakenWithin(x, y) | Prove(x, y) | Elaborating(x) | Detailing(x) | FeeLevels(x) | Adopt(x) | NieceOrNephew(x) | Over14YearsOld(x).\n\nExplanation:\nConsidered(x): x is considered.\nSettled(x): x is settled.\nPrepare(x, y): x prepares y.\nConsularlyLegalized(x): x is consularly legalized.\nTranslated(x): x is translated.\nCertified(x): x is certified.\nMadeIn(x, y): x is made in y.\nIssuedBy(x, y): x is issued by y.\nTakenWithin(x, y): x is taken within y.\nProve(x, y): x proves y.\nElaborating(x): x is elaborating.\nDetailing(x): x is detailing.\nFeeLevels(x): x is fee levels.\nAdopt(x): x adopts.\nNieceOrNephew(x): x is a niece or nephew.\nOver14YearsOld(x): x is over 14 years old.\n\nPremises:\nall x (Considered(x) -> Settled(x)).\nPrepare(couple, {Application for adoption, Copy of passport or substitute paper, Investigation on psychology and family, Judicial record, Written certification of health status, Written certification of income and property, The written permission for adoption in Vietnam}) & ConsularlyLegalized({Application for adoption, Copy of passport or substitute paper, Investigation on psychology and family, Judicial record, Written certification of health status, Written certification of income and property, The written permission for adoption in Vietnam}) & Translated({Application for adoption, Copy of passport or substitute paper, Investigation on psychology and family, Judicial record, Written certification of health status, Written certification of income and property, The written permission for adoption in Vietnam}) & Certified({Application for adoption, Copy of passport or substitute paper, Investigation on psychology and family, Judicial record, Written certification of health status, Written certification of income and property, The written permission for adoption in Vietnam}) & MadeIn({Application for adoption, Copy of passport or substitute paper, Investigation on psychology and family, Judicial record, Written certification of health status, Written certification of income and property, The written permission for adoption in Vietnam}, 02 sets).\nPrepare(family, {Birth certificate, Health certificate issued by a district-or higher-level health agency, Two full-length, straight-faced photos taken within 6 months, Papers and documents proving that the child's sister is the child's real aunt}) & ConsularlyLegalized({Birth certificate, Health certificate issued by a district-or higher-level health agency, Two full-length, straight-faced photos taken within 6 months, Papers and documents proving that the child's sister is the child's real aunt}) & Translated({Birth certificate, Health certificate issued by a district-or higher-level health agency, Two full-length, straight-faced photos taken within 6 months, Papers and documents proving that the child's sister is the child's real aunt}) & Certified({Birth certificate, Health certificate issued by a district-or higher-level health agency, Two full-length, straight-faced photos taken within 6 months, Papers and documents proving that the child's sister is the child's real aunt}).\nElaborating(Vietnam) & Detailing({Adoption Law, fee levels}).\n\nConclusion:\nall x (Adopt(x) & NieceOrNephew(x) & Over14YearsOld(x) -> Considered(x)).",
        "premises": [
            "all x (Considered(x) -> Settled(x)).",
            "Prepare(couple, {Application for adoption, Copy of passport or substitute paper, Investigation on psychology and family, Judicial record, Written certification of health status, Written certification of income and property, The written permission for adoption in Vietnam}) & ConsularlyLegalized({Application for adoption, Copy of passport or substitute paper, Investigation on psychology and family, Judicial record, Written certification of health status, Written certification of income and property, The written permission for adoption in Vietnam}) & Translated({Application for adoption, Copy of passport or substitute paper, Investigation on psychology and family, Judicial record, Written certification of health status, Written certification of income and property, The written permission for adoption in Vietnam}) & Certified({Application for adoption, Copy of passport or substitute paper, Investigation on psychology and family, Judicial record, Written certification of health status, Written certification of income and property, The written permission for adoption in Vietnam}) & MadeIn({Application for adoption, Copy of passport or substitute paper, Investigation on psychology and family, Judicial record, Written certification of health status, Written certification of income and property, The written permission for adoption in Vietnam}, 02 sets).",
            "Prepare(family, {Birth certificate, Health certificate issued by a district-or higher-level health agency, Two full-length, straight-faced photos taken within 6 months, Papers and documents proving that the child's sister is the child's real aunt}) & ConsularlyLegalized({Birth certificate, Health certificate issued by a district-or higher-level health agency, Two full-length, straight-faced photos taken within 6 months, Papers and documents proving that the child's sister is the child's real aunt}) & Translated({Birth certificate, Health certificate issued by a district-or higher-level health agency, Two full-length, straight-faced photos taken within 6 months, Papers and documents proving that the child's sister is the child's real aunt}) & Certified({Birth certificate, Health certificate issued by a district-or higher-level health agency, Two full-length, straight-faced photos taken within 6 months, Papers and documents proving that the child's sister is the child's real aunt}).",
            "Elaborating(Vietnam) & Detailing({Adoption Law, fee levels})."
        ],
        "conclusion": "all x (Adopt(x) & NieceOrNephew(x) & Over14YearsOld(x) -> Considered(x)).",
        "id": "543e7524-21e8-4d98-a4a5-e881fac0d570"
    },
    {
        "raw": "Predicates:\nChange(x, y, z) | Declaration(x) | AdoptiveParent(y) | AdoptiveMother(y) | BirthCertificate(z) | BirthRegister(z) | AdoptedChildren(x) | NaturalParents(x) | Name(x) | Possible(x) | Article28(x) | Decree158(x).\n\nExplanation:\nChange(x, y, z): Changing the declaration from x to y in document z.\nDeclaration(x): x is a declaration.\nAdoptiveParent(y): y is an adoptive parent.\nAdoptiveMother(y): y is an adoptive mother.\nBirthCertificate(z): z is a birth certificate.\nBirthRegister(z): z is a birth register.\nAdoptedChildren(x): x is an adopted child.\nNaturalParents(x): x is a natural parent.\nName(x): x is a name.\nPossible(x): x is possible.\nArticle28(x): x is Article 28.\nDecree158(x): x is Decree 158.\n\nPremises:\nall x (Change(NaturalParents(x), AdoptiveParent(y), BirthCertificate(z)) & Change(NaturalParents(x), AdoptiveParent(y), BirthRegister(z)) -> -Change(NaturalParents(x), AdoptiveMother(y), BirthCertificate(z))).\nall x (Change(NaturalParents(x), AdoptiveMother(y), BirthCertificate(z)) & Change(NaturalParents(x), AdoptiveMother(y), BirthRegister(z)) -> -Change(NaturalParents(x), AdoptiveParent(y), BirthCertificate(z))).\nArticle28(Decree158).\n\nConclusion:\n-Change(Name(NaturalMother), Name(AdoptedMother), BirthAfterAdoption).",
        "premises": [
            "all x (Change(NaturalParents(x), AdoptiveParent(y), BirthCertificate(z)) & Change(NaturalParents(x), AdoptiveParent(y), BirthRegister(z)) -> -Change(NaturalParents(x), AdoptiveMother(y), BirthCertificate(z))).",
            "all x (Change(NaturalParents(x), AdoptiveMother(y), BirthCertificate(z)) & Change(NaturalParents(x), AdoptiveMother(y), BirthRegister(z)) -> -Change(NaturalParents(x), AdoptiveParent(y), BirthCertificate(z))).",
            "Article28(Decree158)."
        ],
        "conclusion": "-Change(Name(NaturalMother), Name(AdoptedMother), BirthAfterAdoption).",
        "id": "9eaf2ce2-1667-415b-992c-6ee52b86cb7c"
    },
    {
        "raw": "Predicates:\nAdopt(x) | Person(x) | Age(x) | Stepfather(x) | Stepmother(x) | Aunt(x) | Uncle(x) | Wife(x) | Husband(x).\n\nExplanation:\nAdopt(x): x is adopted.\nPerson(x): x is a person.\nAge(x): x's age.\nStepfather(x): x is a stepfather.\nStepmother(x): x is a stepmother.\nAunt(x): x is an aunt.\nUncle(x): x is an uncle.\nWife(x): x is a wife.\nHusband(x): x is a husband.\n\nPremises:\nall x (Person(x) & Age(x) >= 16 & Age(x) < 18 -> (Stepfather(x) | Stepmother(x) | Aunt(x) | Uncle(x))).\n\nConclusion:\nAdopt(18-year-old stepchild) -> (Stepfather(Wife) | Stepmother(Wife) | Aunt(Wife) | Uncle(Wife)).",
        "premises": [
            "all x (Person(x) & Age(x) >= 16 & Age(x) < 18 -> (Stepfather(x) | Stepmother(x) | Aunt(x) | Uncle(x)))."
        ],
        "conclusion": "Adopt(18-year-old stepchild) -> (Stepfather(Wife) | Stepmother(Wife) | Aunt(Wife) | Uncle(Wife)).",
        "id": "10c5df0a-71f0-4437-a3cc-a06f2cc48d75"
    },
    {
        "raw": "Predicates:\nEntitled(x) | Estate(x) | Distribute(x) | Law(x) | AtLawHeir(x) | Refuse(x) | Receive(x) | Minor(x) | Parent(x) | Spouse(x) | WorkingCapacity(x) | Disabled(x) | Inheritable(x).\n\nExplanation:\nEntitled(x): x is entitled to something.\nEstate(x): x refers to an estate.\nDistribute(x): x is distributed.\nLaw(x): x is in accordance with the law.\nAtLawHeir(x): x is an at-law heir.\nRefuse(x): x refuses something.\nReceive(x): x receives something.\nMinor(x): x is a minor.\nParent(x): x is a parent.\nSpouse(x): x is a spouse.\nWorkingCapacity(x): x has working capacity.\nDisabled(x): x is disabled.\nInheritable(x): x is inheritable.\n\nPremises:\nall x (Entitled(x) & Distribute(x) & Law(x) & AtLawHeir(x) & -Entitled(x) -> -Receive(x) & (Receive(x) & (Receive(x) < 2/3 AtLawHeir(x))) -> ((Refuse(x) & Article642(x)) | -Inheritable(x) | -Inheritable(x) & Clause1Article63(x))).\nMinor(x) | Parent(x) | Spouse(x) | -WorkingCapacity(x).\n-Receive(x) | -Inheritable(x).\nDisabled(x).\n\nConclusion:\nInheritable(x) -> Disabled(x).",
        "premises": [
            "all x (Entitled(x) & Distribute(x) & Law(x) & AtLawHeir(x) & -Entitled(x) -> -Receive(x) & (Receive(x) & (Receive(x) < 2/3 AtLawHeir(x))) -> ((Refuse(x) & Article642(x)) | -Inheritable(x) | -Inheritable(x) & Clause1Article63(x))).",
            "Minor(x) | Parent(x) | Spouse(x) | -WorkingCapacity(x).",
            "-Receive(x) | -Inheritable(x).",
            "Disabled(x)."
        ],
        "conclusion": "Inheritable(x) -> Disabled(x).",
        "id": "6587158f-701a-498b-a12e-a85c329b157f"
    },
    {
        "raw": "Predicates:\nAlimony(x) | DirectlyRaise(x) | Provide(x) | Request(x) | EconomicallyCapable(x) | Rearing(x) | Support(x) | Interests(x) | Voluntary(x) | Capacity(x) | Conditions(x) | Perform(x) | Inaction(x) | Law(x) | Obligation(x) | Refusal(x) | Divorce(x) | Father(x) | Child(x).\n\nExplanation:\nAlimony(x): x has the obligation to provide financial support.\nDirectlyRaise(x): x directly raises children.\nProvide(x): x provides support.\nRequest(x): x requests support.\nEconomicallyCapable(x): x is economically capable.\nRearing(x): x is rearing children.\nSupport(x): x provides financial support.\nInterests(x): x's interests.\nVoluntary(x): x does something voluntarily.\nCapacity(x): x has the capacity.\nConditions(x): x meets the conditions.\nPerform(x): x performs an obligation.\nInaction(x): x does not take action.\nLaw(x): x is a law.\nObligation(x): x has an obligation.\nRefusal(x): x refuses.\nDivorce(x): x is divorced.\nFather(x): x is a father.\nChild(x): x is a child.\n\nPremises:\nall x (Divorce(x) & -DirectlyRaise(x) -> Alimony(x)).\nall x (Support(x) & -Request(x) -> Interests(x)).\nall x (Request(x) & -Support(x) & Capacity(x) & Conditions(x) -> -Perform(x)).\nall x (Law(x) & Obligation(x) -> Provide(x)).\nall x (Refusal(x) & Alimony(x) -> -Perform(x)).\nall x (Father(x) & Divorce(x) -> -Perform(x)).\nall x (Law(x) & -Request(x) & -Inaction(x) -> -Voluntary(x)).\nall x (Law(x) & -Request(x) -> Child(x) & Interests(x)).\nall x (Law(x) & Obligation(x) -> Provide(x)).\n\nConclusion:\nall x (Refusal(x) & Divorce(x) & Father(x) -> -Perform(x)).",
        "premises": [
            "all x (Divorce(x) & -DirectlyRaise(x) -> Alimony(x)).",
            "all x (Support(x) & -Request(x) -> Interests(x)).",
            "all x (Request(x) & -Support(x) & Capacity(x) & Conditions(x) -> -Perform(x)).",
            "all x (Law(x) & Obligation(x) -> Provide(x)).",
            "all x (Refusal(x) & Alimony(x) -> -Perform(x)).",
            "all x (Father(x) & Divorce(x) -> -Perform(x)).",
            "all x (Law(x) & -Request(x) & -Inaction(x) -> -Voluntary(x)).",
            "all x (Law(x) & -Request(x) -> Child(x) & Interests(x)).",
            "all x (Law(x) & Obligation(x) -> Provide(x))."
        ],
        "conclusion": "all x (Refusal(x) & Divorce(x) & Father(x) -> -Perform(x)).",
        "id": "1f9671c4-7c46-4797-8aed-c28d7a882e57"
    },
    {
        "raw": "Predicates:\nExistingAssets(x) | FutureAssets(x) | Banned(x) | SecurityAssets(x) | FormedFromLoans(x) | FormulationStage(x) | LawfullyCreated(x) | OwnershipRegistration(x) | Mortgage(x) | OffThePlanHousing(x) | LegitimateLands(x) | HousingConstructionProjects(x) | CreditInstitutions(x) | TakeLoans(x) | Good(x) | Register(x) | SecurityTransaction(x) | FutureAcquiredHouses(x).\n\nExplanation:\nExistingAssets(x): x are existing assets.\nFutureAssets(x): x are future assets.\nBanned(x): x are banned from transaction by law.\nSecurityAssets(x): x are security assets.\nFormedFromLoans(x): x are formed from loans.\nFormulationStage(x): x are in the formulation stage.\nLawfullyCreated(x): x are lawfully created.\nOwnershipRegistration(x): x are subject to ownership registration.\nMortgage(x): x are mortgaged.\nOffThePlanHousing(x): x are off-the-plan housing.\nLegitimateLands(x): x are on legitimate lands.\nHousingConstructionProjects(x): x are in housing construction projects.\nCreditInstitutions(x): x are credit institutions.\nTakeLoans(x): x take loans.\nGood(x): x is good.\nRegister(x): x is registered.\nSecurityTransaction(x): x are in security transactions.\nFutureAcquiredHouses(x): x are future-acquired houses.\n\nPremises:\nall x (SecurityAssets(x) -> (ExistingAssets(x) | FutureAssets(x) & -Banned(x))).\nall x (FutureAssets(x) -> (FormedFromLoans(x) | FormulationStage(x) | LawfullyCreated(x) | OwnershipRegistration(x))).\nall x (OwnershipRegistration(x) -> Law(x) & OwnershipRegistrationDate(x) > SecurityTransactionDate(x)).\nall x (Mortgage(x) -> (OffThePlanHousing(x) & LegitimateLands(x))).\nall x (OffThePlanHousing(x) & LegitimateLands(x) -> CreditInstitutions(x) & (TakeLoans(x) | BuyResidences(x))).\n\nConclusion:\nall x (FutureAcquiredHouses(x) -> Good(x) & Register(x)).",
        "premises": [
            "all x (SecurityAssets(x) -> (ExistingAssets(x) | FutureAssets(x) & -Banned(x))).",
            "all x (FutureAssets(x) -> (FormedFromLoans(x) | FormulationStage(x) | LawfullyCreated(x) | OwnershipRegistration(x))).",
            "all x (OwnershipRegistration(x) -> Law(x) & OwnershipRegistrationDate(x) > SecurityTransactionDate(x)).",
            "all x (Mortgage(x) -> (OffThePlanHousing(x) & LegitimateLands(x))).",
            "all x (OffThePlanHousing(x) & LegitimateLands(x) -> CreditInstitutions(x) & (TakeLoans(x) | BuyResidences(x)))."
        ],
        "conclusion": "all x (FutureAcquiredHouses(x) -> Good(x) & Register(x)).",
        "id": "3eddeeea-1eeb-4c6e-a788-a6518161f087"
    },
    {
        "raw": "Predicates:\nResides(x, y) | RegisterBirth(x) | Identified(x, y) | LivingInReality(x, y) | AbandonedChild(x) | TemporarilyRaising(x, y) | Headquartered(x, y) | PermanentResidence(x, y) | DefiniteTemporaryResidence(x, y) | Child(x) | Father(x) | Mother(x) | CommunePeopleCommittee(x) | BirthRegistration(x, y).\n\nExplanation:\nResides(x, y): x resides in y.\nRegisterBirth(x): x registers the birth.\nIdentified(x, y): x's place of residence is identified as y.\nLivingInReality(x, y): x is living in reality in y.\nAbandonedChild(x): x is an abandoned child.\nTemporarilyRaising(x, y): x is temporarily raising by y.\nHeadquartered(x, y): x is headquartered in y.\nPermanentResidence(x, y): x has permanent residence in y.\nDefiniteTemporaryResidence(x, y): x has definite temporary residence in y.\nChild(x): x is a child.\nFather(x): x is a father.\nMother(x): x is a mother.\nCommunePeopleCommittee(x): x is the commune-level People's Committee.\nBirthRegistration(x, y): x is the birth registration for y.\n\nPremises:\nall x (Mother(x) -> Identified(x, Mother(x))).\nall x (Father(x) -> Identified(x, Father(x))).\nall x (Child(x) -> LivingInReality(x, y)).\nall x (AbandonedChild(x) -> (TemporarilyRaising(x, y) | Headquartered(x, y))).\nall x (Mother(x) & -PermanentResidence(x, y) -> Identified(x, Father(x))).\n\nConclusion:\nall x (Child(x) & TemporaryResidence(x, y) -> RegisterBirth(CommunePeopleCommittee(x), x)).",
        "premises": [
            "all x (Mother(x) -> Identified(x, Mother(x))).",
            "all x (Father(x) -> Identified(x, Father(x))).",
            "all x (Child(x) -> LivingInReality(x, y)).",
            "all x (AbandonedChild(x) -> (TemporarilyRaising(x, y) | Headquartered(x, y))).",
            "all x (Mother(x) & -PermanentResidence(x, y) -> Identified(x, Father(x)))."
        ],
        "conclusion": "all x (Child(x) & TemporaryResidence(x, y) -> RegisterBirth(CommunePeopleCommittee(x), x)).",
        "id": "c87121d0-5e7a-45c4-b930-a8b76d23062a"
    },
    {
        "raw": "Predicates:\nSubmit(x, y) | BirthRegistrationApplicant(x) | BirthCertificationPaper(x, y) | MedicalEstablishment(x) | Child(y) | BornAt(x, y) | NoticeOfBirth(x) | Witness(x) | CivilActCapacity(x) | Testimonies(x) | Responsibility(x) | Law(x) | Birth(x) | Real(x) | WrittenCommitment(x) | BirthRegistration(x) | CommuneLevelPeopleCommittee(x) | PlaceOfResidence(x) | Father(x) | Mother(x) | Identified(x) | Locality(x) | Living(x) | AbandonedChild(x) | TemporarilyRaising(x) | Organization(x) | HeadquarteredAt(x).\n\nExplanation:\nSubmit(x, y): x submits y.\nBirthRegistrationApplicant(x): x is a birth registration applicant.\nBirthCertificationPaper(x, y): x has a birth certification paper issued by y.\nMedicalEstablishment(x): x is a medical establishment.\nChild(y): y is a child.\nBornAt(x, y): y is born at x.\nNoticeOfBirth(x): x is a Notice of birth.\nWitness(x): x is a witness.\nCivilActCapacity(x): x has full civil act capacity.\nTestimonies(x): x knows clearly the testimonies.\nResponsibility(x): x takes responsibility before the law.\nLaw(x): x is the law.\nBirth(x): x is a birth.\nReal(x): x is real.\nWrittenCommitment(x): x makes a written commitment.\nBirthRegistration(x): x is a birth registration.\nCommuneLevelPeopleCommittee(x): x is the commune-level People's Committee.\nPlaceOfResidence(x): x is the place of residence.\nFather(x): x is a father.\nMother(x): x is a mother.\nIdentified(x): x is identified.\nLocality(x): x is a locality.\nLiving(x): x is living.\nAbandonedChild(x): x is an abandoned child.\nTemporarilyRaising(x): x is temporarily raising.\nOrganization(x): x is an organization.\nHeadquarteredAt(x): x is headquartered at.\n\nPremises:\nall x,y ((BirthRegistrationApplicant(x) & MedicalEstablishment(z) & BornAt(z, y)) -> Submit(x, BirthCertificationPaper(x, z))).\nall x ((Child(x) & BornAt(y, x) & MedicalEstablishment(z)) -> Submit(x, NoticeOfBirth)).\nall x ((Witness(x) & CivilActCapacity(x) & Testimonies(x)) -> Responsibility(x) & Law(x)).\nall x ((BirthRegistration(x) & CommuneLevelPeopleCommittee(y) & PlaceOfResidence(z, x)) -> BirthRegistration(x) & CommuneLevelPeopleCommittee(y)).\nall x ((Father(x) & CommuneLevelPeopleCommittee(y) & Identified(z, x)) -> BirthRegistration(x) & CommuneLevelPeopleCommittee(y)).\nall x ((Mother(x) & CommuneLevelPeopleCommittee(y) & Identified(z, x)) -> BirthRegistration(x) & CommuneLevelPeopleCommittee(y)).\nall x ((Locality(x) & Living(y, x)) -> CommuneLevelPeopleCommittee(x)).\nall x ((AbandonedChild(x) & CommuneLevelPeopleCommittee(y) & TemporarilyRaising(z, x)) -> BirthRegistration(x) & CommuneLevelPeopleCommittee(y)).\nall x ((AbandonedChild(x) & CommuneLevelPeopleCommittee(y) & Organization(z) & HeadquarteredAt(z, x)) -> BirthRegistration(x) & CommuneLevelPeopleCommittee(y)).\n\nConclusion:\nall x,y ((BirthRegistrationApplicant(x) & MedicalEstablishment(z) & BornAt(z, y)) -> BirthCertificationPaper(x, z)).",
        "premises": [
            "all x,y ((BirthRegistrationApplicant(x) & MedicalEstablishment(z) & BornAt(z, y)) -> Submit(x, BirthCertificationPaper(x, z))).",
            "all x ((Child(x) & BornAt(y, x) & MedicalEstablishment(z)) -> Submit(x, NoticeOfBirth)).",
            "all x ((Witness(x) & CivilActCapacity(x) & Testimonies(x)) -> Responsibility(x) & Law(x)).",
            "all x ((BirthRegistration(x) & CommuneLevelPeopleCommittee(y) & PlaceOfResidence(z, x)) -> BirthRegistration(x) & CommuneLevelPeopleCommittee(y)).",
            "all x ((Father(x) & CommuneLevelPeopleCommittee(y) & Identified(z, x)) -> BirthRegistration(x) & CommuneLevelPeopleCommittee(y)).",
            "all x ((Mother(x) & CommuneLevelPeopleCommittee(y) & Identified(z, x)) -> BirthRegistration(x) & CommuneLevelPeopleCommittee(y)).",
            "all x ((Locality(x) & Living(y, x)) -> CommuneLevelPeopleCommittee(x)).",
            "all x ((AbandonedChild(x) & CommuneLevelPeopleCommittee(y) & TemporarilyRaising(z, x)) -> BirthRegistration(x) & CommuneLevelPeopleCommittee(y)).",
            "all x ((AbandonedChild(x) & CommuneLevelPeopleCommittee(y) & Organization(z) & HeadquarteredAt(z, x)) -> BirthRegistration(x) & CommuneLevelPeopleCommittee(y))."
        ],
        "conclusion": "all x,y ((BirthRegistrationApplicant(x) & MedicalEstablishment(z) & BornAt(z, y)) -> BirthCertificationPaper(x, z)).",
        "id": "c406e75f-bf5e-4bea-a4bd-35f4ecad4f30"
    },
    {
        "raw": "Predicates:\nRelationship(x, y) | Accountable(x) | Behavior(x) | Prosecution(x) | Penalties(x) | Marry(x, y) | Unmarried(x) | Cohabit(x, y) | Relative(x) | Adoption(x, y) | ContractEmployee(x) | Government(x) | CivilServant(x) | Adulterous(x) | Fired(x) | StateOfficial(x).\n\nExplanation:\nRelationship(x, y): There is a relationship between x and y.\nAccountable(x): x is accountable for his or her behavior.\nBehavior(x): x's behavior.\nProsecution(x): x faces criminal prosecution.\nPenalties(x): x faces administrative penalties.\nMarry(x, y): x marries y.\nUnmarried(x): x is unmarried.\nCohabit(x, y): x cohabits with y.\nRelative(x): x is a relative within three generations.\nAdoption(x, y): x is an adoptive parent of y.\nContractEmployee(x): x is a contract employee.\nGovernment(x): x works in the government.\nCivilServant(x): x is a civil servant.\nAdulterous(x): x is adulterous.\nFired(x): x is fired.\nStateOfficial(x): x is a State official.\n\nPremises:\nall x (Relationship(x, y) & Behavior(x) & ~Prosecution(x) -> Penalties(x)).\nMarry(x, y) | (Unmarried(x) & Cohabit(x, y)).\nall x (Relative(x) -> Marry(x, y)).\nall x (Adoption(x, y) -> Marry(x, y)).\nContractEmployee(x) & Government(x) -> ~CivilServant(x).\nall x (StateOfficial(x) & Adulterous(x) -> Fired(x)).\n\nConclusion:\nStateOfficial(x) & Adulterous(x) -> Fired(x).",
        "premises": [
            "all x (Relationship(x, y) & Behavior(x) & ~Prosecution(x) -> Penalties(x)).",
            "Marry(x, y) | (Unmarried(x) & Cohabit(x, y)).",
            "all x (Relative(x) -> Marry(x, y)).",
            "all x (Adoption(x, y) -> Marry(x, y)).",
            "ContractEmployee(x) & Government(x) -> ~CivilServant(x).",
            "all x (StateOfficial(x) & Adulterous(x) -> Fired(x))."
        ],
        "conclusion": "StateOfficial(x) & Adulterous(x) -> Fired(x).",
        "id": "7a0ce6b7-0f8b-4e91-9290-489dd50f4e6d"
    },
    {
        "raw": "Predicates:\nMortgage(x) | LoanCredit(x) | Signature(x) | AssetUser(x) | Property(x) | Notarization(x) | NotaryPublic(x) | Check(x) | Paper(x) | Ownership(x) | IdentityCard(x) | Registration(x) | CivilActCapacity(x) | MaritalStatus(x) | Sovereignty(x) | Spouse(x) | Certification(x) | MentalHealth(x) | MedicalRecord(x) | Forge(x) | Lawsuit(x) | Court(x) | Declare(x) | Invalid(x) | Forgery(x) | Charge(x) | Legal(x).\n\nExplanation:\nMortgage(x): x involves mortgage contracts.\nLoanCredit(x): x involves loan credit contracts.\nSignature(x): x has a signature.\nAssetUser(x): x is an asset user.\nProperty(x): x relates to property.\nNotarization(x): x requires notarization.\nNotaryPublic(x): x is a notary public.\nCheck(x): x is checked.\nPaper(x): x is a document.\nOwnership(x): x proves ownership.\nIdentityCard(x): x has an identity card.\nRegistration(x): x has a registration.\nCivilActCapacity(x): x has civil act capacity.\nMaritalStatus(x): x has a marital status.\nSovereignty(x): x has sovereignty.\nSpouse(x): x is a spouse.\nCertification(x): x has certification.\nMentalHealth(x): x has mental health problems.\nMedicalRecord(x): x has a medical record.\nForge(x): x forges a signature.\nLawsuit(x): x files a lawsuit.\nCourt(x): x is a court.\nDeclare(x): x declares something.\nInvalid(x): x is invalid.\nForgery(x): x involves forgery.\nCharge(x): x brings a charge.\nLegal(x): x is legal.\n\nPremises:\nall x (Mortgage(x) | LoanCredit(x) -> Signature(x) & AssetUser(x)).\nall x (Property(x) & Mortgage(x) -> Notarization(x)).\nall x (NotaryPublic(x) & Check(x) -> Paper(x) & Ownership(x) & IdentityCard(x) & Registration(x) & CivilActCapacity(x)).\nall x (MaritalStatus(x) & Notarization(x) -> Sovereignty(x) & Spouse(x)).\nall x (Certification(x) & MaritalStatus(x) -> Spouse(x)).\nall x (MentalHealth(x) -> MedicalRecord(x)).\nall x (Forge(x) & ~Signature(x) -> Lawsuit(x) & Court(x) & Declare(x) & Invalid(x)).\nall x (Charge(x) -> Forgery(x)).\n\nConclusion:\nall x (Charge(x) -> Legal(x)).",
        "premises": [
            "all x (Mortgage(x) | LoanCredit(x) -> Signature(x) & AssetUser(x)).",
            "all x (Property(x) & Mortgage(x) -> Notarization(x)).",
            "all x (NotaryPublic(x) & Check(x) -> Paper(x) & Ownership(x) & IdentityCard(x) & Registration(x) & CivilActCapacity(x)).",
            "all x (MaritalStatus(x) & Notarization(x) -> Sovereignty(x) & Spouse(x)).",
            "all x (Certification(x) & MaritalStatus(x) -> Spouse(x)).",
            "all x (MentalHealth(x) -> MedicalRecord(x)).",
            "all x (Forge(x) & ~Signature(x) -> Lawsuit(x) & Court(x) & Declare(x) & Invalid(x)).",
            "all x (Charge(x) -> Forgery(x))."
        ],
        "conclusion": "all x (Charge(x) -> Legal(x)).",
        "id": "00a73256-3ab7-4bd2-82cf-abf218c4589e"
    },
    {
        "raw": "Predicates:\nCollectEvidence(x) | Source(x) | Readable(x) | Audible(x) | Visible(x) | Exhibit(x) | Testimony(x) | Witness(x) | ExpertiseConclusion(x) | OnSiteEvaluation(x) | Custom(x) | PropertyValuation(x) | PriceAppraisal(x) | PrescribedByLaw(x) | Evidence(x).\n\nExplanation:\nCollectEvidence(x): x collects evidence.\nSource(x): x is a source of evidence.\nReadable(x): x is readable material.\nAudible(x): x is audible material.\nVisible(x): x is visible material.\nExhibit(x): x is an exhibit.\nTestimony(x): x is testimony.\nWitness(x): x is a witness.\nExpertiseConclusion(x): x is an expertise conclusion.\nOnSiteEvaluation(x): x is an on-site evaluation result.\nCustom(x): x is custom.\nPropertyValuation(x): x is property valuation result.\nPriceAppraisal(x): x is price appraisal result.\nPrescribedByLaw(x): x is prescribed by law.\nEvidence(x): x is evidence.\n\nPremises:\nall x (CollectEvidence(x) -> (Source(x))).\nReadable(x) | Audible(x) | Visible(x).\nExhibit(x).\nTestimony(x) -> Witness(x).\nExpertiseConclusion(x).\nOnSiteEvaluation(x).\nCustom(x).\nPropertyValuation(x) | PriceAppraisal(x).\nPrescribedByLaw(x).\n\nConclusion:\nall x (Testimony(x) -> Evidence(x)).",
        "premises": [
            "all x (CollectEvidence(x) -> (Source(x))).",
            "Readable(x) | Audible(x) | Visible(x).",
            "Exhibit(x).",
            "Testimony(x) -> Witness(x).",
            "ExpertiseConclusion(x).",
            "OnSiteEvaluation(x).",
            "Custom(x).",
            "PropertyValuation(x) | PriceAppraisal(x).",
            "PrescribedByLaw(x)."
        ],
        "conclusion": "all x (Testimony(x) -> Evidence(x)).",
        "id": "fa817187-6280-4f98-b4be-dd107672fd42"
    },
    {
        "raw": "Predicates:\nMarried(x) | Age(x) | Spouse(x) | Liability(x) | SexualIntercourse(x) | Imprisonment(x) | MarriageRegistration(x) | Invalid(x) | Recognized(x) | Divorced(x) | Remarry(x) | Convicted(x) | Couple(x) | AgeOfConsent(x).\n\nExplanation:\nMarried(x): x is married.\nAge(x): x's age.\nSpouse(x): x's spouse.\nLiability(x): x has liability.\nSexualIntercourse(x): x has sexual intercourse.\nImprisonment(x): x is sentenced to imprisonment.\nMarriageRegistration(x): x's marriage is registered.\nInvalid(x): x's marriage is invalid.\nRecognized(x): x's marriage is recognized by law.\nDivorced(x): x is divorced.\nRemarry(x): x remarries.\nConvicted(x): x is convicted.\nCouple(x): x and y are a couple.\nAgeOfConsent(x): x is of the age of consent.\n\nPremises:\nall x (Married(x) & Age(x) < 16 -> Liability(Spouse(x)) & SexualIntercourse(Spouse(x)) & Imprisonment(Spouse(x))).\nall x (Married(x) & Age(x) = 16 -> MarriageRegistration(x)).\nall x (MarriageRegistration(x) -> ~Invalid(x)).\nall x (Married(x) & ~MarriageRegistration(x) -> ~Recognized(x)).\nall x (Divorced(x) & Remarry(x) -> MarriageRegistration(x)).\nall x (Couple(x) & ~AgeOfConsent(x) -> Convicted(x)).\n\nConclusion:\nCouple(x) & ~AgeOfConsent(x) -> Convicted(x).",
        "premises": [
            "all x (Married(x) & Age(x) < 16 -> Liability(Spouse(x)) & SexualIntercourse(Spouse(x)) & Imprisonment(Spouse(x))).",
            "all x (Married(x) & Age(x) = 16 -> MarriageRegistration(x)).",
            "all x (MarriageRegistration(x) -> ~Invalid(x)).",
            "all x (Married(x) & ~MarriageRegistration(x) -> ~Recognized(x)).",
            "all x (Divorced(x) & Remarry(x) -> MarriageRegistration(x)).",
            "all x (Couple(x) & ~AgeOfConsent(x) -> Convicted(x))."
        ],
        "conclusion": "Couple(x) & ~AgeOfConsent(x) -> Convicted(x).",
        "id": "f4ace39b-f5bc-4fe2-a490-367a0697ae0b"
    },
    {
        "raw": "Predicates:\nSubmit(x, y, z) | SubmitDeclaration(x, y) | SubmitAppointmentPaper(x, y) | MakeGuardianLetters(x, y) | SignGuardianLetters(x, y) | CheckDocuments(x) | CollectFees(x) | IssueAppointmentSlip(x, y) | GuideApplicant(x) | VerifyDossier(x, y) | ProposeSolution(x, y) | SignDecision(x) | ReplyInWriting(x) | SubmitForm(x) | ReceiveResult(x) | RequestResult(x) | Application(x) | Recognition(x) | Guardianship(x) | ForeignElements(x) | InvolvedParty(x) | Dossier(x) | Component(x) | Appointment(x) | Guardian(x) | Person(x) | ManyPersons(x) | Director(x) | JusticeService(x) | Section(x) | Province(x) | Municipal(x) | Officer(x) | ProfessionalDivision(x) | Solution(x) | RequestReceivingSection(x) | ResultNotifyingSection(x).\n\nExplanation:\nSubmit(x, y, z): x submits dossier y at section z.\nSubmitDeclaration(x, y): x submits a declaration according to a set form y.\nSubmitAppointmentPaper(x, y): x submits a guardian appointment paper y.\nMakeGuardianLetters(x, y): x makes guardian letters y.\nSignGuardianLetters(x, y): x signs guardian letters y.\nCheckDocuments(x): x checks the documents.\nCollectFees(x): x collects fees.\nIssueAppointmentSlip(x, y): x issues an appointment slip to y.\nGuideApplicant(x): x guides the applicant.\nVerifyDossier(x, y): x verifies dossier y.\nProposeSolution(x, y): x proposes solution y.\nSignDecision(x): x signs a Decision.\nReplyInWriting(x): x replies in writing.\nSubmitForm(x): x submits a form.\nReceiveResult(x): x receives the result.\nRequestResult(x): x requests the result.\nApplication(x): x is an application.\nRecognition(x): x is recognition.\nGuardianship(x): x is guardianship.\nForeignElements(x): x involves foreign elements.\nInvolvedParty(x): x is an involved party.\nDossier(x): x is a dossier.\nComponent(x): x is a component.\nAppointment(x): x is an appointment.\nGuardian(x): x is a guardian.\nPerson(x): x is a person.\nManyPersons(x): x represents many persons.\nDirector(x): x is a director.\nJusticeService(x): x is a Justice Service.\nSection(x): x is a section.\nProvince(x): x is a province.\nMunicipal(x): x is a municipal.\nOfficer(x): x is an officer.\nProfessionalDivision(x): x is a professional division.\nSolution(x): x is a solution.\nRequestReceivingSection(x): x is a request-receiving section.\nResultNotifyingSection(x): x is a result-notifying section.\n\nPremises:\nall x (Submit(x, y, Section(JusticeService(Province(x))) | Section(JusticeService(Municipal(x)))) -> (SubmitDeclaration(x, Component(Dossier)) & SubmitAppointmentPaper(Guardian(x), Component(Dossier)))).\nall x (MakeGuardianLetters(x, Person(AppointingPerson)) & (ManyPersons(Person(AppointingPerson)) -> all y (SignGuardianLetters(Person(AppointingPerson), y))).\nall x (CheckDocuments(x) -> (Complete(x) & Valid(x))).\nall x (Complete(x) & Valid(x) -> (CollectFees(Officer(ReceivingDossiers)) & IssueAppointmentSlip(Officer(ReceivingDossiers), Dossier))).\nall x (Incomplete(x) | Invalid(x) -> GuideApplicant(Officer(ReceivingDossiers))).\nall x (VerifyDossier(ProfessionalDivision, Dossier) -> ProposeSolution(ProfessionalDivision, Director(JusticeService(Province)) | Director(JusticeService(Municipal)))).\nall x (SignDecision(Director(JusticeService(Province)) | Director(JusticeService(Municipal))) | ReplyInWriting(Director(JusticeService(Province)) | Director(JusticeService(Municipal)))).\nall x (SubmitForm(x) -> ReceiveResult(Officer(RequestReceivingSection) & ResultNotifyingSection(JusticeService(Province)) | ResultNotifyingSection(JusticeService(Municipal)))).\nall x (SubmitAppointmentPaper(x, y) & ReceiveResult(x) -> Application(y)).\nall x (Recognition(Guardianship(x)) -> ForeignElements(x)).\n\nConclusion:\nall x (Application(Guardianship(x)) -> ForeignElements(x)).",
        "premises": [
            "all x (Submit(x, y, Section(JusticeService(Province(x))) | Section(JusticeService(Municipal(x)))) -> (SubmitDeclaration(x, Component(Dossier)) & SubmitAppointmentPaper(Guardian(x), Component(Dossier)))).",
            "all x (MakeGuardianLetters(x, Person(AppointingPerson)) & (ManyPersons(Person(AppointingPerson)) -> all y (SignGuardianLetters(Person(AppointingPerson), y))).",
            "all x (CheckDocuments(x) -> (Complete(x) & Valid(x))).",
            "all x (Complete(x) & Valid(x) -> (CollectFees(Officer(ReceivingDossiers)) & IssueAppointmentSlip(Officer(ReceivingDossiers), Dossier))).",
            "all x (Incomplete(x) | Invalid(x) -> GuideApplicant(Officer(ReceivingDossiers))).",
            "all x (VerifyDossier(ProfessionalDivision, Dossier) -> ProposeSolution(ProfessionalDivision, Director(JusticeService(Province)) | Director(JusticeService(Municipal)))).",
            "all x (SignDecision(Director(JusticeService(Province)) | Director(JusticeService(Municipal))) | ReplyInWriting(Director(JusticeService(Province)) | Director(JusticeService(Municipal)))).",
            "all x (SubmitForm(x) -> ReceiveResult(Officer(RequestReceivingSection) & ResultNotifyingSection(JusticeService(Province)) | ResultNotifyingSection(JusticeService(Municipal)))).",
            "all x (SubmitAppointmentPaper(x, y) & ReceiveResult(x) -> Application(y)).",
            "all x (Recognition(Guardianship(x)) -> ForeignElements(x))."
        ],
        "conclusion": "all x (Application(Guardianship(x)) -> ForeignElements(x)).",
        "id": "9b4f331e-b079-4880-82b6-0061701f791f"
    }
]