[
    {
        "raw": " ###\nPredicates:\nCarry(x) | Declare(x) | Exit(x) | Entry(x) | Passport(x) | Cash(x) | ForeignCurrency(x) | VietnameseCurrency(x) | Individual(x) | InternationalBorder(x) | Vietnam(x) | BorderCustoms(x) | PaymentAccount(x) | CreditInstitution(x) | ForeignBankBranch(x) | ForeignExchange(x) | PaymentInstrument(x) | ValuablePaper(x) | TravelersCheck(x) | BankCard(x) | SavingsBook(x) | Securities(x).\n\nExplanation:\nCarry(x): x carries cash.\nDeclare(x): x declares cash to customs.\nExit(x): x exits a border.\nEntry(x): x enters a border.\nPassport(x): x has a passport.\nCash(x): x is cash.\nForeignCurrency(x): x is foreign currency.\nVietnameseCurrency(x): x is Vietnamese currency.\nIndividual(x): x is an individual.\nInternationalBorder(x): x is an international border.\nVietnam(x): x is in Vietnam.\nBorderCustoms(x): x is a border customs office.\nPaymentAccount(x): x is a payment account.\nCreditInstitution(x): x is a credit institution.\nForeignBankBranch(x): x is a foreign bank branch.\nForeignExchange(x): x conducts foreign exchange operations.\nPaymentInstrument(x): x is a payment instrument.\nValuablePaper(x): x is a valuable paper.\nTravelersCheck(x): x is a traveler's check.\nBankCard(x): x is a bank card.\nSavingsBook(x): x is a savings book.\nSecurities(x): x is a security.\n\nPremises:\nall x (Individual(x) & Exit(x) & Entry(x) & InternationalBorder(x) & Vietnam(x) & Passport(x) & Carry(x) & Cash(x) & (ForeignCurrency(x) | VietnameseCurrency(x)) & (> VND 15,000,000 | > US $5,000) -> Declare(x) & BorderCustoms(x)).\nall x (Individual(x) & Entry(x) & InternationalBorder(x) & Vietnam(x) & Carry(x) & Cash(x) & ForeignCurrency(x) & <= US $5,000 & PaymentAccount(x) & CreditInstitution(x) & ForeignBankBranch(x) & ForeignExchange(x) -> Declare(x) & BorderCustoms(x)).\nall x (Individual(x) & Exit(x) & Entry(x) & InternationalBorder(x) & Vietnam(x) & Passport(x) & Carry(x) & Cash(x) & (ForeignCurrency(x) | VietnameseCurrency(x)) & (> US $5,100 | > VND 20,000,000) -> Declare(x) & BorderCustoms(x)).\nall x (Individual(x) & Exit(x) & Entry(x) & InternationalBorder(x) & Vietnam(x) & Passport(x) & Carry(x) & (PaymentInstrument(x) | ValuablePaper(x)) & (TravelersCheck(x) | BankCard(x) | SavingsBook(x) | Securities(x)) -> ~Declare(x)).\n\nConclusion:\nall x (Individual(x) & Exit(x) & Entry(x) & InternationalBorder(x) & Vietnam(x) & Passport(x) & Carry(x) & Cash(x) & VietnameseCurrency(x) & VND 20,000,000 -> Declare(x) & BorderCustoms(x)).",
        "premises": [
            "all x (Individual(x) & Exit(x) & Entry(x) & InternationalBorder(x) & Vietnam(x) & Passport(x) & Carry(x) & Cash(x) & (ForeignCurrency(x) | VietnameseCurrency(x)) & (> VND 15,000,000 | > US $5,000) -> Declare(x) & BorderCustoms(x)).",
            "all x (Individual(x) & Entry(x) & InternationalBorder(x) & Vietnam(x) & Carry(x) & Cash(x) & ForeignCurrency(x) & <= US $5,000 & PaymentAccount(x) & CreditInstitution(x) & ForeignBankBranch(x) & ForeignExchange(x) -> Declare(x) & BorderCustoms(x)).",
            "all x (Individual(x) & Exit(x) & Entry(x) & InternationalBorder(x) & Vietnam(x) & Passport(x) & Carry(x) & Cash(x) & (ForeignCurrency(x) | VietnameseCurrency(x)) & (> US $5,100 | > VND 20,000,000) -> Declare(x) & BorderCustoms(x)).",
            "all x (Individual(x) & Exit(x) & Entry(x) & InternationalBorder(x) & Vietnam(x) & Passport(x) & Carry(x) & (PaymentInstrument(x) | ValuablePaper(x)) & (TravelersCheck(x) | BankCard(x) | SavingsBook(x) | Securities(x)) -> ~Declare(x))."
        ],
        "conclusion": "all x (Individual(x) & Exit(x) & Entry(x) & InternationalBorder(x) & Vietnam(x) & Passport(x) & Carry(x) & Cash(x) & VietnameseCurrency(x) & VND 20,000,000 -> Declare(x) & BorderCustoms(x)).",
        "id": "9b0ccfe7-97bf-4565-94ac-c26875f5a044"
    },
    {
        "raw": " ###\nPredicates:\nPaymentInstrument(x) | Illegal(x) | Forging(x) | Modifying(x) | Erasing(x) | Replacing(x) | Storing(x) | Circulating(x) | Transferring(x) | Using(x) | Infiltrating(x) | Sabotaging(x) | Changing(x) | ProvidingFalseInfo(x) | DisclosingInfo(x) | OpeningAccount(x) | MaintainingAccount(x) | Anonymous(x) | Impersonation(x) | Issuing(x) | UsingIllegal(x) | Cryptocurrency(x) | Legitimate(x) | ElectronicExchange(x).\n\nExplanation:\nPaymentInstrument(x): x is a payment instrument.\nIllegal(x): x is illegal.\nForging(x): x is forged.\nModifying(x): x is modified.\nErasing(x): x is erased.\nReplacing(x): x is replaced.\nStoring(x): x is stored.\nCirculating(x): x is circulated.\nTransferring(x): x is transferred.\nUsing(x): x is used.\nInfiltrating(x): x is infiltrated.\nSabotaging(x): x is sabotaged.\nChanging(x): x is changed.\nProvidingFalseInfo(x): x provides false information.\nDisclosingInfo(x): x discloses information.\nOpeningAccount(x): x opens an account.\nMaintainingAccount(x): x maintains an account.\nAnonymous(x): x is anonymous.\nImpersonation(x): x is impersonated.\nIssuing(x): x is issued.\nUsingIllegal(x): x uses illegal payment instruments.\nCryptocurrency(x): x is a cryptocurrency.\nLegitimate(x): x is legitimate.\nElectronicExchange(x): x is an electronic exchange.\n\nPremises:\nall x (PaymentInstrument(x) -> (Forging(x) | Modifying(x) | Erasing(x) | Replacing(x) | Storing(x) | Circulating(x) | Transferring(x) | Using(x))).\nall x (Illegal(x) -> (Infiltrating(x) | Sabotaging(x) | Changing(x) | ProvidingFalseInfo(x) | DisclosingInfo(x) | OpeningAccount(x) | MaintainingAccount(x) | Anonymous(x) | Impersonation(x) | Issuing(x) | UsingIllegal(x))).\nall x (Cryptocurrency(x) -> PaymentInstrument(x)).\nall x (Legitimate(x) -> ElectronicExchange(x)).\n\nConclusion:\nall x (Cryptocurrency(x) -> Legitimate(x)).\n\nPlease note that the conclusion is based on the provided rules and goals. However, the actual legal status of cryptocurrencies as a legitimate payment vehicle on electronic exchanges may vary depending on the specific laws and regulations of a jurisdiction.",
        "premises": [
            "all x (PaymentInstrument(x) -> (Forging(x) | Modifying(x) | Erasing(x) | Replacing(x) | Storing(x) | Circulating(x) | Transferring(x) | Using(x))).",
            "all x (Illegal(x) -> (Infiltrating(x) | Sabotaging(x) | Changing(x) | ProvidingFalseInfo(x) | DisclosingInfo(x) | OpeningAccount(x) | MaintainingAccount(x) | Anonymous(x) | Impersonation(x) | Issuing(x) | UsingIllegal(x))).",
            "all x (Cryptocurrency(x) -> PaymentInstrument(x)).",
            "all x (Legitimate(x) -> ElectronicExchange(x))."
        ],
        "conclusion": "Please note that the conclusion is based on the provided rules and goals. However, the actual legal status of cryptocurrencies as a legitimate payment vehicle on electronic exchanges may vary depending on the specific laws and regulations of a jurisdiction.",
        "id": "7c2bdc89-9f2d-4ef3-9147-0cfc3d47d5c7"
    },
    {
        "raw": " Predicates:\nTradeForeignCurrency(x) | ValueUnderUSD1000(x) | UnauthorizedOrganization(x) | ComplyRegulations(x) | PaymentForeignCurrency(x) | Penalty(x) | ForeignCurrency(x).\n\nExplanation:\nTradeForeignCurrency(x): x trades foreign currency.\nValueUnderUSD1000(x): x has a value under USD 1000.\nUnauthorizedOrganization(x): x is an unauthorized organization.\nComplyRegulations(x): x complies with regulations.\nPaymentForeignCurrency(x): x makes payment in foreign currency.\nPenalty(x): x has a penalty.\nForeignCurrency(x): x is foreign currency.\n\nPremises:\nall x (TradeForeignCurrency(x) & ValueUnderUSD1000(x) & UnauthorizedOrganization(x) -> Penalty(x)).\nall x (PaymentForeignCurrency(x) & ValueUnderUSD1000(x) & ~ComplyRegulations(x) -> Penalty(x)).\n\nConclusion:\nall x (TradeForeignCurrency(x) & UnauthorizedOrganization(x) -> Penalty(x)).",
        "premises": [
            "all x (TradeForeignCurrency(x) & ValueUnderUSD1000(x) & UnauthorizedOrganization(x) -> Penalty(x)).",
            "all x (PaymentForeignCurrency(x) & ValueUnderUSD1000(x) & ~ComplyRegulations(x) -> Penalty(x))."
        ],
        "conclusion": "all x (TradeForeignCurrency(x) & UnauthorizedOrganization(x) -> Penalty(x)).",
        "id": "064d2f1d-03e5-4089-ba44-b7f4d0b1cea0"
    },
    {
        "raw": " Predicates:\nApplicationForm(x) | CitizenID(x) | IDCard(x) | Passport(x) | BirthCertificate(x) | EntryVisa(x) | ExemptionDoc(x) | Guardian(x) | LegalRepresentative(x) | CheckingAccount(x) | OpenAccount(x) | VietnameseCitizen(x) | Foreigner(x) | Under14(x) | UnexpiredPassport(x) | CCCDCard(x) | NecessaryDoc(x) | Possible(x).\n\nExplanation:\nApplicationForm(x): x is an application form for checking account opening.\nCitizenID(x): x is a citizen identification card.\nIDCard(x): x is an ID card.\nPassport(x): x is a passport.\nBirthCertificate(x): x is a birth certificate.\nEntryVisa(x): x is an entry visa.\nExemptionDoc(x): x is a document proving exemption from entry visa.\nGuardian(x): x is a guardian.\nLegalRepresentative(x): x is a legal representative.\nCheckingAccount(x): x is a checking account.\nOpenAccount(x): x opens an account.\nVietnameseCitizen(x): x is a Vietnamese citizen.\nForeigner(x): x is a foreigner.\nUnder14(x): x is under 14 years old.\nUnexpiredPassport(x): x is an unexpired passport.\nCCDCCard(x): x is a CCCD card.\nNecessaryDoc(x): x is a necessary document.\nPossible(x): x is possible.\n\nPremises:\nall x (OpenAccount(x) -> ApplicationForm(x)).\nall x (VietnameseCitizen(x) -> (CitizenID(x) | IDCard(x) | Passport(x) | BirthCertificate(x))).\nall x (Under14(x) -> BirthCertificate(x)).\nall x (Foreigner(x) -> (EntryVisa(x) | ExemptionDoc(x))).\nall x (Guardian(x) | LegalRepresentative(x) -> NecessaryDoc(x)).\n-NecessaryDoc(x) | CCDCCard(x).\nall x (Possible(x) -> NecessaryDoc(x)).\n\nConclusion:\n-Possible(OpenAccount(x) & -CCDCCard(x)).",
        "premises": [
            "all x (OpenAccount(x) -> ApplicationForm(x)).",
            "all x (VietnameseCitizen(x) -> (CitizenID(x) | IDCard(x) | Passport(x) | BirthCertificate(x))).",
            "all x (Under14(x) -> BirthCertificate(x)).",
            "all x (Foreigner(x) -> (EntryVisa(x) | ExemptionDoc(x))).",
            "all x (Guardian(x) | LegalRepresentative(x) -> NecessaryDoc(x)).",
            "-NecessaryDoc(x) | CCDCCard(x).",
            "all x (Possible(x) -> NecessaryDoc(x))."
        ],
        "conclusion": "-Possible(OpenAccount(x) & -CCDCCard(x)).",
        "id": "e1946d8a-ebdb-49ba-964d-ba72fffe2433"
    },
    {
        "raw": " ###\nPredicates:\nCarry(x, y) | Allow(x) | Individual(x) | Enter(x) | Exit(x) | Passport(x) | IngotGold(x) | RawMaterialGold(x) | Jewelry(x) | Declare(x) | CustomsAuthorities(x) | Foreigner(x) | Vietnam(x).\n\nExplanation:\nCarry(x, y): x carries y.\nAllow(x): x is allowed.\nIndividual(x): x is an individual.\nEnter(x): x enters.\nExit(x): x exits.\nPassport(x): x has a passport.\nIngotGold(x): x is ingot gold.\nRawMaterialGold(x): x is raw material gold.\nJewelry(x): x is jewelry.\nDeclare(x): x declares.\nCustomsAuthorities(x): x is customs authorities.\nForeigner(x): x is a foreigner.\nVietnam(x): x is in Vietnam.\n\nPremises:\n-Carry(x, IngotGold(y)) | -Foreigner(x) | Enter(x) | Passport(x) | Vietnam(x).\n-Carry(x, RawMaterialGold(y)) | -Foreigner(x) | Enter(x) | Passport(x) | Vietnam(x).\nCarry(x, Jewelry(y)) & Weight(y, >=300g) -> Declare(x, CustomsAuthorities(z)).\n\nConclusion:\nAllow(Foreigner(x), Carry(x, Jewelry(y))) & Enter(x) | Passport(x) | Vietnam(x).",
        "premises": [
            "-Carry(x, IngotGold(y)) | -Foreigner(x) | Enter(x) | Passport(x) | Vietnam(x).",
            "-Carry(x, RawMaterialGold(y)) | -Foreigner(x) | Enter(x) | Passport(x) | Vietnam(x).",
            "Carry(x, Jewelry(y)) & Weight(y, >=300g) -> Declare(x, CustomsAuthorities(z))."
        ],
        "conclusion": "Allow(Foreigner(x), Carry(x, Jewelry(y))) & Enter(x) | Passport(x) | Vietnam(x).",
        "id": "9789c422-3ba7-469c-ba93-7ef37943ebbc"
    },
    {
        "raw": " ###\nPredicates:\nCounterfeit(x) | Transport(x) | Store(x) | Circulate(x) | Buy(x) | Sell(x) | Destroy(x) | Photocopy(x) | Illegal(x) | Approval(x) | StateBank(x) | Vietnam(x) | VietnameseCurrency(x).\n\nExplanation:\nCounterfeit(x): x engages in counterfeiting money.\nTransport(x): x transports money.\nStore(x): x stores money.\nCirculate(x): x circulates money.\nBuy(x): x buys money.\nSell(x): x sells money.\nDestroy(x): x destroys money.\nPhotocopy(x): x photocopies money.\nIllegal(x): x is illegal.\nApproval(x): x has approval.\nStateBank(x): x is the State Bank.\nVietnam(x): x is in the territory of Vietnam.\nVietnameseCurrency(x): x is Vietnamese currency.\n\nPremises:\nall x (Counterfeit(x) -> (Transport(x) | Store(x) | Circulate(x) | Buy(x) | Sell(x))).\nall x (Destroy(x) -> Illegal(x)).\nall x (Photocopy(x) -> (Illegal(x) & ~Approval(x))).\nall x (Illegal(x) -> Vietnam(x)).\nall x (StateBank(x) -> Vietnam(x)).\n-Photocopy(x) | Approval(x).\nall x (VietnameseCurrency(x) -> StateBankApproval(x)).\n\nConclusion:\nall x (Destroy(x) -> Illegal(x)).",
        "premises": [
            "all x (Counterfeit(x) -> (Transport(x) | Store(x) | Circulate(x) | Buy(x) | Sell(x))).",
            "all x (Destroy(x) -> Illegal(x)).",
            "all x (Photocopy(x) -> (Illegal(x) & ~Approval(x))).",
            "all x (Illegal(x) -> Vietnam(x)).",
            "all x (StateBank(x) -> Vietnam(x)).",
            "-Photocopy(x) | Approval(x).",
            "all x (VietnameseCurrency(x) -> StateBankApproval(x))."
        ],
        "conclusion": "all x (Destroy(x) -> Illegal(x)).",
        "id": "290a8877-962e-4f88-94e9-875d9c0f9d98"
    },
    {
        "raw": " ###\nPredicates:\nTransaction(x) | Payment(x) | Posting(x) | Advertisement(x) | Quotation(x) | Valuation(x) | PriceEntry(x) | Contract(x) | Agreement(x) | Resident(x) | NonResident(x) | ForeignExchange(x) | Permitted(x) | StateBank(x) | Vietnam(x) | Illegal(x) | LeaseContract(x) | House(x).\n\nExplanation:\nTransaction(x): x is a transaction.\nPayment(x): x is a payment.\nPosting(x): x is a posting.\nAdvertisement(x): x is an advertisement.\nQuotation(x): x is a quotation.\nValuation(x): x is a valuation.\nPriceEntry(x): x is a price entry in contracts, agreements, or other similar forms.\nContract(x): x is a contract.\nAgreement(x): x is an agreement.\nResident(x): x is a resident.\nNonResident(x): x is a non-resident.\nForeignExchange(x): x is in foreign exchange.\nPermitted(x): x is permitted by the State Bank of Vietnam.\nStateBank(x): x is the State Bank of Vietnam.\nVietnam(x): x is in the territory of Vietnam.\nIllegal(x): x is illegal.\nLeaseContract(x): x is a lease contract.\nHouse(x): x is a house.\n\nPremises:\nall x (Resident(x) | NonResident(x)).\nall x (Transaction(x) | Payment(x) | Posting(x) | Advertisement(x) | Quotation(x) | Valuation(x) | PriceEntry(x) -> (Resident(x) | NonResident(x))).\nall x (Contract(x) | Agreement(x) -> (Transaction(x) | Payment(x) | Posting(x) | Advertisement(x) | Quotation(x) | Valuation(x) | PriceEntry(x))).\nall x (ForeignExchange(x) -> Permitted(x)).\nall x (Permitted(x) -> StateBank(x)).\nall x (StateBank(x) -> Vietnam(x)).\nall x (LeaseContract(x) -> Contract(x)).\nall x (House(x) -> Vietnam(x)).\n\nConclusion:\nall x (LeaseContract(x) & ForeignExchange(x) -> Illegal(x)).",
        "premises": [
            "all x (Resident(x) | NonResident(x)).",
            "all x (Transaction(x) | Payment(x) | Posting(x) | Advertisement(x) | Quotation(x) | Valuation(x) | PriceEntry(x) -> (Resident(x) | NonResident(x))).",
            "all x (Contract(x) | Agreement(x) -> (Transaction(x) | Payment(x) | Posting(x) | Advertisement(x) | Quotation(x) | Valuation(x) | PriceEntry(x))).",
            "all x (ForeignExchange(x) -> Permitted(x)).",
            "all x (Permitted(x) -> StateBank(x)).",
            "all x (StateBank(x) -> Vietnam(x)).",
            "all x (LeaseContract(x) -> Contract(x)).",
            "all x (House(x) -> Vietnam(x))."
        ],
        "conclusion": "all x (LeaseContract(x) & ForeignExchange(x) -> Illegal(x)).",
        "id": "7fbf3cc8-1c9a-4a0c-9ede-ec20f362e60c"
    },
    {
        "raw": " ###\nPredicates:\nEnterprise(x) | CashPayment(x) | CapitalContribution(x) | Purchase(x) | Sale(x) | Transfer(x) | Borrow(x) | Lend(x) | CreditInstitution(x) | Allowed(x) | NotAllowed(x).\n\nExplanation:\nEnterprise(x): x is an enterprise.\nCashPayment(x): x is a cash payment.\nCapitalContribution(x): x is a capital contribution.\nPurchase(x): x is a purchase.\nSale(x): x is a sale.\nTransfer(x): x is a transfer.\nBorrow(x): x is borrowing.\nLend(x): x is lending.\nCreditInstitution(x): x is a credit institution.\nAllowed(x): x is allowed.\nNotAllowed(x): x is not allowed.\n\nPremises:\nall x (Enterprise(x) -> ~CashPayment(x)). % Enterprises shall not make cash payment.\nall x (CapitalContribution(x) -> ~CashPayment(x)). % No cash payment in capital contribution transactions.\nall x (Purchase(x) -> ~CashPayment(x)). % No cash payment in the purchase of capital contributions.\nall x (Sale(x) -> ~CashPayment(x)). % No cash payment in the sale of capital contributions.\nall x (Transfer(x) -> ~CashPayment(x)). % No cash payment in the transfer of capital contributions.\nall x (Enterprise(x) & ~CreditInstitution(x) -> ~(Borrow(x) & CashPayment(x))). % Enterprises other than credit institutions do not use cash when borrowing.\nall x (Enterprise(x) & ~CreditInstitution(x) -> ~(Lend(x) & CashPayment(x))). % Enterprises other than credit institutions do not use cash when lending.\n\nConclusion:\nall x (Enterprise(x) & ~CreditInstitution(x) -> NotAllowed(x)). % The company is not allowed to use cash when lending.",
        "premises": [
            "all x (Enterprise(x) -> ~CashPayment(x)). % Enterprises shall not make cash payment.",
            "all x (CapitalContribution(x) -> ~CashPayment(x)). % No cash payment in capital contribution transactions.",
            "all x (Purchase(x) -> ~CashPayment(x)). % No cash payment in the purchase of capital contributions.",
            "all x (Sale(x) -> ~CashPayment(x)). % No cash payment in the sale of capital contributions.",
            "all x (Transfer(x) -> ~CashPayment(x)). % No cash payment in the transfer of capital contributions.",
            "all x (Enterprise(x) & ~CreditInstitution(x) -> ~(Borrow(x) & CashPayment(x))). % Enterprises other than credit institutions do not use cash when borrowing.",
            "all x (Enterprise(x) & ~CreditInstitution(x) -> ~(Lend(x) & CashPayment(x))). % Enterprises other than credit institutions do not use cash when lending."
        ],
        "conclusion": "all x (Enterprise(x) & ~CreditInstitution(x) -> NotAllowed(x)). % The company is not allowed to use cash when lending.",
        "id": "6b1e724-2a30-49d9-8c43-ca7af168eea2"
    },
    {
        "raw": " ###\nPredicates:\nDebt(x) | RestructuredRepayment(x) | RepaymentPeriod(x) | Adjusted(x) | Rescheduled(x) | CreditInstitution(x) | ForeignBankBranch(x) | Customer(x) | Capable(x) | Principal(x) | Interest(x) | AgreedSchedule(x) | FullPayment(x) | Undue(x) | BadDebt(x).\n\nExplanation:\nDebt(x): x is a debt.\nRestructuredRepayment(x): x has a restructured repayment term.\nRepaymentPeriod(x): x is the repayment period.\nAdjusted(x): x is adjusted.\nRescheduled(x): x is rescheduled.\nCreditInstitution(x): x is a credit institution.\nForeignBankBranch(x): x is a foreign bank branch.\nCustomer(x): x is a customer.\nCapable(x): x is capable of paying.\nPrincipal(x): x is the principal amount.\nInterest(x): x is the interest.\nAgreedSchedule(x): x is the agreed schedule.\nFullPayment(x): x is a full payment.\nUndue(x): x is an undue debt.\nBadDebt(x): x is a bad debt.\n\nPremises:\nall x (Debt(x) & RestructuredRepayment(x) -> (Adjusted(x) | Rescheduled(x))).\nall x (RestructuredRepayment(x) -> (CreditInstitution(x) | ForeignBankBranch(x))).\nall x (Customer(x) & ~Capable(x) -> RestructuredRepayment(x)).\nall x (RestructuredRepayment(x) & Capable(x) -> FullPayment(x)).\nall x (Undue(x) -> Debt(x)).\nall x (Undue(x) & ~FullPayment(x) -> BadDebt(x)).\n\nConclusion:\nall x (Undue(x) -> BadDebt(x)).",
        "premises": [
            "all x (Debt(x) & RestructuredRepayment(x) -> (Adjusted(x) | Rescheduled(x))).",
            "all x (RestructuredRepayment(x) -> (CreditInstitution(x) | ForeignBankBranch(x))).",
            "all x (Customer(x) & ~Capable(x) -> RestructuredRepayment(x)).",
            "all x (RestructuredRepayment(x) & Capable(x) -> FullPayment(x)).",
            "all x (Undue(x) -> Debt(x)).",
            "all x (Undue(x) & ~FullPayment(x) -> BadDebt(x))."
        ],
        "conclusion": "all x (Undue(x) -> BadDebt(x)).",
        "id": "0b1c6aeb-f312-4192-8b83-45f266e256c7"
    },
    {
        "raw": " ###\nPredicates:\nPenalty(x) | Power(x) | Impose(x) | Violation(x) | RoadTransport(x) | RailTransport(x) | Officer(x) | RedLine(x).\n\nExplanation:\nPenalty(x): x is a penalty.\nPower(x): x has the power.\nImpose(x): x imposes a penalty.\nViolation(x): x is a violation.\nRoadTransport(x): x is road transport.\nRailTransport(x): x is rail transport.\nOfficer(x): x is an officer.\nRedLine(x): x gets a red line.\n\nPremises:\nall x (Violation(x) -> (RoadTransport(x) | RailTransport(x))).\nall x (Power(x) -> Impose(x)).\nall x (Impose(x) -> Penalty(x)).\nall x (Officer(x) -> Power(x)).\n\nConclusion:\nall x (Officer(x) -> RedLine(x)).\n\nNote: The conclusion is based on the interpretation that an officer with the power to impose penalties for road and rail transport violations gets a red line. However, the provided information does not explicitly state that officers get a red line, so this conclusion is an assumption based on the given premises.",
        "premises": [
            "all x (Violation(x) -> (RoadTransport(x) | RailTransport(x))).",
            "all x (Power(x) -> Impose(x)).",
            "all x (Impose(x) -> Penalty(x)).",
            "all x (Officer(x) -> Power(x))."
        ],
        "conclusion": "Note: The conclusion is based on the interpretation that an officer with the power to impose penalties for road and rail transport violations gets a red line. However, the provided information does not explicitly state that officers get a red line, so this conclusion is an assumption based on the given premises.",
        "id": "8121f6ab-4eb9-493e-8a64-2ecce6cbd45e"
    },
    {
        "raw": " ###\nPredicates:\n\n* Participate(x, y): x participates in insurance at y.\n* InsuranceEnterprise(x): x is an insurance enterprise.\n* ForeignBranch(x): x is a foreign branch.\n* Licensed(x): x is licensed to operate in Vietnam.\n* CrossBorderService(x): x is a cross-border insurance service.\n* IllegalInterference(x, y): x illegally interferes in y's right to select an insurer.\n* Threaten(x, y): x threatens y.\n* Coerce(x, y): x coerces y.\n* CommercialBank(x): x is a commercial bank.\n* Customer(x): x is a customer.\n* Borrow(x, y): x borrows from y.\n* ForceInsurance(x, y): x forces y to buy insurance.\n\nExplanation:\n\n* Participate(x, y): x participates in insurance at y.\n* InsuranceEnterprise(x): x is an insurance enterprise.\n* ForeignBranch(x): x is a foreign branch.\n* Licensed(x): x is licensed to operate in Vietnam.\n* CrossBorderService(x): x is a cross-border insurance service.\n* IllegalInterference(x, y): x illegally interferes in y's right to select an insurer.\n* Threaten(x, y): x threatens y.\n* Coerce(x, y): x coerces y.\n* CommercialBank(x): x is a commercial bank.\n* Customer(x): x is a customer.\n* Borrow(x, y): x borrows from y.\n* ForceInsurance(x, y): x forces y to buy insurance.\n\nPremises:\n\n* all x, y (Participate(x, y) -> (InsuranceEnterprise(y) | ForeignBranch(y))).\n* all x, y (Participate(x, y) -> Licensed(y)).\n* all x, y (Participate(x, y) -> ~CrossBorderService(y)).\n* all x, y (IllegalInterference(x, y) -> ~CommercialBank(x)).\n* all x, y (Threaten(x, y) -> ~CommercialBank(x)).\n* all x, y (Coerce(x, y) -> ~CommercialBank(x)).\n* all x, y (Borrow(x, y) -> ~ForceInsurance(y, x)).\n\nConclusion:\n\n* all x, y (CommercialBank(x) -> ~ForceInsurance(x, y)).",
        "premises": [
            "* all x, y (Participate(x, y) -> (InsuranceEnterprise(y) | ForeignBranch(y))).",
            "* all x, y (Participate(x, y) -> Licensed(y)).",
            "* all x, y (Participate(x, y) -> ~CrossBorderService(y)).",
            "* all x, y (IllegalInterference(x, y) -> ~CommercialBank(x)).",
            "* all x, y (Threaten(x, y) -> ~CommercialBank(x)).",
            "* all x, y (Coerce(x, y) -> ~CommercialBank(x)).",
            "* all x, y (Borrow(x, y) -> ~ForceInsurance(y, x))."
        ],
        "conclusion": "* all x, y (CommercialBank(x) -> ~ForceInsurance(x, y)).",
        "id": "4e45a89c-0a24-4025-8283-071a48e0df16"
    },
    {
        "raw": " ###\nPredicates:\nFine(x) | Person(x) | Carry(x) | Motorcycle(x) | Moped(x) | ElectricMotorcycle(x) | SimilarVehicle(x) | Helmet(x) | FastenStraps(x) | RoadTraffic(x).\n\nExplanation:\nFine(x): x is fined.\nPerson(x): x is a person.\nCarry(x): x is carried.\nMotorcycle(x): x is a motorcycle.\nMoped(x): x is a moped.\nElectricMotorcycle(x): x is an electric motorcycle.\nSimilarVehicle(x): x is a vehicle similar to a motorcycle or moped.\nHelmet(x): x has a helmet.\nFastenStraps(x): x fastens the helmet straps.\nRoadTraffic(x): x is participating in road traffic.\n\nPremises:\nall x (Person(x) & Carry(x) & (Motorcycle(x) | Moped(x) | ElectricMotorcycle(x) | SimilarVehicle(x)) & ~Helmet(x) & RoadTraffic(x) -> Fine(x)).\nall x (Person(x) & Carry(x) & (Motorcycle(x) | Moped(x) | ElectricMotorcycle(x) | SimilarVehicle(x)) & Helmet(x) & ~FastenStraps(x) & RoadTraffic(x) -> Fine(x)).\nall x (Fine(x) -> (VND200000 <= x <= VND300000)).\n\nConclusion:\nall x (Person(x) & Carry(x) & (Motorcycle(x) | Moped(x) | ElectricMotorcycle(x) | SimilarVehicle(x)) & ~Helmet(x) & RoadTraffic(x) -> Fine(x)).\nall x (Person(x) & Carry(x) & (Motorcycle(x) | Moped(x) | ElectricMotorcycle(x) | SimilarVehicle(x)) & Helmet(x) & ~FastenStraps(x) & RoadTraffic(x) -> Fine(x)).",
        "premises": [
            "all x (Person(x) & Carry(x) & (Motorcycle(x) | Moped(x) | ElectricMotorcycle(x) | SimilarVehicle(x)) & ~Helmet(x) & RoadTraffic(x) -> Fine(x)).",
            "all x (Person(x) & Carry(x) & (Motorcycle(x) | Moped(x) | ElectricMotorcycle(x) | SimilarVehicle(x)) & Helmet(x) & ~FastenStraps(x) & RoadTraffic(x) -> Fine(x)).",
            "all x (Fine(x) -> (VND200000 <= x <= VND300000))."
        ],
        "conclusion": "all x (Person(x) & Carry(x) & (Motorcycle(x) | Moped(x) | ElectricMotorcycle(x) | SimilarVehicle(x)) & Helmet(x) & ~FastenStraps(x) & RoadTraffic(x) -> Fine(x)).",
        "id": "5b287a17-0ea7-457c-8a7b-a38a040c2444"
    },
    {
        "raw": " ###\nPredicates:\nResponsibility(x) | Ensure(x) | Facility(x) | TestingEquipment(x) | ScoringInstrument(x) | Accurate(x) | Objective(x) | Report(x) | DepartmentOfTransport(x) | DirectorateForRoadsOfVietnam(x) | Inaccurate(x) | Unstable(x) | Change(x) | TimelyHandling(x) | Cooperate(x) | DriverTrainingInstitution(x) | RefresherCourse(x) | DrivingTestCouncil(x) | Convenient(x) | Schedule(x) | Comply(x) | CompetentAuthority(x) | Inspect(x) | Assess(x) | PubliclyAnnounce(x) | TestingFee(x) | ServiceCharge(x) | ExternalVehicle(x) | Allow(x).\n\nExplanation:\nResponsibility(x): x is a responsibility of driving test centers.\nEnsure(x): x ensures facilities, testing equipment, and scoring instruments.\nFacility(x): x is a facility.\nTestingEquipment(x): x is testing equipment.\nScoringInstrument(x): x is a scoring instrument.\nAccurate(x): x is accurate.\nObjective(x): x is objective.\nReport(x): x reports to the Department of Transport and Directorate for Roads of Vietnam.\nDepartmentOfTransport(x): x is the Department of Transport.\nDirectorateForRoadsOfVietnam(x): x is the Directorate for Roads of Vietnam.\nInaccurate(x): x is inaccurate.\nUnstable(x): x is unstable.\nChange(x): x changes testing equipment.\nTimelyHandling(x): x is handled in a timely manner.\nCooperate(x): x cooperates with driver training institutions or driving test councils.\nDriverTrainingInstitution(x): x is a driver training institution.\nRefresherCourse(x): x provides refresher courses.\nDrivingTestCouncil(x): x is a driving test council.\nConvenient(x): x is convenient.\nSchedule(x): x is on schedule.\nComply(x): x complies with competent authorities.\nCompetentAuthority(x): x is a competent authority.\nInspect(x): x inspects driving test centers.\nAssess(x): x assesses driving test centers.\nPubliclyAnnounce(x): x publicly announces testing fees and other service charges.\nTestingFee(x): x is a testing fee.\nServiceCharge(x): x is a service charge.\nExternalVehicle(x): x is an external vehicle.\nAllow(x): x is allowed.\n\nPremises:\nall x (Responsibility(x) -> Ensure(x)).\nall x (Ensure(x) -> (Facility(x) | TestingEquipment(x) | ScoringInstrument(x))).\nall x (Ensure(x) -> (Accurate(x) | Objective(x))).\nall x (Report(x) -> (DepartmentOfTransport(x) | DirectorateForRoadsOfVietnam(x))).\nall x (Report(x) -> (Inaccurate(x) | Unstable(x) | Change(x))).\nall x (Report(x) -> TimelyHandling(x)).\nall x (Cooperate(x) -> DriverTrainingInstitution(x)).\nall x (Cooperate(x) -> RefresherCourse(x)).\nall x (Cooperate(x) -> DrivingTestCouncil(x)).\nall x (Cooperate(x) -> (Convenient(x) | Schedule(x))).\nall x (Comply(x) -> CompetentAuthority(x)).\nall x (Comply(x) -> (Inspect(x) | Assess(x))).\nall x (PubliclyAnnounce(x) -> TestingFee(x)).\nall x (PubliclyAnnounce(x) -> ServiceCharge(x)).\n\nConclusion:\nall x (ExternalVehicle(x) -> Allow(x)).",
        "premises": [
            "all x (Responsibility(x) -> Ensure(x)).",
            "all x (Ensure(x) -> (Facility(x) | TestingEquipment(x) | ScoringInstrument(x))).",
            "all x (Ensure(x) -> (Accurate(x) | Objective(x))).",
            "all x (Report(x) -> (DepartmentOfTransport(x) | DirectorateForRoadsOfVietnam(x))).",
            "all x (Report(x) -> (Inaccurate(x) | Unstable(x) | Change(x))).",
            "all x (Report(x) -> TimelyHandling(x)).",
            "all x (Cooperate(x) -> DriverTrainingInstitution(x)).",
            "all x (Cooperate(x) -> RefresherCourse(x)).",
            "all x (Cooperate(x) -> DrivingTestCouncil(x)).",
            "all x (Cooperate(x) -> (Convenient(x) | Schedule(x))).",
            "all x (Comply(x) -> CompetentAuthority(x)).",
            "all x (Comply(x) -> (Inspect(x) | Assess(x))).",
            "all x (PubliclyAnnounce(x) -> TestingFee(x)).",
            "all x (PubliclyAnnounce(x) -> ServiceCharge(x))."
        ],
        "conclusion": "all x (ExternalVehicle(x) -> Allow(x)).",
        "id": "4e10db30-25ac-4972-8782-c85bebe53b57"
    },
    {
        "raw": " Predicates:\nFine(x) | Gather(x) | Encourage(x) | Incite(x) | Vehicle(x) | BehindLimit(x) | Weaving(x) | Speeding(x) | Chasing(x) | Racing(x) | Illegal(x) | Cheer(x) | VND1000010(x) | VND2020500(x).\n\nExplanation:\nFine(x): x is fined.\nGather(x): x gathers.\nEncourage(x): x encourages.\nIncite(x): x incites.\nVehicle(x): x is a vehicle.\nBehindLimit(x): x is behind the speed limit.\nWeaving(x): x is weaving.\nSpeeding(x): x is speeding.\nChasing(x): x is chasing.\nRacing(x): x is racing.\nIllegal(x): x is illegal.\nCheer(x): x is a cheer.\nVND1000010(x): x is a fine of VND 1,000,010.\nVND2020500(x): x is a fine of VND 2,020,500.\n\nPremises:\nall x (Gather(x) & (Encourage(x) | Incite(x)) & (BehindLimit(x) | Weaving(x) | Speeding(x) | Chasing(x) | Racing(x)) & Illegal(x) -> Fine(x)).\nall x (Fine(x) -> (VND1000010(x) | VND2020500(x))).\nall x (Racing(x) & Illegal(x) & Cheer(x) -> Gather(x) & Encourage(x)).\n\nConclusion:\nFine(x) & Cheer(x) & Racing(x) & Illegal(x).",
        "premises": [
            "all x (Gather(x) & (Encourage(x) | Incite(x)) & (BehindLimit(x) | Weaving(x) | Speeding(x) | Chasing(x) | Racing(x)) & Illegal(x) -> Fine(x)).",
            "all x (Fine(x) -> (VND1000010(x) | VND2020500(x))).",
            "all x (Racing(x) & Illegal(x) & Cheer(x) -> Gather(x) & Encourage(x))."
        ],
        "conclusion": "Fine(x) & Cheer(x) & Racing(x) & Illegal(x).",
        "id": "5eb886d7-66cc-4af9-82d0-68165dab50d2"
    },
    {
        "raw": " ###\nPredicates:\nTaxi(x) | FareMeter(x) | Inspected(x) | Led(x) | Agency(x) | InvoiceDevice(x) | Connected(x) | Fixed(x) | Noticeable(x) | Driver(x) | Print(x) | Return(x) | Journey(x) | FareReceipt(x) | Contain(x) | Name(x) | Registration(x) | Distance(x) | TotalFare(x) | Payment(x) | Received(x).\n\nExplanation:\nTaxi(x): x is a taxi.\nFareMeter(x): x is a fare meter.\nInspected(x): x is inspected.\nLed(x): x is led by a competent measurement agency.\nAgency(x): x is a competent measurement agency.\nInvoiceDevice(x): x is an invoice or fare receipt printing device.\nConnected(x): x is connected to a fare meter.\nFixed(x): x is fixed.\nNoticeable(x): x is noticeable.\nDriver(x): x is a driver.\nPrint(x): x is printed.\nReturn(x): x is returned.\nJourney(x): x is a journey.\nFareReceipt(x): x is a fare receipt.\nContain(x): x contains information.\nName(x): x is the name of the transport business.\nRegistration(x): x is the vehicle's registration plate number.\nDistance(x): x is the travel distance.\nTotalFare(x): x is the total fare payable by passengers.\nPayment(x): x is a payment.\nReceived(x): x is received.\n\nPremises:\nall x (Taxi(x) -> (FareMeter(x) & Inspected(x) & Led(x) & Agency(x) & InvoiceDevice(x) & Connected(x) & Fixed(x) & Noticeable(x))).\nall x (Driver(x) -> (Print(x) & Return(x))).\nall x (FareReceipt(x) -> (Contain(x) & Name(x) & Registration(x) & Distance(x) & TotalFare(x))).\n\nConclusion:\nall x (Payment(x) -> Received(x)).\n\nNote: The conclusion is based on the assumption that receiving a fare payment invoice is a requirement for payment. If this is not the case, the conclusion may not be valid.",
        "premises": [
            "all x (Taxi(x) -> (FareMeter(x) & Inspected(x) & Led(x) & Agency(x) & InvoiceDevice(x) & Connected(x) & Fixed(x) & Noticeable(x))).",
            "all x (Driver(x) -> (Print(x) & Return(x))).",
            "all x (FareReceipt(x) -> (Contain(x) & Name(x) & Registration(x) & Distance(x) & TotalFare(x)))."
        ],
        "conclusion": "Note: The conclusion is based on the assumption that receiving a fare payment invoice is a requirement for payment. If this is not the case, the conclusion may not be valid.",
        "id": "30bcbd8a-b317-4796-989c-bc8e651a35b5"
    },
    {
        "raw": " ###\nPredicates:\nDrivePastRedLight(x) | Warning(x) | Fine(x) | Individual(x) | Organization(x) | FineLimit(x) | Decision(x) | OnSpot(x) | Detected(x) | Record(x) | TechnicalMeans(x) | Equipment(x) | Writing(x) | PenaltyPlace(x).\n\nExplanation:\nDrivePastRedLight(x): x drives past a red light.\nWarning(x): x is given a warning.\nFine(x): x is fined.\nIndividual(x): x is an individual.\nOrganization(x): x is an organization.\nFineLimit(x): x is the fine limit.\nDecision(x): x is a decision.\nOnSpot(x): x is done on the spot.\nDetected(x): x is detected.\nRecord(x): x is recorded.\nTechnicalMeans(x): x uses technical means.\nEquipment(x): x uses equipment.\nWriting(x): x is in writing.\nPenaltyPlace(x): x is a place penalty.\n\nPremises:\nall x (DrivePastRedLight(x) -> (Warning(x) | Fine(x))).\nall x (Fine(x) & Individual(x) -> FineLimit(x, VND 250,000)).\nall x (Fine(x) & Organization(x) -> FineLimit(x, VND 500,000)).\nall x (Fine(x) -> Decision(x) & OnSpot(x)).\nall x (Detected(x) & TechnicalMeans(x) & Equipment(x) -> Record(x) & Writing(x)).\n\nConclusion:\nPenaltyPlace(x) <- DrivePastRedLight(x).\n\nNote: The conclusion is that there is a place penalty for driving a motorcycle past a red light, but it is not explicitly stated in the provided rules. The conclusion is inferred based on the fact that driving past a red light results in either a warning or a fine, and fines are issued on the spot. However, the specific penalty place is not mentioned in the rules.",
        "premises": [
            "all x (DrivePastRedLight(x) -> (Warning(x) | Fine(x))).",
            "all x (Fine(x) & Individual(x) -> FineLimit(x, VND 250,000)).",
            "all x (Fine(x) & Organization(x) -> FineLimit(x, VND 500,000)).",
            "all x (Fine(x) -> Decision(x) & OnSpot(x)).",
            "all x (Detected(x) & TechnicalMeans(x) & Equipment(x) -> Record(x) & Writing(x))."
        ],
        "conclusion": "Note: The conclusion is that there is a place penalty for driving a motorcycle past a red light, but it is not explicitly stated in the provided rules. The conclusion is inferred based on the fact that driving past a red light results in either a warning or a fine, and fines are issued on the spot. However, the specific penalty place is not mentioned in the rules.",
        "id": "47a6e4c4-d3c3-494e-98ea-90934f1fd5cd"
    },
    {
        "raw": " ###\nPredicates:\nSeniorityPay(x) | ProbationPeriod(x) | UnpaidLeave(x) | SickLeave(x) | MaternityLeave(x) | SocialInsuranceLaw(x) | Expert(x) | Training(x) | Practice(x) | Survey(x) | Home(x) | Abroad(x) | CompetentAgency(x) | Suspension(x) | TemporaryDetainment(x) | Detention(x) | Investigation(x) | Prosecution(x) | Adjudication(x) | NotWorking(x) | Teacher(x) | Apprenticeship(x).\n\nExplanation:\nSeniorityPay(x): x is included in seniority pay calculation.\nProbationPeriod(x): x is a probation period.\nUnpaidLeave(x): x is an unpaid leave.\nSickLeave(x): x is a sick leave.\nMaternityLeave(x): x is a maternity leave.\nSocialInsuranceLaw(x): x is prescribed by social insurance law.\nExpert(x): x works as an expert.\nTraining(x): x attends training.\nPractice(x): x practices.\nSurvey(x): x conducts a survey.\nHome(x): x is at home.\nAbroad(x): x is abroad.\nCompetentAgency(x): x is a competent agency.\nSuspension(x): x is a suspension period.\nTemporaryDetainment(x): x is a temporary detainment period.\nDetention(x): x is a detention period.\nInvestigation(x): x is under investigation.\nProsecution(x): x is under prosecution.\nAdjudication(x): x is under adjudication.\nNotWorking(x): x is not working.\nTeacher(x): x is a teacher.\nApprenticeship(x): x is an apprenticeship period.\n\nPremises:\nall x (ProbationPeriod(x) -> ~SeniorityPay(x)).\nall x (UnpaidLeave(x) -> ~SeniorityPay(x)).\nall x (SickLeave(x) | MaternityLeave(x) -> ~SeniorityPay(x)).\nall x (Expert(x) | Training(x) | Practice(x) | Survey(x) -> ~SeniorityPay(x)).\nall x (Suspension(x) | TemporaryDetainment(x) | Detention(x) -> ~SeniorityPay(x)).\nall x (Investigation(x) | Prosecution(x) | Adjudication(x) -> ~SeniorityPay(x)).\nall x (NotWorking(x) -> ~SeniorityPay(x)).\nall x (Teacher(x) & Apprenticeship(x) -> SeniorityPay(x)).\n\nConclusion:\nall x (Apprenticeship(x) -> SeniorityPay(x)).",
        "premises": [
            "all x (ProbationPeriod(x) -> ~SeniorityPay(x)).",
            "all x (UnpaidLeave(x) -> ~SeniorityPay(x)).",
            "all x (SickLeave(x) | MaternityLeave(x) -> ~SeniorityPay(x)).",
            "all x (Expert(x) | Training(x) | Practice(x) | Survey(x) -> ~SeniorityPay(x)).",
            "all x (Suspension(x) | TemporaryDetainment(x) | Detention(x) -> ~SeniorityPay(x)).",
            "all x (Investigation(x) | Prosecution(x) | Adjudication(x) -> ~SeniorityPay(x)).",
            "all x (NotWorking(x) -> ~SeniorityPay(x)).",
            "all x (Teacher(x) & Apprenticeship(x) -> SeniorityPay(x))."
        ],
        "conclusion": "all x (Apprenticeship(x) -> SeniorityPay(x)).",
        "id": "51f10192-1372-4963-8d64-987396853c1b"
    },
    {
        "raw": " Predicates:\nExempt(x) | Certificate(x) | Valid(x) | EnglishSubject(x) | MinimumScore(x) | TOEIC(x) | TOEFLITP(x) | TOEFLiBT(x) | Issuer(x).\n\nExplanation:\nExempt(x): x is exempt from the Foreign Language paper.\nCertificate(x): x is a valid Foreign Language certificate.\nValid(x): x is valid until July 6, 2022.\nEnglishSubject(x): x is the English language subject.\nMinimumScore(x): x meets the minimum score requirement.\nTOEIC(x): x is a TOEIC certificate.\nTOEFLITP(x): x is a TOEFL ITP certificate with a minimum score of 450 points.\nTOEFLiBT(x): x is a TOEFL iBT certificate with a minimum score of 45.\nIssuer(x): x is the certificate issuer.\n\nPremises:\nall x (Exempt(x) <-> (Certificate(x) & Valid(x) & (EnglishSubject(x) <-> MinimumScore(x)))).\nall x (TOEIC(x) -> -Certificate(x)).\nall x (TOEFLITP(x) -> Certificate(x)).\nall x (TOEFLiBT(x) -> Certificate(x)).\n\nConclusion:\nTOEIC(x) -> -Exempt(x).",
        "premises": [
            "all x (Exempt(x) <-> (Certificate(x) & Valid(x) & (EnglishSubject(x) <-> MinimumScore(x)))).",
            "all x (TOEIC(x) -> -Certificate(x)).",
            "all x (TOEFLITP(x) -> Certificate(x)).",
            "all x (TOEFLiBT(x) -> Certificate(x))."
        ],
        "conclusion": "TOEIC(x) -> -Exempt(x).",
        "id": "37218e1b-e898-4531-97ab-8c4128375fe4"
    },
    {
        "raw": " ###\nPredicates:\nSubmission(x) | Valid(x) | AcademicTranscript(x) | TemporaryCertificate(x) | HighSchoolDiploma(x) | BirthCertificate(x) | PriorityEvidence(x) | OtherRequirements(x) | DuplicateID(x) | Mandatory(x) | Candidate(x) | Document(x) | School(x).\n\nExplanation:\nSubmission(x): x is required to be submitted.\nValid(x): x is a valid copy.\nAcademicTranscript(x): x is an academic transcript.\nTemporaryCertificate(x): x is a temporary high school graduation certificate.\nHighSchoolDiploma(x): x is a high school diploma.\nBirthCertificate(x): x is a birth certificate.\nPriorityEvidence(x): x is evidence for priority policy.\nOtherRequirements(x): x is other requirements prescribed by the schools.\nDuplicateID(x): x is a duplicate ID.\nMandatory(x): x is mandatory.\nCandidate(x): x is a successful candidate.\nDocument(x): x is a document.\nSchool(x): x is a school.\n\nPremises:\nall x (Candidate(x) -> Submission(x, AcademicTranscript(x))).\nall x (Candidate(x) -> Submission(x, TemporaryCertificate(x))).\nall x (Candidate(x) -> Submission(x, HighSchoolDiploma(x))).\nall x (Candidate(x) -> Submission(x, BirthCertificate(x))).\nall x (Candidate(x) -> Submission(x, PriorityEvidence(x))).\nall x (Candidate(x) -> Submission(x, OtherRequirements(x))).\nall x (Submission(x, DuplicateID(x)) -> Mandatory(x)).\nall x (Document(x) -> Valid(x)).\n\nConclusion:\nall x (Candidate(x) -> Mandatory(x, DuplicateID(x))).\n\nNote: The conclusion assumes that a duplicate ID is considered a document and is not explicitly mentioned in the rules as a requirement. Therefore, it cannot be definitively stated that a duplicate ID is mandatory for a college application based on the provided rules.",
        "premises": [
            "all x (Candidate(x) -> Submission(x, AcademicTranscript(x))).",
            "all x (Candidate(x) -> Submission(x, TemporaryCertificate(x))).",
            "all x (Candidate(x) -> Submission(x, HighSchoolDiploma(x))).",
            "all x (Candidate(x) -> Submission(x, BirthCertificate(x))).",
            "all x (Candidate(x) -> Submission(x, PriorityEvidence(x))).",
            "all x (Candidate(x) -> Submission(x, OtherRequirements(x))).",
            "all x (Submission(x, DuplicateID(x)) -> Mandatory(x)).",
            "all x (Document(x) -> Valid(x))."
        ],
        "conclusion": "Note: The conclusion assumes that a duplicate ID is considered a document and is not explicitly mentioned in the rules as a requirement. Therefore, it cannot be definitively stated that a duplicate ID is mandatory for a college application based on the provided rules.",
        "id": "178253f0-1064-4cc6-bfec-eac6f2325997"
    },
    {
        "raw": " ###\nPredicates:\nTransfer(x) | Ownership(x) | Contract(x) | MoralRight(x) | Publish(x) | CoOwner(x) | SeparatePart(x) | Licensing(x) | WrittenContract(x) | Price(x) | PaymentMethod(x) | Rights(x) | Obligations(x) | Liabilities(x) | Performance(x) | Modification(x) | Termination(x) | Cancellation(x) | CivilCode(x) | Possible(x).\n\nExplanation:\nTransfer(x): x transfers copyright or related rights.\nOwnership(x): x has ownership over the rights.\nContract(x): x is a contract.\nMoralRight(x): x is a moral right.\nPublish(x): x publishes the work.\nCoOwner(x): x is a co-owner.\nSeparatePart(x): x has separate parts which can be detached and used independently.\nLicensing(x): x is a licensing contract.\nWrittenContract(x): x is a contract made in writing.\nPrice(x): x is a price.\nPaymentMethod(x): x is a payment method.\nRights(x): x are rights.\nObligations(x): x are obligations.\nLiabilities(x): x are liabilities for breach of contract.\nPerformance(x): x is a performance.\nModification(x): x is a modification.\nTermination(x): x is a termination.\nCancellation(x): x is a cancellation.\nCivilCode(x): x complies with the Civil Code.\nPossible(x): x is possible.\n\nPremises:\nall x (Transfer(x) -> (Ownership(x) & Contract(x))).\nall x (MoralRight(x) -> -Transfer(x)).\nall x (Publish(x) -> Transfer(x)).\nall x (CoOwner(x) -> (SeparatePart(x) | Transfer(x))).\nall x (Licensing(x) -> WrittenContract(x)).\nall x (WrittenContract(x) -> (Price(x) & PaymentMethod(x) & Rights(x) & Obligations(x) & Liabilities(x))).\nall x (Performance(x) -> CivilCode(x)).\nall x (Modification(x) -> CivilCode(x)).\nall x (Termination(x) -> CivilCode(x)).\nall x (Cancellation(x) -> CivilCode(x)).\n\nConclusion:\nPossible(Transfer(x)).\n------------------------",
        "premises": [
            "all x (Transfer(x) -> (Ownership(x) & Contract(x))).",
            "all x (MoralRight(x) -> -Transfer(x)).",
            "all x (Publish(x) -> Transfer(x)).",
            "all x (CoOwner(x) -> (SeparatePart(x) | Transfer(x))).",
            "all x (Licensing(x) -> WrittenContract(x)).",
            "all x (WrittenContract(x) -> (Price(x) & PaymentMethod(x) & Rights(x) & Obligations(x) & Liabilities(x))).",
            "all x (Performance(x) -> CivilCode(x)).",
            "all x (Modification(x) -> CivilCode(x)).",
            "all x (Termination(x) -> CivilCode(x)).",
            "all x (Cancellation(x) -> CivilCode(x))."
        ],
        "conclusion": "------------------------",
        "id": "808a7386-db06-4da8-b618-f0eea5a09f2d"
    },
    {
        "raw": " ###\nPredicates:\nPupil(x) | Student(x) | Reside(x, y) | Lawful(x) | Locality(x) | Loan(x) | Criteria(x) | Required(x) | Article(x, y) | Decision(x, y) | AdmissionNotice(x) | AdmissionCertificate(x) | School(x) | FirstYear(x) | SecondYear(x) | Certification(x) | Studying(x) | AdministrativeSanction(x) | Sanctioned(x) | Gambling(x) | Smoking(x) | Theft(x) | Smuggling(x) | Photocopy(x) | Possible(x).\n\nExplanation:\nPupil(x): x is a pupil.\nStudent(x): x is a student.\nReside(x, y): x resides in y.\nLawful(x): x is lawful.\nLocality(x): x is a locality.\nLoan(x): x is a loan.\nCriteria(x): x meets the criteria.\nRequired(x): x is required.\nArticle(x, y): x is in Article y.\nDecision(x, y): x is in Decision y.\nAdmissionNotice(x): x has an admission notice.\nAdmissionCertificate(x): x has an admission certificate.\nSchool(x): x is a school.\nFirstYear(x): x is a first-year student.\nSecondYear(x): x is a second-year student or above.\nCertification(x): x has certification from the school.\nStudying(x): x is studying at the school.\nAdministrativeSanction(x): x has been administratively sanctioned.\nSanctioned(x): x has been sanctioned.\nGambling(x): x has engaged in gambling.\nSmoking(x): x has smoked.\nTheft(x): x has committed theft.\nSmuggling(x): x has engaged in smuggling.\nPhotocopy(x): x is a photocopy.\nPossible(x): x is possible.\n\nPremises:\nall x (Pupil(x) | Student(x)) -> (Reside(x, y) & Lawful(y)).\nall x (Reside(x, y) & Lawful(y)) -> Required(x, Loan(x)).\nall x (FirstYear(x) -> (AdmissionNotice(x) | AdmissionCertificate(x))).\nall x (SecondYear(x) -> (Certification(x) & Studying(x) & ~AdministrativeSanction(x) & ~Sanctioned(x) & ~Gambling(x) & ~Smoking(x) & ~Theft(x) & ~Smuggling(x))).\n\nConclusion:\nall x (Photocopy(x) & AdmissionNotice(x) | AdmissionCertificate(x)) -> Possible(Loan(x)).\n------------------------",
        "premises": [
            "all x (Pupil(x) | Student(x)) -> (Reside(x, y) & Lawful(y)).",
            "all x (Reside(x, y) & Lawful(y)) -> Required(x, Loan(x)).",
            "all x (FirstYear(x) -> (AdmissionNotice(x) | AdmissionCertificate(x))).",
            "all x (SecondYear(x) -> (Certification(x) & Studying(x) & ~AdministrativeSanction(x) & ~Sanctioned(x) & ~Gambling(x) & ~Smoking(x) & ~Theft(x) & ~Smuggling(x)))."
        ],
        "conclusion": "------------------------",
        "id": "b96214fc-dfb4-46d2-98d8-bea1721ab331"
    },
    {
        "raw": " ###\nPredicates:\nLease(x) | Mortgage(x) | Pledge(x) | Own(x) | Use(x) | Asset(x) | DevelopmentBank(x) | WhollyStateOwned(x) | SingleMemberLLC(x) | Law(x).\n\nExplanation:\nLease(x): x leases assets.\nMortgage(x): x mortgages assets.\nPledge(x): x pledges assets.\nOwn(x): x owns assets.\nUse(x): x uses assets.\nAsset(x): x is an asset.\nDevelopmentBank(x): x is the Development Bank.\nWhollyStateOwned(x): x is wholly state-owned.\nSingleMemberLLC(x): x is a single-member limited liability company.\nLaw(x): x is in accordance with regulations of law.\n\nPremises:\nDevelopmentBank(x) -> (Lease(x) | Mortgage(x) | Pledge(x)).\nall x (Asset(x) -> (Own(x) | Use(x))).\nall x (WhollyStateOwned(x) & SingleMemberLLC(x) -> Law(x)).\n\nConclusion:\nLease(DevelopmentBank).\n\nNote: The conclusion is based on the given rules and the goal. The conclusion states that the Development Bank can get a lease on assets, but it does not imply that the Development Bank is currently getting a lease on assets. The conclusion only states that it is possible for the Development Bank to get a lease on assets.",
        "premises": [
            "DevelopmentBank(x) -> (Lease(x) | Mortgage(x) | Pledge(x)).",
            "all x (Asset(x) -> (Own(x) | Use(x))).",
            "all x (WhollyStateOwned(x) & SingleMemberLLC(x) -> Law(x))."
        ],
        "conclusion": "Note: The conclusion is based on the given rules and the goal. The conclusion states that the Development Bank can get a lease on assets, but it does not imply that the Development Bank is currently getting a lease on assets. The conclusion only states that it is possible for the Development Bank to get a lease on assets.",
        "id": "26fef828-fd26-4854-bc97-370091508c7e"
    },
    {
        "raw": " ###\nPredicates:\nAuthorize(x, y) | UseAccount(x, y) | PaymentAccount(x) | CurrentAccount(x) | Comply(x) | Law(x) | Write(x) | Send(x, y, z) | LetterOfAuthorization(x) | RegistrationOfSignature(x) | IDCard(x) | Passport(x) | Copy(x) | Original(x) | Compare(x) | Entitle(x) | PaymentServiceSupplier(x) | OpenAccount(x, y).\n\nExplanation:\nAuthorize(x, y): x authorizes y.\nUseAccount(x, y): x uses y's account.\nPaymentAccount(x): x is a payment account.\nCurrentAccount(x): x is a current account.\nComply(x): x complies with the law.\nLaw(x): x is a law.\nWrite(x): x is in writing.\nSend(x, y, z): x sends y to z.\nLetterOfAuthorization(x): x is a letter of authorization.\nRegistrationOfSignature(x): x is a registration of signature.\nIDCard(x): x is an ID card.\nPassport(x): x is a passport.\nCopy(x): x is a copy.\nOriginal(x): x is an original.\nCompare(x): x is compared.\nEntitle(x): x is entitled.\nPaymentServiceSupplier(x): x is a payment service supplier.\nOpenAccount(x, y): x opens an account at y.\n\nPremises:\nall x, y (CurrentAccount(x) -> (Authorize(x, y) -> UseAccount(x, y))).\nall x, y (PaymentAccount(x) -> (Entitle(x) -> Authorize(x, y))).\nall x (Authorize(x) -> Write(x)).\nall x (Authorize(x) -> Comply(x, Law)).\nall x, y, z (Authorize(x, y) -> Send(x, LetterOfAuthorization(x), z)).\nall x, y (Authorize(x, y) -> Send(x, RegistrationOfSignature(x), z)).\nall x, y (Authorize(x, y) -> Send(x, Copy(IDCard(x)), z)).\nall x, y (Authorize(x, y) -> Send(x, Copy(Passport(x)), z)).\nall x, y (Authorize(x, y) -> Compare(Original(IDCard(x)), Copy(IDCard(x)))).\nall x, y (Authorize(x, y) -> Compare(Original(Passport(x)), Copy(Passport(x)))).\nall x, y (OpenAccount(x, y) -> PaymentServiceSupplier(y)).\n\nConclusion:\nall x, y (Authorize(x, y) -> UseAccount(x, y)).",
        "premises": [
            "all x, y (CurrentAccount(x) -> (Authorize(x, y) -> UseAccount(x, y))).",
            "all x, y (PaymentAccount(x) -> (Entitle(x) -> Authorize(x, y))).",
            "all x (Authorize(x) -> Write(x)).",
            "all x (Authorize(x) -> Comply(x, Law)).",
            "all x, y, z (Authorize(x, y) -> Send(x, LetterOfAuthorization(x), z)).",
            "all x, y (Authorize(x, y) -> Send(x, RegistrationOfSignature(x), z)).",
            "all x, y (Authorize(x, y) -> Send(x, Copy(IDCard(x)), z)).",
            "all x, y (Authorize(x, y) -> Send(x, Copy(Passport(x)), z)).",
            "all x, y (Authorize(x, y) -> Compare(Original(IDCard(x)), Copy(IDCard(x)))).",
            "all x, y (Authorize(x, y) -> Compare(Original(Passport(x)), Copy(Passport(x)))).",
            "all x, y (OpenAccount(x, y) -> PaymentServiceSupplier(y))."
        ],
        "conclusion": "all x, y (Authorize(x, y) -> UseAccount(x, y)).",
        "id": "35a10650-e894-4ed9-a7eb-937ad9cf7339"
    },
    {
        "raw": " ###\nPredicates:\nPerson(x) | Age(x, y) | FullLegalCapacity(x) | LimitedLegalCapacity(x) | LostLegalCapacity(x) | OpenPaymentAccount(x) | LegalRepresentative(x, y) | LimitedCognition(x) | BehaviorControl(x) | Guardian(x, y) | ATMCard(x) | Under18(x).\n\nExplanation:\nPerson(x): x is a person.\nAge(x, y): x is of age y.\nFullLegalCapacity(x): x has full legal capacity.\nLimitedLegalCapacity(x): x has limited legal capacity.\nLostLegalCapacity(x): x has lost legal capacity.\nOpenPaymentAccount(x): x can open a payment account.\nLegalRepresentative(x, y): x is the legal representative of y.\nLimitedCognition(x): x has limited cognition.\nBehaviorControl(x): x has limited behavior control.\nGuardian(x, y): x is the guardian of y.\nATMCard(x): x can have an ATM card.\nUnder18(x): x is under 18 years old.\n\nPremises:\nall x (Person(x) & Age(x, y) & y >= 18 & FullLegalCapacity(x) -> OpenPaymentAccount(x)).\nall x (Person(x) & Age(x, y) & 15 <= y < 18 & ~LostLegalCapacity(x) & ~LimitedLegalCapacity(x) -> OpenPaymentAccount(x)).\nall x (Person(x) & Age(x, y) & y < 15 & LimitedLegalCapacity(x) -> OpenPaymentAccount(x, z) & LegalRepresentative(z, x)).\nall x (Person(x) & LimitedCognition(x) & BehaviorControl(x) -> OpenPaymentAccount(x, z) & Guardian(z, x)).\nall x (OpenPaymentAccount(x) -> ATMCard(x)).\n\nConclusion:\nall x (Person(x) & Age(x, y) & y < 18 -> ATMCard(x)).",
        "premises": [
            "all x (Person(x) & Age(x, y) & y >= 18 & FullLegalCapacity(x) -> OpenPaymentAccount(x)).",
            "all x (Person(x) & Age(x, y) & 15 <= y < 18 & ~LostLegalCapacity(x) & ~LimitedLegalCapacity(x) -> OpenPaymentAccount(x)).",
            "all x (Person(x) & Age(x, y) & y < 15 & LimitedLegalCapacity(x) -> OpenPaymentAccount(x, z) & LegalRepresentative(z, x)).",
            "all x (Person(x) & LimitedCognition(x) & BehaviorControl(x) -> OpenPaymentAccount(x, z) & Guardian(z, x)).",
            "all x (OpenPaymentAccount(x) -> ATMCard(x))."
        ],
        "conclusion": "all x (Person(x) & Age(x, y) & y < 18 -> ATMCard(x)).",
        "id": "4f908e7a-761c-42f1-8ea3-d4b300644b0a"
    },
    {
        "raw": " ###\nPredicates:\nTransaction(x) | CashWithdrawal(x) | CardTransaction(x) | Currency(x) | Payment(x) | Conversion(x) | ExchangeRate(x) | Agreement(x) | StateBankRegulation(x) | ForeignCurrency(x) | VietnamTerritory(x) | Cardholder(x) | CardIssuingOrganization(x).\n\nExplanation:\nTransaction(x): x is a transaction.\nCashWithdrawal(x): x is a cash withdrawal.\nCardTransaction(x): x is a card transaction.\nCurrency(x): x is a currency.\nPayment(x): x is a payment.\nConversion(x): x is a conversion.\nExchangeRate(x): x is an exchange rate.\nAgreement(x): x has an agreement.\nStateBankRegulation(x): x follows State Bank regulations.\nForeignCurrency(x): x is a foreign currency.\nVietnamTerritory(x): x is in Vietnam's territory.\nCardholder(x): x is a cardholder.\nCardIssuingOrganization(x): x is a card-issuing organization.\n\nPremises:\nall x (Transaction(x) -> (CashWithdrawal(x) | CardTransaction(x))).\nall x (VietnamTerritory(x) -> (Currency(x) = VietnamDong)).\nall x (CardTransaction(x) -> (TransactionCurrency(x) = VietnamDong & PaymentCurrency(x) = VietnamDong)).\nall x (Conversion(x) -> (ExchangeRate(x) = Agreement(x) & StateBankRegulation(x))).\nall x (~VietnamTerritory(x) -> (Payment(x) = VietnamDong & CardIssuingOrganization(x) = Agreement(x) & StateBankRegulation(x))).\n\nConclusion:\nall x (CardTransaction(x) -> (Currency(x) = VietnamDong | ForeignCurrency(x))).\n\nNote: The conclusion is based on the premises and the information provided. However, it does not directly answer the question of whether it is possible to use foreign exchange when trading in bank cards. According to the rules, card transactions within Vietnam's territory must be conducted in Vietnam dong, while transactions outside Vietnam's territory must be paid in Vietnam dong to card-issuing organizations at an agreed exchange rate. Therefore, it is not possible to use foreign exchange directly for card transactions within Vietnam's territory, but it may be possible to use foreign exchange for transactions outside Vietnam's territory, provided that the payment is made in Vietnam dong to the card-issuing organization at an agreed exchange rate.",
        "premises": [
            "all x (Transaction(x) -> (CashWithdrawal(x) | CardTransaction(x))).",
            "all x (VietnamTerritory(x) -> (Currency(x) = VietnamDong)).",
            "all x (CardTransaction(x) -> (TransactionCurrency(x) = VietnamDong & PaymentCurrency(x) = VietnamDong)).",
            "all x (Conversion(x) -> (ExchangeRate(x) = Agreement(x) & StateBankRegulation(x))).",
            "all x (~VietnamTerritory(x) -> (Payment(x) = VietnamDong & CardIssuingOrganization(x) = Agreement(x) & StateBankRegulation(x)))."
        ],
        "conclusion": "Note: The conclusion is based on the premises and the information provided. However, it does not directly answer the question of whether it is possible to use foreign exchange when trading in bank cards. According to the rules, card transactions within Vietnam's territory must be conducted in Vietnam dong, while transactions outside Vietnam's territory must be paid in Vietnam dong to card-issuing organizations at an agreed exchange rate. Therefore, it is not possible to use foreign exchange directly for card transactions within Vietnam's territory, but it may be possible to use foreign exchange for transactions outside Vietnam's territory, provided that the payment is made in Vietnam dong to the card-issuing organization at an agreed exchange rate.",
        "id": "95fd7816-1864-4501-803d-d10677317dd7"
    },
    {
        "raw": " ###\nPredicates:\nLoans(x) | BusinessInvestment(x) | ProhibitedBusiness(x) | PayCosts(x) | ProhibitedTransactions(x) | PurchaseGoods(x) | ProhibitedServices(x) | BuyGold(x) | CreditInstitution(x) | Allowed(x) | BankLoan(x) | Gold(x).\n\nExplanation:\nLoans(x): x provides loans.\nBusinessInvestment(x): x is used for business investment activities.\nProhibitedBusiness(x): x is a prohibited business line.\nPayCosts(x): x is used to pay costs.\nProhibitedTransactions(x): x is a prohibited transaction.\nPurchaseGoods(x): x is used to purchase goods.\nProhibitedServices(x): x is a prohibited service.\nBuyGold(x): x buys gold.\nCreditInstitution(x): x is a credit institution.\nAllowed(x): x is allowed.\nBankLoan(x): x is a bank loan.\nGold(x): x is gold.\n\nPremises:\nall x (CreditInstitution(x) -> -Loans(x, y) | (BusinessInvestment(y) & ProhibitedBusiness(y))).\nall x (CreditInstitution(x) -> -Loans(x, y) | (PayCosts(y) & ProhibitedTransactions(y))).\nall x (CreditInstitution(x) -> -Loans(x, y) | (PurchaseGoods(y) & ProhibitedServices(y))).\nall x (CreditInstitution(x) -> -Loans(x, y) | -BuyGold(y)).\n\nConclusion:\n-BankLoan(x) | -BuyGold(x).",
        "premises": [
            "all x (CreditInstitution(x) -> -Loans(x, y) | (BusinessInvestment(y) & ProhibitedBusiness(y))).",
            "all x (CreditInstitution(x) -> -Loans(x, y) | (PayCosts(y) & ProhibitedTransactions(y))).",
            "all x (CreditInstitution(x) -> -Loans(x, y) | (PurchaseGoods(y) & ProhibitedServices(y))).",
            "all x (CreditInstitution(x) -> -Loans(x, y) | -BuyGold(y))."
        ],
        "conclusion": "-BankLoan(x) | -BuyGold(x).",
        "id": "e6b27f8f-63a7-4a1d-a95b-0b8b5244f3a1"
    },
    {
        "raw": " ###\nPredicates:\nDirective(x) | Enforce(x) | Chairman(x) | Direct(x) | Limit(x) | MassGathering(x) | Stop(x) | Meeting(x) | Event(x) | People(x) | Room(x) | Gather(x) | Distance(x) | PublicPlace(x) | ReligiousActivity(x) | CulturalActivity(x) | SportActivity(x) | EntertainmentActivity(x) | Business(x) | Service(x) | EssentialGoods(x) | EssentialServices(x) | President(x) | Decide(x) | Close(x) | Movement(x) | InfectedProvince(x) | Locality(x) | Ministry(x) | Transport(x) | Direct(x) | Flight(x) | PassengerTransportation(x) | Suspend(x) | Reorganize(x) | PublicTransportation(x) | Vehicle(x) | Goods(x) | BankWork(x) | Covid19Pandemic(x).\n\nExplanation:\nDirective(x): x is a directive.\nEnforce(x): x enforces a directive.\nChairman(x): x is a chairman.\nDirect(x): x directs the adoption of measures.\nLimit(x): x limits mass gatherings.\nMassGathering(x): x is a mass gathering.\nStop(x): x stops meetings and events.\nMeeting(x): x is a meeting.\nEvent(x): x is an event.\nPeople(x): x is a number of people.\nRoom(x): x is a room.\nGather(x): x gathers people.\nDistance(x): x is a distance between people.\nPublicPlace(x): x is a public place.\nReligiousActivity(x): x is a religious activity.\nCulturalActivity(x): x is a cultural activity.\nSportActivity(x): x is a sport activity.\nEntertainmentActivity(x): x is an entertainment activity.\nBusiness(x): x is a business.\nService(x): x is a service.\nEssentialGoods(x): x is an essential good.\nEssentialServices(x): x is an essential service.\nPresident(x): x is a president.\nDecide(x): x decides on business and service establishments to be closed.\nClose(x): x is closed.\nMovement(x): x is a movement of people.\nInfectedProvince(x): x is an infected province.\nLocality(x): x is a locality.\nMinistry(x): x is a ministry.\nTransport(x): x is a transport.\nDirect(x): x directs the restriction of flights and passenger transportation activities.\nFlight(x): x is a flight.\nPassengerTransportation(x): x is passenger transportation.\nSuspend(x): x is suspended.\nReorganize(x): x is reorganized.\nPublicTransportation(x): x is public transportation.\nVehicle(x): x is a vehicle.\nGoods(x): x is goods.\nBankWork(x): x is bank work.\nCovid19Pandemic(x): x is the Covid-19 pandemic.\n\nPremises:\nDirective(x) & Enforce(PrimeMinister, x) -> Chairman(ProvincialPeople'sCommittees, x).\nChairman(ProvincialPeople'sCommittees, x) -> Direct(x, Limit(MassGathering(x))).\nLimit(MassGathering(x)) -> Stop(x, Meeting(x) & Event(x)).\nStop(x, Meeting(x) & Event(x)) -> People(x) > 20 & Room(x) = 1.\nLimit(MassGathering(x)) -> Stop(x, Gather(x)).\nStop(x, Gather(x)) -> People(x) >= 10 & PublicPlace(x) != Office & PublicPlace(x) != School & PublicPlace(x) != Hospital.\nLimit(MassGathering(x)) -> Distance(x) >= 2m.\nLimit(MassGathering(x)) -> Stop(x, ReligiousActivity(x)).\nStop(x, ReligiousActivity(x)) -> People(x) >= 20 & PublicPlace(x) = ReligiousEstablishment.\nLimit(MassGathering(x)) -> Stop(x, CulturalActivity(x) & SportActivity(x) & EntertainmentActivity(x)).\nStop(x, CulturalActivity(x) & SportActivity(x) & EntertainmentActivity(x)) -> PublicPlace(x) = PublicPlace.\nLimit(MassGathering(x)) -> TemporarilySuspend(x, Business(x) & Service(x)).\nTemporarilySuspend(x, Business(x) & Service(x)) -> EssentialGoods(x) != True & EssentialServices(x) != True.\nPresident(ProvincialLevelPeople'sCommittees, x) -> Decide(x, Close(x)).\nLimit(MassGathering(x)) -> Restrict(x, Movement(x)).\nRestrict(x, Movement(x)) -> InfectedProvince(x) & Locality(x).\nMinistry(Transport, x) -> Direct(x, Restrict(x, Flight(x) & PassengerTransportation(x))).\nRestrict(x, Flight(x) & PassengerTransportation(x)) -> Suspend(x) | Reorganize(x).\nRestrict(x, Flight(x) & PassengerTransportation(x)) -> PublicTransportation(x) = False & Vehicle(x) != Goods(x).\n\nConclusion:\nBankWork(x) & Covid19Pandemic(x) -> False.",
        "premises": [
            "Directive(x) & Enforce(PrimeMinister, x) -> Chairman(ProvincialPeople'sCommittees, x).",
            "Chairman(ProvincialPeople'sCommittees, x) -> Direct(x, Limit(MassGathering(x))).",
            "Limit(MassGathering(x)) -> Stop(x, Meeting(x) & Event(x)).",
            "Stop(x, Meeting(x) & Event(x)) -> People(x) > 20 & Room(x) = 1.",
            "Limit(MassGathering(x)) -> Stop(x, Gather(x)).",
            "Stop(x, Gather(x)) -> People(x) >= 10 & PublicPlace(x) != Office & PublicPlace(x) != School & PublicPlace(x) != Hospital.",
            "Limit(MassGathering(x)) -> Distance(x) >= 2m.",
            "Limit(MassGathering(x)) -> Stop(x, ReligiousActivity(x)).",
            "Stop(x, ReligiousActivity(x)) -> People(x) >= 20 & PublicPlace(x) = ReligiousEstablishment.",
            "Limit(MassGathering(x)) -> Stop(x, CulturalActivity(x) & SportActivity(x) & EntertainmentActivity(x)).",
            "Stop(x, CulturalActivity(x) & SportActivity(x) & EntertainmentActivity(x)) -> PublicPlace(x) = PublicPlace.",
            "Limit(MassGathering(x)) -> TemporarilySuspend(x, Business(x) & Service(x)).",
            "TemporarilySuspend(x, Business(x) & Service(x)) -> EssentialGoods(x) != True & EssentialServices(x) != True.",
            "President(ProvincialLevelPeople'sCommittees, x) -> Decide(x, Close(x)).",
            "Limit(MassGathering(x)) -> Restrict(x, Movement(x)).",
            "Restrict(x, Movement(x)) -> InfectedProvince(x) & Locality(x).",
            "Ministry(Transport, x) -> Direct(x, Restrict(x, Flight(x) & PassengerTransportation(x))).",
            "Restrict(x, Flight(x) & PassengerTransportation(x)) -> Suspend(x) | Reorganize(x).",
            "Restrict(x, Flight(x) & PassengerTransportation(x)) -> PublicTransportation(x) = False & Vehicle(x) != Goods(x)."
        ],
        "conclusion": "BankWork(x) & Covid19Pandemic(x) -> False.",
        "id": "230258b3-21a1-4dd3-a5e7-14305eb7b836"
    },
    {
        "raw": " Predicates:\nCheck(x) | Verify(x) | Sufficient(x) | Legitimate(x) | Valid(x) | Prescribed(x) | Contract(x) | CurrentAccount(x) | Individual(x) | AccountHolder(x) | Guardian(x) | LegalRepresentative(x) | LivingAbroad(x) | AgentBank(x) | IntermediaryBank(x) | Identify(x) | Accurate(x) | Responsible(x) | ForeignCountry(x).\n\nExplanation:\nCheck(x): x checks documents.\nVerify(x): x verifies documents.\nSufficient(x): x is sufficient.\nLegitimate(x): x is legitimate.\nValid(x): x is valid.\nPrescribed(x): x is prescribed.\nContract(x): x enters into a contract.\nCurrentAccount(x): x is a current account.\nIndividual(x): x is an individual.\nAccountHolder(x): x is an account holder.\nGuardian(x): x is a guardian.\nLegalRepresentative(x): x is a legal representative.\nLivingAbroad(x): x is living abroad.\nAgentBank(x): x is an agent bank.\nIntermediaryBank(x): x is an intermediary bank.\nIdentify(x): x identifies an individual.\nAccurate(x): x is accurate.\nResponsible(x): x is responsible.\nForeignCountry(x): x is in a foreign country.\n\nPremises:\nall x (Check(x) -> Verify(x)).\nall x (Verify(x) -> (Sufficient(x) & Legitimate(x) & Valid(x) & Prescribed(x))).\nall x (Contract(x) -> CurrentAccount(x)).\nall x (Individual(x) -> (AccountHolder(x) | Guardian(x) | LegalRepresentative(x))).\nall x (LivingAbroad(x) -> (AgentBank(x) | IntermediaryBank(x))).\nall x (Identify(x) -> Accurate(x)).\nall x (Responsible(x) -> Identify(x)).\n\nConclusion:\nall x (ForeignCountry(x) -> Contract(x)).",
        "premises": [
            "all x (Check(x) -> Verify(x)).",
            "all x (Verify(x) -> (Sufficient(x) & Legitimate(x) & Valid(x) & Prescribed(x))).",
            "all x (Contract(x) -> CurrentAccount(x)).",
            "all x (Individual(x) -> (AccountHolder(x) | Guardian(x) | LegalRepresentative(x))).",
            "all x (LivingAbroad(x) -> (AgentBank(x) | IntermediaryBank(x))).",
            "all x (Identify(x) -> Accurate(x)).",
            "all x (Responsible(x) -> Identify(x))."
        ],
        "conclusion": "all x (ForeignCountry(x) -> Contract(x)).",
        "id": "493689fe-2bee-4b7e-b5a3-836d0d4016d6"
    },
    {
        "raw": " Predicates:\nApplicationForm(x) | OpenAccount(x) | Form(x) | Bank(x) | ForeignBank(x) | Branch(x) | CheckingAccount(x) | AccountHolder(x) | IDCard(x) | IDPaper(x) | Passport(x) | BirthCertificate(x) | VietnameseCitizen(x) | Age(x) | EntryVisa(x) | Document(x) | Foreigner(x) | Allow(x) | Vietnam(x).\n\nExplanation:\nApplicationForm(x): x is an application form for opening a checking account.\nOpenAccount(x): x opens a checking account.\nForm(x): x is a form provided by the bank/foreign bank's branch.\nBank(x): x is a bank.\nForeignBank(x): x is a foreign bank.\nBranch(x): x is a branch.\nCheckingAccount(x): x is a checking account.\nAccountHolder(x): x is an account holder.\nIDCard(x): x is an ID card.\nIDPaper(x): x is an ID paper.\nPassport(x): x is a passport.\nBirthCertificate(x): x is a birth certificate.\nVietnameseCitizen(x): x is a Vietnamese citizen.\nAge(x): x is the age of an individual.\nEntryVisa(x): x is an entry visa.\nDocument(x): x is a document proving exemption from entry visa.\nForeigner(x): x is a foreigner.\nAllow(x): x is allowed.\nVietnam(x): x is in Vietnam.\n\nPremises:\nall x (ApplicationForm(x) -> (Form(x) & Bank(x) | ForeignBank(x) & Branch(x) & CheckingAccount(x))).\nall x (AccountHolder(x) -> (IDCard(x) | IDPaper(x) | Passport(x) | (BirthCertificate(x) & VietnameseCitizen(x) & Age(x < 14)) | (EntryVisa(x) | Document(x) & Foreigner(x)))).\n\nConclusion:\nall x (Foreigner(x) & Vietnam(x) -> Allow(x)).\n\nNote: The conclusion assumes that the goal is to determine if a foreigner is allowed to open a bank account in Vietnam, given the provided rules and premises. The conclusion states that if a foreigner is in Vietnam, they are allowed to open a bank account. However, this conclusion is based on the provided information and may not be accurate in real-world scenarios.",
        "premises": [
            "all x (ApplicationForm(x) -> (Form(x) & Bank(x) | ForeignBank(x) & Branch(x) & CheckingAccount(x))).",
            "all x (AccountHolder(x) -> (IDCard(x) | IDPaper(x) | Passport(x) | (BirthCertificate(x) & VietnameseCitizen(x) & Age(x < 14)) | (EntryVisa(x) | Document(x) & Foreigner(x))))."
        ],
        "conclusion": "Note: The conclusion assumes that the goal is to determine if a foreigner is allowed to open a bank account in Vietnam, given the provided rules and premises. The conclusion states that if a foreigner is in Vietnam, they are allowed to open a bank account. However, this conclusion is based on the provided information and may not be accurate in real-world scenarios.",
        "id": "6b572955-8836-4739-b856-aa1e912ff92f"
    },
    {
        "raw": " ###\nPredicates:\nProperty(x) | Object(x) | Money(x) | ValuablePaper(x) | PropertyRight(x) | RealEstate(x) | MovableProperty(x) | ExistingProperty(x) | FutureProperty(x) | Stock(x) | Asset(x).\n\nExplanation:\nProperty(x): x is a property.\nObject(x): x is an object.\nMoney(x): x is money.\nValuablePaper(x): x is a valuable paper.\nPropertyRight(x): x is a property right.\nRealEstate(x): x is real estate.\nMovableProperty(x): x is movable property.\nExistingProperty(x): x is existing property.\nFutureProperty(x): x is future property.\nStock(x): x is a stock.\nAsset(x): x is an asset.\n\nPremises:\nall x (Property(x) <-> (Object(x) | Money(x) | ValuablePaper(x) | PropertyRight(x))).\nall x (Property(x) -> (RealEstate(x) | MovableProperty(x))).\nall x (RealEstate(x) | MovableProperty(x) -> (ExistingProperty(x) | FutureProperty(x))).\nall x (ValuablePaper(x) -> (Stock(x) | OtherValuablePaper(x))).\nall x (OtherValuablePaper(x) -> (GovernmentBond(x) | CorporateBond(x) | PromissoryNote(x))).\n\nConclusion:\nall x (Stock(x) -> Asset(x)).",
        "premises": [
            "all x (Property(x) <-> (Object(x) | Money(x) | ValuablePaper(x) | PropertyRight(x))).",
            "all x (Property(x) -> (RealEstate(x) | MovableProperty(x))).",
            "all x (RealEstate(x) | MovableProperty(x) -> (ExistingProperty(x) | FutureProperty(x))).",
            "all x (ValuablePaper(x) -> (Stock(x) | OtherValuablePaper(x))).",
            "all x (OtherValuablePaper(x) -> (GovernmentBond(x) | CorporateBond(x) | PromissoryNote(x)))."
        ],
        "conclusion": "all x (Stock(x) -> Asset(x)).",
        "id": "ab0f849c-7637-4a9b-81b8-35140324fbc0"
    },
    {
        "raw": " ###\nPredicates:\nCreditInstitution(x) | TransactionLocation(x) | LegalTransaction(x) | OperationNetwork(x) | ElectronicMeans(x) | Passbook(x) | Issue(x) | Receive(x) | PayOut(x) | MultipleTransactionLocations(x) | Accurate(x) | SafeForDepositor(x) | SafeInOperation(x) | SamePlace(x) | OtherBranch(x).\n\nExplanation:\nCreditInstitution(x): x is a credit institution.\nTransactionLocation(x): x is a transaction location.\nLegalTransaction(x): x is a legal transaction.\nOperationNetwork(x): x is within the operation network of credit institutions.\nElectronicMeans(x): x is via electronic means.\nPassbook(x): x is a passbook.\nIssue(x): x is issued.\nReceive(x): x receives savings deposits.\nPayOut(x): x pays out savings deposits.\nMultipleTransactionLocations(x): x is at multiple transaction locations.\nAccurate(x): x is accurate.\nSafeForDepositor(x): x is safe for depositors.\nSafeInOperation(x): x is safe in operation for the credit institution.\nSamePlace(x): x is at the same place.\nOtherBranch(x): x is at another branch.\n\nPremises:\nall x (CreditInstitution(x) -> TransactionLocation(x)).\nall x (TransactionLocation(x) -> LegalTransaction(x)).\nall x (TransactionLocation(x) -> OperationNetwork(x)).\n-ElectronicMeans(x).\nall x (Passbook(x) -> Issue(x)).\nall x (Issue(x) -> Receive(x)).\nall x (Issue(x) -> PayOut(x)).\nall x (MultipleTransactionLocations(x) -> Accurate(x)).\nall x (MultipleTransactionLocations(x) -> SafeForDepositor(x)).\nall x (MultipleTransactionLocations(x) -> SafeInOperation(x)).\n\nConclusion:\nall x (SamePlace(x) -> PayOut(x)).\nall x (OtherBranch(x) -> PayOut(x)).",
        "premises": [
            "all x (CreditInstitution(x) -> TransactionLocation(x)).",
            "all x (TransactionLocation(x) -> LegalTransaction(x)).",
            "all x (TransactionLocation(x) -> OperationNetwork(x)).",
            "-ElectronicMeans(x).",
            "all x (Passbook(x) -> Issue(x)).",
            "all x (Issue(x) -> Receive(x)).",
            "all x (Issue(x) -> PayOut(x)).",
            "all x (MultipleTransactionLocations(x) -> Accurate(x)).",
            "all x (MultipleTransactionLocations(x) -> SafeForDepositor(x)).",
            "all x (MultipleTransactionLocations(x) -> SafeInOperation(x))."
        ],
        "conclusion": "all x (OtherBranch(x) -> PayOut(x)).",
        "id": "d6b119c0-4773-4b19-88ad-b9de5f9af16b"
    },
    {
        "raw": " ###\nPredicates:\nConfidential(x) | ProvideInfo(x, y) | ClientInfo(x) | CreditInstitution(x) | ForeignBankBranch(x) | Lawful(x) | WrittenApproval(x) | RegulatoryAuthority(x) | OtherOrg(x) | Individual(x) | RightPurpose(x) | Content(x) | Scope(x) | Competence(x) | Legal(x) | ClientApproval(x) | Responsibility(x) | ThirdParty(x) | Consent(x) | RetainInfo(x) | PreserveInfo(x) | ProvisionRequest(x) | DeliveryData(x) | Code(x) | NationalAssembly(x) | ClientRepresentative(x).\n\nExplanation:\nConfidential(x): x must be kept confidential.\nProvideInfo(x, y): x provides information to y.\nClientInfo(x): x is client information.\nCreditInstitution(x): x is a credit institution.\nForeignBankBranch(x): x is a foreign bank branch.\nLawful(x): x is lawful.\nWrittenApproval(x): x has written approval.\nRegulatoryAuthority(x): x is a regulatory authority.\nOtherOrg(x): x is another organization.\nIndividual(x): x is an individual.\nRightPurpose(x): x is for the right purpose.\nContent(x): x is the content.\nScope(x): x is the scope.\nCompetence(x): x is within their competence.\nLegal(x): x is as prescribed by law.\nClientApproval(x): x has client approval.\nResponsibility(x): x takes responsibility.\nThirdParty(x): x is a third party.\nConsent(x): x has consent.\nRetainInfo(x): x retains information.\nPreserveInfo(x): x preserves information.\nProvisionRequest(x): x is a provision request.\nDeliveryData(x): x is delivery of data.\nCode(x): x is a code.\nNationalAssembly(x): x is a resolution of the National Assembly.\nClientRepresentative(x): x is a client's lawful representative.\n\nPremises:\nall x (CreditInstitution(x) -> Confidential(ClientInfo(x))).\nall x (ForeignBankBranch(x) -> Confidential(ClientInfo(x))).\nall x (ClientInfo(x) -> ProvideInfo(x, y) -> (Lawful(y) & WrittenApproval(y))).\nall x (RegulatoryAuthority(x) -> ProvideInfo(ClientInfo(x), y) -> (RightPurpose(y) & Content(y) & Scope(y) & Competence(x))).\nall x (RegulatoryAuthority(x) -> ProvideInfo(ClientInfo(x), y) -> ClientApproval(y)).\nall x (RegulatoryAuthority(x) -> Responsibility(x)).\nall x (RegulatoryAuthority(x) | OtherOrg(x) | Individual(x) -> ProvideInfo(ClientInfo(x), y) -> (ThirdParty(y) & Consent(y))).\nall x (RegulatoryAuthority(x) | OtherOrg(x) | Individual(x) -> ProvideInfo(ClientInfo(x), y) -> Legal(y)).\nall x (CreditInstitution(x) | ForeignBankBranch(x) -> RetainInfo(ClientInfo(x))).\nall x (CreditInstitution(x) | ForeignBankBranch(x) -> PreserveInfo(ClientInfo(x))).\nall x (OtherOrg(x) | Individual(x) -> ProvisionRequest(ClientInfo(x)) -> Code(x)).\nall x (OtherOrg(x) | Individual(x) -> ProvisionRequest(ClientInfo(x)) -> NationalAssembly(x)).\nall x (CreditInstitution(x) | ForeignBankBranch(x) -> ProvideInfo(ClientInfo(x), ClientRepresentative(x))).\n\nConclusion:\nnot exists x (CreditInstitution(x) | ForeignBankBranch(x) -> ProvideInfo(ClientInfo(x), y) -> (ThirdParty(y) & -Consent(y))).\nnot exists x (CreditInstitution(x) | ForeignBankBranch(x) -> ProvideInfo(ClientInfo(x), y) -> (Lawful(y) & -WrittenApproval(y))).",
        "premises": [
            "all x (CreditInstitution(x) -> Confidential(ClientInfo(x))).",
            "all x (ForeignBankBranch(x) -> Confidential(ClientInfo(x))).",
            "all x (ClientInfo(x) -> ProvideInfo(x, y) -> (Lawful(y) & WrittenApproval(y))).",
            "all x (RegulatoryAuthority(x) -> ProvideInfo(ClientInfo(x), y) -> (RightPurpose(y) & Content(y) & Scope(y) & Competence(x))).",
            "all x (RegulatoryAuthority(x) -> ProvideInfo(ClientInfo(x), y) -> ClientApproval(y)).",
            "all x (RegulatoryAuthority(x) -> Responsibility(x)).",
            "all x (RegulatoryAuthority(x) | OtherOrg(x) | Individual(x) -> ProvideInfo(ClientInfo(x), y) -> (ThirdParty(y) & Consent(y))).",
            "all x (RegulatoryAuthority(x) | OtherOrg(x) | Individual(x) -> ProvideInfo(ClientInfo(x), y) -> Legal(y)).",
            "all x (CreditInstitution(x) | ForeignBankBranch(x) -> RetainInfo(ClientInfo(x))).",
            "all x (CreditInstitution(x) | ForeignBankBranch(x) -> PreserveInfo(ClientInfo(x))).",
            "all x (OtherOrg(x) | Individual(x) -> ProvisionRequest(ClientInfo(x)) -> Code(x)).",
            "all x (OtherOrg(x) | Individual(x) -> ProvisionRequest(ClientInfo(x)) -> NationalAssembly(x)).",
            "all x (CreditInstitution(x) | ForeignBankBranch(x) -> ProvideInfo(ClientInfo(x), ClientRepresentative(x)))."
        ],
        "conclusion": "not exists x (CreditInstitution(x) | ForeignBankBranch(x) -> ProvideInfo(ClientInfo(x), y) -> (Lawful(y) & -WrittenApproval(y))).",
        "id": "eff43c90-3eb3-4871-a6c1-c043c45a8fc2"
    },
    {
        "raw": " ###\nPredicates:\nGems(x) | Diamonds(x) | Rubies(x) | Emeralds(x) | Sapphires(x) | Pearls(x) | OtherGems(x) | CustomsDeclaration(x) | CustomsFees(x) | ForeignCurrency(x) | VietnamDong(x) | PreciousMetals(x) | Silver(x) | Platinum(x) | FineArtItems(x) | Jewelry(x) | SilverAlloys(x) | PlatinumAlloys(x) | ForeignParty(x) | ForeignCurrencyAccountHolder(x) | NegotiableInstruments(x) | Value(x) | Gold(x) | StateBankRegulations(x) | Foreigners(x) | Bring(x, y) | Vietnam(y).\n\nExplanation:\nGems(x): x is a gem.\nDiamonds(x): x is a diamond.\nRubies(x): x is a ruby.\nEmeralds(x): x is an emerald.\nSapphires(x): x is a sapphire.\nPearls(x): x is a pearl.\nOtherGems(x): x is another type of gem.\nCustomsDeclaration(x): x is subject to customs declaration.\nCustomsFees(x): x is subject to customs fees.\nForeignCurrency(x): x is a foreign currency.\nVietnamDong(x): x is Vietnam Dong.\nPreciousMetals(x): x is a precious metal.\nSilver(x): x is silver.\nPlatinum(x): x is platinum.\nFineArtItems(x): x is a fine art item.\nJewelry(x): x is jewelry.\nSilverAlloys(x): x contains silver alloys.\nPlatinumAlloys(x): x contains platinum alloys.\nForeignParty(x): x is a foreign party.\nForeignCurrencyAccountHolder(x): x is a foreign currency account holder.\nNegotiableInstruments(x): x is a negotiable instrument.\nValue(x): x has a value.\nGold(x): x is gold.\nStateBankRegulations(x): x complies with State Bank regulations.\nForeigners(x): x is a foreigner.\nBring(x, y): x brings y.\nVietnam(y): y is in Vietnam.\n\nPremises:\nall x (Gems(x) -> (Diamonds(x) | Rubies(x) | Emeralds(x) | Sapphires(x) | Pearls(x) | OtherGems(x))).\nall x (CustomsDeclaration(x) -> CustomsFees(x)).\nall x (ForeignCurrency(x) | Gems(x) | PreciousMetals(x) | NegotiableInstruments(x) -> CustomsDeclaration(x)).\nall x (ForeignCurrency(x) | Gems(x) -> CustomsFees(x)).\nall x (PreciousMetals(x) -> (Silver(x) | Platinum(x) | FineArtItems(x) | Jewelry(x))).\nall x (Silver(x) | Platinum(x) -> (SilverAlloys(x) | PlatinumAlloys(x))).\nall x (NegotiableInstruments(x) -> Value(x, VND 300,000.00)).\nall x (ForeignCurrency(x) | VietnamDong(x) | Gold(x) -> StateBankRegulations(x)).\n\nConclusion:\nall x (Foreigners(x) & Diamonds(y) -> Bring(x, y) & Vietnam(y)).",
        "premises": [
            "all x (Gems(x) -> (Diamonds(x) | Rubies(x) | Emeralds(x) | Sapphires(x) | Pearls(x) | OtherGems(x))).",
            "all x (CustomsDeclaration(x) -> CustomsFees(x)).",
            "all x (ForeignCurrency(x) | Gems(x) | PreciousMetals(x) | NegotiableInstruments(x) -> CustomsDeclaration(x)).",
            "all x (ForeignCurrency(x) | Gems(x) -> CustomsFees(x)).",
            "all x (PreciousMetals(x) -> (Silver(x) | Platinum(x) | FineArtItems(x) | Jewelry(x))).",
            "all x (Silver(x) | Platinum(x) -> (SilverAlloys(x) | PlatinumAlloys(x))).",
            "all x (NegotiableInstruments(x) -> Value(x, VND 300,000.00)).",
            "all x (ForeignCurrency(x) | VietnamDong(x) | Gold(x) -> StateBankRegulations(x))."
        ],
        "conclusion": "all x (Foreigners(x) & Diamonds(y) -> Bring(x, y) & Vietnam(y)).",
        "id": "45c18845-5024-4d6a-a857-fa844c908a18"
    },
    {
        "raw": " Predicates:\nDeposit(x) | Visit(x) | PresentID(x) | JointDeposit(x) | LegalRepresentative(x) | ProveLegalRepresentation(x) | IdentityProof(x) | Depositor(x) | LegalDelegate(x) | ValidID(x) | CitizenIdentityCard(x) | Passport(x) | BirthCertificate(x) | Under14(x) | Required(x).\n\nExplanation:\nDeposit(x): x makes a deposit.\nVisit(x): x visits a transaction office.\nPresentID(x): x presents an ID.\nJointDeposit(x): x is a joint deposit.\nLegalRepresentative(x): x is a legal representative.\nProveLegalRepresentation(x): x proves legal representation.\nIdentityProof(x): x has identity proof.\nDepositor(x): x is a depositor.\nLegalDelegate(x): x is a legal delegate.\nValidID(x): x is a valid ID.\nCitizenIdentityCard(x): x is a Citizen Identity Card.\nPassport(x): x is a passport.\nBirthCertificate(x): x is a birth certificate.\nUnder14(x): x is under 14 years of age.\nRequired(x): x is required.\n\nPremises:\nall x (Deposit(x) -> Visit(x)).\nall x (Deposit(x) -> PresentID(x)).\nall x (JointDeposit(x) -> all y (Depositor(y) -> PresentID(y))).\nall x (LegalRepresentative(x) -> ProveLegalRepresentation(x)).\nall x (LegalRepresentative(x) -> PresentID(x)).\nall x (Depositor(x) -> all y (LegalDelegate(y) -> PresentID(y))).\nall x (IdentityProof(x) -> (ValidID(x) | CitizenIdentityCard(x) | Passport(x) | (BirthCertificate(x) & Under14(x)))).\n\nConclusion:\nall x (Deposit(x) -> Required(PresentID(x))).",
        "premises": [
            "all x (Deposit(x) -> Visit(x)).",
            "all x (Deposit(x) -> PresentID(x)).",
            "all x (JointDeposit(x) -> all y (Depositor(y) -> PresentID(y))).",
            "all x (LegalRepresentative(x) -> ProveLegalRepresentation(x)).",
            "all x (LegalRepresentative(x) -> PresentID(x)).",
            "all x (Depositor(x) -> all y (LegalDelegate(y) -> PresentID(y))).",
            "all x (IdentityProof(x) -> (ValidID(x) | CitizenIdentityCard(x) | Passport(x) | (BirthCertificate(x) & Under14(x))))."
        ],
        "conclusion": "all x (Deposit(x) -> Required(PresentID(x))).",
        "id": "2409b5fb-e120-4e60-8c30-2c925303a276"
    },
    {
        "raw": " ###\nPredicates:\nSavingsDeposit(x) | Currency(x) | VietnamDong(x) | ForeignCurrency(x) | Depositor(x) | Payment(x) | Allowed(x) | CreditInstitution(x) | StateBankVietnam(x) | Circular48(x).\n\nExplanation:\nSavingsDeposit(x): x is a savings deposit.\nCurrency(x): x is a currency.\nVietnamDong(x): x is Vietnam dong.\nForeignCurrency(x): x is a foreign currency.\nDepositor(x): x is a depositor.\nPayment(x): x is used for payment.\nAllowed(x): x is allowed.\nCreditInstitution(x): x is a credit institution.\nStateBankVietnam(x): x is the State Bank of Vietnam.\nCircular48(x): x is an article of Circular No. 48/2018/TT-NHNN.\n\nPremises:\nall x (SavingsDeposit(x) -> (Currency(x) & (VietnamDong(x) | ForeignCurrency(x)))).\nall x (Depositor(x) -> (Payment(x) & Currency(x))).\nall x (ForeignCurrency(x) -> SmallAmount(x)).\nall x (SmallAmount(x) -> Guidance(x)).\nall x (Guidance(x) -> CreditInstitution(x)).\nall x (CreditInstitution(x) -> StateBankVietnam(x)).\nall x (Circular48(x) -> StateBankVietnam(x)).\n\nConclusion:\nall x (ForeignCurrency(x) -> Allowed(x)).\n\nNote: The conclusion assumes that the depositor is allowed to withdraw their savings in foreign currency if they meet the requirements specified in the circular. The specific requirements and conditions for small amounts and guidance from credit institutions are not explicitly stated in the provided information, so they are represented as general premises in the FOL format.",
        "premises": [
            "all x (SavingsDeposit(x) -> (Currency(x) & (VietnamDong(x) | ForeignCurrency(x)))).",
            "all x (Depositor(x) -> (Payment(x) & Currency(x))).",
            "all x (ForeignCurrency(x) -> SmallAmount(x)).",
            "all x (SmallAmount(x) -> Guidance(x)).",
            "all x (Guidance(x) -> CreditInstitution(x)).",
            "all x (CreditInstitution(x) -> StateBankVietnam(x)).",
            "all x (Circular48(x) -> StateBankVietnam(x))."
        ],
        "conclusion": "Note: The conclusion assumes that the depositor is allowed to withdraw their savings in foreign currency if they meet the requirements specified in the circular. The specific requirements and conditions for small amounts and guidance from credit institutions are not explicitly stated in the provided information, so they are represented as general premises in the FOL format.",
        "id": "cbb72473-e56b-43d0-aa69-7facb39befc5"
    },
    {
        "raw": " ###\nPredicates:\nColorChange(x) | Faded(x) | Image(x) | Pattern(x) | Letter(x) | Number(x) | Crumpled(x) | Smeared(x) | Dirty(x) | Old(x) | Torn(x) | Stuck(x) | Intact(x) | Worn(x) | Rusted(x) | Damaged(x) | Plated(x) | Reprinted(x) | Used(x).\n\nExplanation:\nColorChange(x): x has a color change.\nFaded(x): x is faded.\nImage(x): x has an image.\nPattern(x): x has a pattern.\nLetter(x): x has a letter.\nNumber(x): x has a number.\nCrumpled(x): x is crumpled.\nSmear(x): x is smeared.\nDirty(x): x is dirty.\nOld(x): x is old.\nTorn(x): x is torn.\nStuck(x): x is piece-to-piece stuck.\nIntact(x): x is still intact.\nWorn(x): x is worn.\nRusted(x): x is rusted.\nDamaged(x): x is damaged.\nPlated(x): x is plated on the money.\nReprinted(x): x is reprinted.\nUsed(x): x is used.\n\nPremises:\nall x (ColorChange(x) | Faded(x) | Image(x) | Pattern(x) | Letter(x) | Number(x) | Crumpled(x) | Smear(x) | Dirty(x) | Old(x) | Torn(x) | Stuck(x) -> Intact(x)).\nall x (Worn(x) | Rusted(x) | Damaged(x) | Plated(x) -> Used(x)).\n\nConclusion:\nall x (Torn(x) -> (Reprinted(x) & Used(x))).",
        "premises": [
            "all x (ColorChange(x) | Faded(x) | Image(x) | Pattern(x) | Letter(x) | Number(x) | Crumpled(x) | Smear(x) | Dirty(x) | Old(x) | Torn(x) | Stuck(x) -> Intact(x)).",
            "all x (Worn(x) | Rusted(x) | Damaged(x) | Plated(x) -> Used(x))."
        ],
        "conclusion": "all x (Torn(x) -> (Reprinted(x) & Used(x))).",
        "id": "518370a1-3253-4a23-bde0-52b08c0d9355"
    },
    {
        "raw": " ###\nPredicates:\nLending(x) | Credit(x) | Deliver(x) | Commit(x) | Money(x) | Customer(x) | Purpose(x) | Time(x) | Agreement(x) | Repayment(x) | Principal(x) | Interest(x).\n\nExplanation:\nLending(x): x is a form of lending.\nCredit(x): x is a form of credit.\nDeliver(x): x delivers a sum of money.\nCommit(x): x commits to deliver a sum of money.\nMoney(x): x is a sum of money.\nCustomer(x): x is a customer.\nPurpose(x): x is a specified purpose.\nTime(x): x is a specified period of time.\nAgreement(x): x is an agreement.\nRepayment(x): x is the principle of repayment of principal and interest.\nPrincipal(x): x is the principal.\nInterest(x): x is the interest.\n\nPremises:\nall x (Lending(x) -> (Deliver(x) | Commit(x))).\nall x (Lending(x) -> Money(x)).\nall x (Lending(x) -> Customer(x)).\nall x (Lending(x) -> Purpose(x)).\nall x (Lending(x) -> Time(x)).\nall x (Lending(x) -> Agreement(x)).\nall x (Lending(x) -> Repayment(x)).\n\nConclusion:\nall x (Lending(x) -> Credit(x)).",
        "premises": [
            "all x (Lending(x) -> (Deliver(x) | Commit(x))).",
            "all x (Lending(x) -> Money(x)).",
            "all x (Lending(x) -> Customer(x)).",
            "all x (Lending(x) -> Purpose(x)).",
            "all x (Lending(x) -> Time(x)).",
            "all x (Lending(x) -> Agreement(x)).",
            "all x (Lending(x) -> Repayment(x))."
        ],
        "conclusion": "all x (Lending(x) -> Credit(x)).",
        "id": "edabaddf-054f-4dc3-a486-345bcdc94a02"
    },
    {
        "raw": " ###\nPredicates:\nCreditInstitution(x) | ConsiderGranting(x, y) | JuridicalPerson(x) | LegalPersonality(x) | Laws(x) | Customer(x) | Age(x, y) | FullLegalCapacity(x) | PrescribedByLaw(x) | DemandForLoans(x, y) | LegalPurposes(y) | FeasiblePlan(x, y) | UseOfCapital(y) | FinancialCapability(x, y) | RepayDebts(x, y) | BorrowLoans(x, y) | LendingInterestRate(x) | Clause2Article13(x) | Assess(x, y, z) | TransparentFinancialStatus(y) | HealthyFinancialStatus(y).\n\nExplanation:\nCreditInstitution(x): x is a credit institution.\nConsiderGranting(x, y): x considers granting a loan to y.\nJuridicalPerson(x): x is a juridical person.\nLegalPersonality(x): x has legal personality.\nLaws(x): x is in accordance with laws.\nCustomer(x): x is a customer.\nAge(x, y): x is aged y.\nFullLegalCapacity(x): x has full legal capacity.\nPrescribedByLaw(x): x is prescribed by law.\nDemandForLoans(x, y): x has demand for loans for y.\nLegalPurposes(y): y is for legal purposes.\nFeasiblePlan(x, y): x has a feasible plan for y.\nUseOfCapital(y): y is the use of capital.\nFinancialCapability(x, y): x has financial capability to y.\nRepayDebts(x, y): x repays debts for y.\nBorrowLoans(x, y): x borrows loans from y.\nLendingInterestRate(x): x is the lending interest rate.\nClause2Article13(x): x is specified in Clause 2, Article 13.\nAssess(x, y, z): x assesses y as z.\nTransparentFinancialStatus(y): y has a transparent financial status.\nHealthyFinancialStatus(y): y has a healthy financial status.\n\nPremises:\nall x (CreditInstitution(x) -> all y (Customer(y) & Age(y, z) & (z >= 18 | (z >= 15 & z < 18 & FullLegalCapacity(y))) & DemandForLoans(y, LegalPurposes(w)) & FeasiblePlan(y, UseOfCapital(w)) & FinancialCapability(y, RepayDebts(y, w)) -> ConsiderGranting(x, y))).\nall x (BorrowLoans(x, y) & CreditInstitution(y) & LendingInterestRate(w) & Clause2Article13(w) -> Assess(y, x, TransparentFinancialStatus(x) & HealthyFinancialStatus(x))).\n\nConclusion:\nexists x (Customer(x) & Age(x, y) & y < 18 -> exists z (CreditInstitution(z) & ConsiderGranting(z, x))).",
        "premises": [
            "all x (CreditInstitution(x) -> all y (Customer(y) & Age(y, z) & (z >= 18 | (z >= 15 & z < 18 & FullLegalCapacity(y))) & DemandForLoans(y, LegalPurposes(w)) & FeasiblePlan(y, UseOfCapital(w)) & FinancialCapability(y, RepayDebts(y, w)) -> ConsiderGranting(x, y))).",
            "all x (BorrowLoans(x, y) & CreditInstitution(y) & LendingInterestRate(w) & Clause2Article13(w) -> Assess(y, x, TransparentFinancialStatus(x) & HealthyFinancialStatus(x)))."
        ],
        "conclusion": "exists x (Customer(x) & Age(x, y) & y < 18 -> exists z (CreditInstitution(z) & ConsiderGranting(z, x))).",
        "id": "d6225731-29df-4c75-a249-5f177e60b994"
    },
    {
        "raw": " Predicates:\nCreditInstitution(x) | Post(x, y) | TransactionOffice(x) | Website(x) | SavingsInterestRate(x) | Fees(x) | ForeignCurrency(x) | Procedures(x) | TransactionRegulations(x) | AccessMethods(x) | PassportActions(x) | Required(x).\n\nExplanation:\nCreditInstitution(x): x is a credit institution.\nPost(x, y): x posts y.\nTransactionOffice(x): x is a transaction office.\nWebsite(x): x is a website.\nSavingsInterestRate(x): x is a savings interest rate.\nFees(x): x is a fee.\nForeignCurrency(x): x is a foreign currency.\nProcedures(x): x is a procedure.\nTransactionRegulations(x): x is a transaction regulation.\nAccessMethods(x): x is an access method.\nPassportActions(x): x is an action against crumpled, torn, or lost passports.\nRequired(x): x is required.\n\nPremises:\nall x (CreditInstitution(x) -> all y (Post(x, y) -> (SavingsInterestRate(y) | Fees(y) | ForeignCurrency(y) | Procedures(y) | TransactionRegulations(y) | AccessMethods(y) | PassportActions(y)))).\nall x (CreditInstitution(x) -> all y (Website(y) -> (SavingsInterestRate(y) | Fees(y) | ForeignCurrency(y) | Procedures(y) | TransactionRegulations(y) | AccessMethods(y) | PassportActions(y)))).\n\nConclusion:\nRequired(SavingsInterestRate).",
        "premises": [
            "all x (CreditInstitution(x) -> all y (Post(x, y) -> (SavingsInterestRate(y) | Fees(y) | ForeignCurrency(y) | Procedures(y) | TransactionRegulations(y) | AccessMethods(y) | PassportActions(y)))).",
            "all x (CreditInstitution(x) -> all y (Website(y) -> (SavingsInterestRate(y) | Fees(y) | ForeignCurrency(y) | Procedures(y) | TransactionRegulations(y) | AccessMethods(y) | PassportActions(y))))."
        ],
        "conclusion": "Required(SavingsInterestRate).",
        "id": "1a9db09c-fb00-42ba-aa93-5ec05ecc2c6e"
    },
    {
        "raw": " ###\nPredicates:\nCustomer(x) | Prepare(x) | Submit(x) | Application(x) | CheckingAccount(x) | Bank(x) | ForeignBank(x) | Branch(x) | Open(x) | Electronic(x) | Procedure(x) | Personal(x) | Information(x) | Identity(x) | Verify(x) | Warn(x) | ProhibitedAct(x) | Use(x) | Agreement(x) | Notify(x) | Number(x) | Name(x) | Transaction(x) | Limit(x).\n\nExplanation:\nCustomer(x): x is a customer.\nPrepare(x): x prepares an application.\nSubmit(x): x submits an application.\nApplication(x): x is an application.\nCheckingAccount(x): x is a checking account.\nBank(x): x is a bank.\nForeignBank(x): x is a foreign bank.\nBranch(x): x is a branch.\nOpen(x): x is open.\nElectronic(x): x is electronic.\nProcedure(x): x is a procedure.\nPersonal(x): x is personal.\nInformation(x): x is information.\nIdentity(x): x is an identity.\nVerify(x): x is verified.\nWarn(x): x is warned.\nProhibitedAct(x): x is a prohibited act.\nUse(x): x is used.\nAgreement(x): x is an agreement.\nNotify(x): x is notified.\nNumber(x): x is a number.\nName(x): x is a name.\nTransaction(x): x is a transaction.\nLimit(x): x has a limit.\n\nPremises:\nall x (Customer(x) -> (Prepare(x) & Submit(x))).\nall x (Application(x) -> (CheckingAccount(x) & Bank(x))).\nall x (Electronic(x) -> Procedure(x)).\nall x (Personal(x) -> (Information(x) & Identity(x))).\nall x (Verify(x) -> Warn(x)).\nall x (ProhibitedAct(x) -> Use(x)).\nall x (Agreement(x) -> Notify(x)).\nall x (Transaction(x) -> Limit(x)).\n\nConclusion:\nall x (Electronic(x) -> Open(x)).",
        "premises": [
            "all x (Customer(x) -> (Prepare(x) & Submit(x))).",
            "all x (Application(x) -> (CheckingAccount(x) & Bank(x))).",
            "all x (Electronic(x) -> Procedure(x)).",
            "all x (Personal(x) -> (Information(x) & Identity(x))).",
            "all x (Verify(x) -> Warn(x)).",
            "all x (ProhibitedAct(x) -> Use(x)).",
            "all x (Agreement(x) -> Notify(x)).",
            "all x (Transaction(x) -> Limit(x))."
        ],
        "conclusion": "all x (Electronic(x) -> Open(x)).",
        "id": "1ba59967-2eb6-4a3c-971c-6a5f97bd4205"
    },
    {
        "raw": " Predicates:\nEligible(x) | Circulation(x) | Responsible(x) | Collect(x) | Exchange(x) | Customer(x) | Demand(x) | Quantity(x) | Procedure(x) | Document(x) | Color(x) | Image(x) | Pattern(x) | Letters(x) | Digits(x) | Crumpled(x) | Smear(x) | Dirty(x) | Old(x) | Torn(x) | Glued(x) | Intact(x) | Worn(x) | Rusted(x) | Damaged(x) | PlatedLayer(x) | TechnicalError(x) | Printing(x) | Coining(x) | Manufacturer(x) | Folded(x) | Picture(x) | PrintingColor(x) | Ink(x) | Error(x) | Limit(x).\n\nExplanation:\nEligible(x): x is eligible.\nCirculation(x): x is for circulation.\nResponsible(x): x is responsible.\nCollect(x): x collects.\nExchange(x): x exchanges.\nCustomer(x): x is a customer.\nDemand(x): x has demand.\nQuantity(x): x has a quantity.\nProcedure(x): x has procedures.\nDocument(x): x has documents.\nColor(x): x has color.\nImage(x): x has an image.\nPattern(x): x has a pattern.\nLetters(x): x has letters.\nDigits(x): x has digits.\nCrumpled(x): x is crumpled.\nSmear(x): x is smeared.\nDirty(x): x is dirty.\nOld(x): x is old.\nTorn(x): x is torn.\nGlued(x): x is glued.\nIntact(x): x is intact.\nWorn(x): x is worn.\nRusted(x): x is rusted.\nDamaged(x): x is damaged.\nPlatedLayer(x): x has a plated layer.\nTechnicalError(x): x has a technical error.\nPrinting(x): x is printed.\nCoining(x): x is coined.\nManufacturer(x): x is a manufacturer.\nFolded(x): x is folded.\nPicture(x): x has a picture.\nPrintingColor(x): x has printing color.\nInk(x): x has ink.\nError(x): x has an error.\nLimit(x): x has a limit.\n\nPremises:\nall x (~Eligible(x) -> ~Circulation(x)).\nall x (Responsible(x) -> Collect(x)).\nall x (Responsible(x) -> Exchange(x)).\nall x (Customer(x) -> Demand(x)).\nall x (Exchange(x) -> ~Quantity(x)).\nall x (Exchange(x) -> ~Procedure(x)).\nall x (Exchange(x) -> ~Document(x)).\nall x (Color(x) -> Image(x)).\nall x (Color(x) -> Pattern(x)).\nall x (Color(x) -> Letters(x)).\nall x (Color(x) -> Digits(x)).\nall x (Crumpled(x) -> Intact(x)).\nall x (Smear(x) -> Intact(x)).\nall x (Dirty(x) -> Intact(x)).\nall x (Old(x) -> Intact(x)).\nall x (Torn(x) -> Intact(x)).\nall x (Glued(x) -> Intact(x)).\nall x (Worn(x) -> Damaged(x)).\nall x (Rusted(x) -> Damaged(x)).\nall x (PlatedLayer(x) -> Damaged(x)).\nall x (TechnicalError(x) -> Printing(x)).\nall x (TechnicalError(x) -> Coining(x)).\nall x (TechnicalError(x) -> Manufacturer(x)).\nall x (Folded(x) -> Picture(x)).\nall x (Folded(x) -> PrintingColor(x)).\nall x (Folded(x) -> Ink(x)).\nall x (Folded(x) -> Error(x)).\n\nConclusion:\n~Limit(x).",
        "premises": [
            "all x (~Eligible(x) -> ~Circulation(x)).",
            "all x (Responsible(x) -> Collect(x)).",
            "all x (Responsible(x) -> Exchange(x)).",
            "all x (Customer(x) -> Demand(x)).",
            "all x (Exchange(x) -> ~Quantity(x)).",
            "all x (Exchange(x) -> ~Procedure(x)).",
            "all x (Exchange(x) -> ~Document(x)).",
            "all x (Color(x) -> Image(x)).",
            "all x (Color(x) -> Pattern(x)).",
            "all x (Color(x) -> Letters(x)).",
            "all x (Color(x) -> Digits(x)).",
            "all x (Crumpled(x) -> Intact(x)).",
            "all x (Smear(x) -> Intact(x)).",
            "all x (Dirty(x) -> Intact(x)).",
            "all x (Old(x) -> Intact(x)).",
            "all x (Torn(x) -> Intact(x)).",
            "all x (Glued(x) -> Intact(x)).",
            "all x (Worn(x) -> Damaged(x)).",
            "all x (Rusted(x) -> Damaged(x)).",
            "all x (PlatedLayer(x) -> Damaged(x)).",
            "all x (TechnicalError(x) -> Printing(x)).",
            "all x (TechnicalError(x) -> Coining(x)).",
            "all x (TechnicalError(x) -> Manufacturer(x)).",
            "all x (Folded(x) -> Picture(x)).",
            "all x (Folded(x) -> PrintingColor(x)).",
            "all x (Folded(x) -> Ink(x)).",
            "all x (Folded(x) -> Error(x))."
        ],
        "conclusion": "~Limit(x).",
        "id": "dbdd0aa6-c943-4640-b2e5-25f55d68c88b"
    },
    {
        "raw": " Predicates:\nDestroy(x) | Fine(x) | Sabotage(x) | Illegal(x) | Violation(x) | Money(x) | VietnamDong(x) | Confiscate(x) | Exhibit(x) | Instrumentality(x) | CompetentAuthority(x) | Transfer(x).\n\nExplanation:\nDestroy(x): x destroys money.\nFine(x): x is fined.\nSabotage(x): x sabotages money.\nIllegal(x): x is illegal.\nViolation(x): x is a violation of the law.\nMoney(x): x is money.\nVietnamDong(x): x is Vietnam dong.\nConfiscate(x): x is confiscated.\nExhibit(x): x is an exhibit.\nInstrumentality(x): x is an instrumentality of a violation.\nCompetentAuthority(x): x is a competent authority.\nTransfer(x): x is transferred.\n\nPremises:\nall x (Destroy(x) -> Illegal(x)).\nall x (Sabotage(x) -> Illegal(x)).\nall x (Illegal(x) -> Fine(x)).\nall x (Violation(x) -> Confiscate(x)).\nall x (Exhibit(x) | Instrumentality(x) -> Transfer(x)).\nall x (Transfer(x) -> CompetentAuthority(x)).\nall x (Money(x) -> VietnamDong(x)).\n\nConclusion:\nall x (Destroy(x) & Money(x) -> Illegal(x)).\n\nNote: Based on the rules provided, it is illegal to destroy money, including burning it. The fine for this violation ranges from VND 10,000,000 to 15,000,000. Additionally, any exhibits or instrumentalities of the violation will be confiscated and transferred to a competent authority for further action. Therefore, if you have 5 million Vietnam dong and you burn it, it is considered illegal and you may be subject to a fine and confiscation of the money.",
        "premises": [
            "all x (Destroy(x) -> Illegal(x)).",
            "all x (Sabotage(x) -> Illegal(x)).",
            "all x (Illegal(x) -> Fine(x)).",
            "all x (Violation(x) -> Confiscate(x)).",
            "all x (Exhibit(x) | Instrumentality(x) -> Transfer(x)).",
            "all x (Transfer(x) -> CompetentAuthority(x)).",
            "all x (Money(x) -> VietnamDong(x))."
        ],
        "conclusion": "Note: Based on the rules provided, it is illegal to destroy money, including burning it. The fine for this violation ranges from VND 10,000,000 to 15,000,000. Additionally, any exhibits or instrumentalities of the violation will be confiscated and transferred to a competent authority for further action. Therefore, if you have 5 million Vietnam dong and you burn it, it is considered illegal and you may be subject to a fine and confiscation of the money.",
        "id": "2bc3743b-8eea-4526-9094-fb077be0ff9f"
    },
    {
        "raw": " ###\nPredicates:\nProvideGuidelines(x) | EnsureAccuracy(x) | EnsureSafety(x) | EnsureRetention(x) | EnsureTraceability(x) | EnsureDisputeSettlement(x) | CreditInstitution(x) | ElectronicSavingsDeposit(x) | CheckingAccount(x) | Depositor(x) | LawOnETransactions(x) | AntiMoneyLaundering(x) | RelevantRegulations(x) | WithdrawWithoutProcedure(x) | Allowed(x).\n\nExplanation:\nProvideGuidelines(x): x provides guidelines.\nEnsureAccuracy(x): x ensures accuracy.\nEnsureSafety(x): x ensures safety.\nEnsureRetention(x): x ensures retention of information.\nEnsureTraceability(x): x ensures traceability.\nEnsureDisputeSettlement(x): x ensures dispute settlement.\nCreditInstitution(x): x is a credit institution.\nElectronicSavingsDeposit(x): x is an electronic savings deposit.\nCheckingAccount(x): x is a checking account.\nDepositor(x): x is a depositor.\nLawOnETransactions(x): x is a law on electronic transactions.\nAntiMoneyLaundering(x): x is anti-money laundering.\nRelevantRegulations(x): x is relevant regulations.\nWithdrawWithoutProcedure(x): x allows withdrawal without procedure.\nAllowed(x): x is allowed.\n\nPremises:\nall x (CreditInstitution(x) -> ProvideGuidelines(x)).\nall x (ProvideGuidelines(x) -> EnsureAccuracy(x)).\nall x (ProvideGuidelines(x) -> EnsureSafety(x)).\nall x (CreditInstitution(x) -> EnsureRetention(x)).\nall x (CreditInstitution(x) -> EnsureTraceability(x)).\nall x (CreditInstitution(x) -> EnsureDisputeSettlement(x)).\nall x (CreditInstitution(x) -> LawOnETransactions(x)).\nall x (CreditInstitution(x) -> AntiMoneyLaundering(x)).\nall x (CreditInstitution(x) -> RelevantRegulations(x)).\n\nConclusion:\n-WithdrawWithoutProcedure(x) | Allowed(x).",
        "premises": [
            "all x (CreditInstitution(x) -> ProvideGuidelines(x)).",
            "all x (ProvideGuidelines(x) -> EnsureAccuracy(x)).",
            "all x (ProvideGuidelines(x) -> EnsureSafety(x)).",
            "all x (CreditInstitution(x) -> EnsureRetention(x)).",
            "all x (CreditInstitution(x) -> EnsureTraceability(x)).",
            "all x (CreditInstitution(x) -> EnsureDisputeSettlement(x)).",
            "all x (CreditInstitution(x) -> LawOnETransactions(x)).",
            "all x (CreditInstitution(x) -> AntiMoneyLaundering(x)).",
            "all x (CreditInstitution(x) -> RelevantRegulations(x))."
        ],
        "conclusion": "-WithdrawWithoutProcedure(x) | Allowed(x).",
        "id": "7893bac9-b762-4845-b819-66eaad53cf99"
    },
    {
        "raw": " ###\nPredicates:\nApplication(x) | Document(x) | CitizenID(x) | IDCard(x) | Passport(x) | BirthCertificate(x) | EntryVisa(x) | ExemptionDoc(x) | Guardian(x) | LegalRepresentative(x) | OpenAccount(x) | Identification(x) | Required(x) | StateBank(x) | Vietnam(x).\n\nExplanation:\nApplication(x): x is an application form for opening a checking account.\nDocument(x): x is a required document.\nCitizenID(x): x is a citizen identification card.\nIDCard(x): x is an ID card.\nPassport(x): x is a passport.\nBirthCertificate(x): x is a birth certificate.\nEntryVisa(x): x is an entry visa.\nExemptionDoc(x): x is a document proving exemption from entry visa.\nGuardian(x): x is a guardian.\nLegalRepresentative(x): x is a legal representative.\nOpenAccount(x): x opens a checking account.\nIdentification(x): x has identification.\nRequired(x): x is required.\nStateBank(x): x is the State Bank of Vietnam.\nVietnam(x): x is in the territory of Vietnam.\n\nPremises:\nall x (Application(x) -> Required(x)).\nall x (CitizenID(x) | IDCard(x) | Passport(x) | BirthCertificate(x) | EntryVisa(x) | ExemptionDoc(x) -> Document(x)).\nall x (Document(x) -> Required(x)).\nall x (Guardian(x) | LegalRepresentative(x) -> Required(x)).\nall x (OpenAccount(x) -> Identification(x)).\nall x (Required(x) -> StateBank(x)).\nall x (StateBank(x) -> Vietnam(x)).\n\nConclusion:\n-OpenAccount(x) | Identification(x).\n------------------------",
        "premises": [
            "all x (Application(x) -> Required(x)).",
            "all x (CitizenID(x) | IDCard(x) | Passport(x) | BirthCertificate(x) | EntryVisa(x) | ExemptionDoc(x) -> Document(x)).",
            "all x (Document(x) -> Required(x)).",
            "all x (Guardian(x) | LegalRepresentative(x) -> Required(x)).",
            "all x (OpenAccount(x) -> Identification(x)).",
            "all x (Required(x) -> StateBank(x)).",
            "all x (StateBank(x) -> Vietnam(x))."
        ],
        "conclusion": "------------------------",
        "id": "507d7ebc-666c-4df8-90ec-453a4ab9aff5"
    },
    {
        "raw": " ###\nPredicates:\nLegalRepresentative(x) | ResideInVietnam(x) | CreditInstitution(x) | Authorize(x, y) | ManagerOrExecutive(x) | ExerciseRights(x) | FulfillObligations(x).\n\nExplanation:\nLegalRepresentative(x): x is a legal representative.\nResideInVietnam(x): x resides in Vietnam.\nCreditInstitution(x): x is a credit institution.\nAuthorize(x, y): x authorizes y.\nManagerOrExecutive(x): x is a manager or executive.\nExerciseRights(x): x exercises rights.\nFulfillObligations(x): x fulfills obligations.\n\nPremises:\nall x (LegalRepresentative(x) -> ResideInVietnam(x)).\nall x, y (CreditInstitution(x) & LegalRepresentative(y) & Authorize(y, x) & ManagerOrExecutive(x) -> (ExerciseRights(x) & FulfillObligations(x))).\n\nConclusion:\nall x (CreditInstitution(x) & LegalRepresentative(x) -> ResideInVietnam(x)).",
        "premises": [
            "all x (LegalRepresentative(x) -> ResideInVietnam(x)).",
            "all x, y (CreditInstitution(x) & LegalRepresentative(y) & Authorize(y, x) & ManagerOrExecutive(x) -> (ExerciseRights(x) & FulfillObligations(x)))."
        ],
        "conclusion": "all x (CreditInstitution(x) & LegalRepresentative(x) -> ResideInVietnam(x)).",
        "id": "05986d5a-46ec-4155-afee-ddb82890daee"
    },
    {
        "raw": " Predicates:\nCitizen(x) | Age(x, y) | LegalCapacity(x) | Deposit(x) | Representative(x, y) | Guardian(x, y) | Entitled(x).\n\nExplanation:\nCitizen(x): x is a Vietnamese citizen.\nAge(x, y): x is y years old.\nLegalCapacity(x): x has full legal capacity.\nDeposit(x): x can make a deposit.\nRepresentative(x, y): x is the legal representative of y.\nGuardian(x, y): x is the guardian of y.\nEntitled(x): x is entitled to deposit money.\n\nPremises:\nall x (Citizen(x) & Age(x, 18) & LegalCapacity(x) -> Deposit(x)).\nall x (Citizen(x) & Age(x, a) & a >= 15 & a < 18 & ~RestrictedCapacity(x) & ~LostCapacity(x) -> Deposit(x)).\nall x (Citizen(x) & (LimitedCapacity(x) | LostCapacity(x) | Age(x, a) & a < 15) -> (Representative(x, y) -> Deposit(x))).\nall x (Citizen(x) & LimitedCognition(x) & LimitedBehaviorControl(x) -> (Guardian(x, y) -> Deposit(x))).\n\nConclusion:\nall x (Citizen(x) & (LimitedCapacity(x) | LostCapacity(x)) -> Entitled(x)).",
        "premises": [
            "all x (Citizen(x) & Age(x, 18) & LegalCapacity(x) -> Deposit(x)).",
            "all x (Citizen(x) & Age(x, a) & a >= 15 & a < 18 & ~RestrictedCapacity(x) & ~LostCapacity(x) -> Deposit(x)).",
            "all x (Citizen(x) & (LimitedCapacity(x) | LostCapacity(x) | Age(x, a) & a < 15) -> (Representative(x, y) -> Deposit(x))).",
            "all x (Citizen(x) & LimitedCognition(x) & LimitedBehaviorControl(x) -> (Guardian(x, y) -> Deposit(x)))."
        ],
        "conclusion": "all x (Citizen(x) & (LimitedCapacity(x) | LostCapacity(x)) -> Entitled(x)).",
        "id": "dc4d41d8-283a-48ab-9e3a-2d9937d4e69c"
    },
    {
        "raw": " ###\nPredicates:\nEligible(x) | PoorHouseholdMember(x) | EthnicMinority(x) | DifficultArea(x) | IslandCommune(x) | IslandDistrict(x) | HealthInsuranceCard(x) | HouseholdRegistration(x) | SeverelyDisadvantagedArea(x).\n\nExplanation:\nEligible(x): x is eligible for health insurance card.\nPoorHouseholdMember(x): x is a poor household member.\nEthnicMinority(x): x is an ethnic minority person.\nDifficultArea(x): x lives in an area with difficult socio-economic conditions.\nIslandCommune(x): x lives in an island commune.\nIslandDistrict(x): x lives in an island district.\nHealthInsuranceCard(x): x has a health insurance card.\nHouseholdRegistration(x): x has a household registration.\nSeverelyDisadvantagedArea(x): x lives in a severely disadvantaged area.\n\nPremises:\nall x (PoorHouseholdMember(x) -> Eligible(x)).\nall x (EthnicMinority(x) & DifficultArea(x) -> Eligible(x)).\nall x (IslandCommune(x) -> Eligible(x)).\nall x (IslandDistrict(x) -> Eligible(x)).\nall x (SeverelyDisadvantagedArea(x) & HouseholdRegistration(x) -> Eligible(x)).\n\nConclusion:\nall x (HouseholdRegistration(x) & SeverelyDisadvantagedArea(x) -> Eligible(x)).",
        "premises": [
            "all x (PoorHouseholdMember(x) -> Eligible(x)).",
            "all x (EthnicMinority(x) & DifficultArea(x) -> Eligible(x)).",
            "all x (IslandCommune(x) -> Eligible(x)).",
            "all x (IslandDistrict(x) -> Eligible(x)).",
            "all x (SeverelyDisadvantagedArea(x) & HouseholdRegistration(x) -> Eligible(x))."
        ],
        "conclusion": "all x (HouseholdRegistration(x) & SeverelyDisadvantagedArea(x) -> Eligible(x)).",
        "id": "57ea0a2c-e5a3-45bd-accd-b58b09932847"
    },
    {
        "raw": " ###\nPredicates:\n\nManufacturer(x) | Seller(x) | Operate(x) | Certificate(x) | Conditions(x) | Comply(x) | DietarySupplement(x) | Requirements(x) | Decree12(x) | SmallInitialProduction(x) | NoFixedLocation(x) | SmallPreliminaryProcessing(x) | SmallTrading(x) | PrePackagedFood(x) | CollectiveKitchen(x) | FoodSafety(x).\n\nExplanation:\n\nManufacturer(x): x is a food manufacturer.\nSeller(x): x is a food seller.\nOperate(x): x operates in the food industry.\nCertificate(x): x has a Certificate of fulfillment of food safety conditions.\nConditions(x): x meets the conditions for issuance of the Certificate.\nComply(x): x complies with the requirements.\nDietarySupplement(x): x is a manufacturer of dietary supplements.\nRequirements(x): x meets the requirements specified in Article 28 of the Decree.\nDecree12(x): x is an establishment not required to obtain the Certificate.\nSmallInitialProduction(x): x has small initial production.\nNoFixedLocation(x): x is a production or trading of food without fixed location.\nSmallPreliminaryProcessing(x): x has small preliminary processing.\nSmallTrading(x): x has small trading of foods.\nPrePackagedFood(x): x trades pre-packaged foods.\nCollectiveKitchen(x): x is a collective kitchen without registration of food business.\nFoodSafety(x): x is related to food safety.\n\nPremises:\n\nall x (Manufacturer(x) -> (Certificate(x) | Decree12(x))).\nall x (Seller(x) -> (Certificate(x) | Decree12(x))).\nall x (Operate(x) -> (Certificate(x) | Decree12(x))).\nall x (DietarySupplement(x) -> Comply(x)).\nall x (Comply(x) -> Requirements(x)).\nall x (Decree12(x) -> (SmallInitialProduction(x) | NoFixedLocation(x) | SmallPreliminaryProcessing(x) | SmallTrading(x) | PrePackagedFood(x) | CollectiveKitchen(x))).\n\nConclusion:\n\nall x (Manufacturer(x) & Seller(x) & Operate(x) & ~Decree12(x) -> Certificate(x)).\n\nThe conclusion states that if a company's cafeteria is a food manufacturer, seller, and operates in the food industry, and it does not meet the conditions specified in Article 12 of Decree No. 15/2018/ND-CP, then it must have a Certificate of fulfillment of food safety conditions.",
        "premises": [
            "all x (Manufacturer(x) -> (Certificate(x) | Decree12(x))).",
            "all x (Seller(x) -> (Certificate(x) | Decree12(x))).",
            "all x (Operate(x) -> (Certificate(x) | Decree12(x))).",
            "all x (DietarySupplement(x) -> Comply(x)).",
            "all x (Comply(x) -> Requirements(x)).",
            "all x (Decree12(x) -> (SmallInitialProduction(x) | NoFixedLocation(x) | SmallPreliminaryProcessing(x) | SmallTrading(x) | PrePackagedFood(x) | CollectiveKitchen(x)))."
        ],
        "conclusion": "The conclusion states that if a company's cafeteria is a food manufacturer, seller, and operates in the food industry, and it does not meet the conditions specified in Article 12 of Decree No. 15/2018/ND-CP, then it must have a Certificate of fulfillment of food safety conditions.",
        "id": "5474fafd-fcaa-4998-bc7d-181156cf0638"
    },
    {
        "raw": " ###\nPredicates:\nWorking(x) | NormalConditions(x) | EnjoySicknessRegime(x) | Laborer(x) | MaxPeriod(x) | WorkingDays(x) | ExcludeHolidays(x) | PublicHolidays(x) | NewYearHolidays(x) | Weekends(x) | SocialInsurancePremiums(x) | Years(x) | PaidSicknessRegime(x) | TetHoliday(x) | FullPaidLeave(x) | SicknessBenefit(x) | Salary(x) | SocialInsurancePremiumsBasis(x).\n\nExplanation:\nWorking(x): x is working.\nNormalConditions(x): x is working under normal conditions.\nEnjoySicknessRegime(x): x enjoys the sickness regime.\nLaborer(x): x is a laborer.\nMaxPeriod(x): x is the maximum period of enjoying the sickness regime.\nWorkingDays(x): x is the number of working days.\nExcludeHolidays(x): x excludes public holidays, New Year holidays, and weekends.\nPublicHolidays(x): x is a public holiday.\nNewYearHolidays(x): x is a New Year holiday.\nWeekends(x): x is a weekend.\nSocialInsurancePremiums(x): x has paid social insurance premiums.\nYears(x): x is the number of years.\nPaidSicknessRegime(x): x is the period of sickness regime entitlement.\nTetHoliday(x): x is the Tet holiday.\nFullPaidLeave(x): x is entitled to a full paid leave.\nSicknessBenefit(x): x is entitled to a sickness benefit.\nSalary(x): x is the salary.\nSocialInsurancePremiumsBasis(x): x is the basis for payment of social insurance premiums.\n\nPremises:\nall x (Laborer(x) -> (Working(x) & NormalConditions(x))).\nall x (MaxPeriod(x) -> WorkingDays(x)).\nall x (ExcludeHolidays(x) -> (PublicHolidays(x) | NewYearHolidays(x) | Weekends(x))).\nall x (SocialInsurancePremiums(x) -> Years(x)).\nall x (PaidSicknessRegime(x) -> SocialInsurancePremiums(x)).\nall x (TetHoliday(x) -> FullPaidLeave(x)).\nall x (SicknessBenefit(x) -> Salary(x)).\nall x (Salary(x) -> SocialInsurancePremiumsBasis(x)).\n\nConclusion:\nall x (TetHoliday(x) -> SicknessBenefit(x)).",
        "premises": [
            "all x (Laborer(x) -> (Working(x) & NormalConditions(x))).",
            "all x (MaxPeriod(x) -> WorkingDays(x)).",
            "all x (ExcludeHolidays(x) -> (PublicHolidays(x) | NewYearHolidays(x) | Weekends(x))).",
            "all x (SocialInsurancePremiums(x) -> Years(x)).",
            "all x (PaidSicknessRegime(x) -> SocialInsurancePremiums(x)).",
            "all x (TetHoliday(x) -> FullPaidLeave(x)).",
            "all x (SicknessBenefit(x) -> Salary(x)).",
            "all x (Salary(x) -> SocialInsurancePremiumsBasis(x))."
        ],
        "conclusion": "all x (TetHoliday(x) -> SicknessBenefit(x)).",
        "id": "54707371-b963-40a7-a2d4-e8a783e78781"
    },
    {
        "raw": " ###\nPredicates:\nDisabled(x) | BodyPartsImpairment(x) | FunctionalImpairment(x) | DifficultyWorking(x) | DifficultyLiving(x) | DifficultyStudying(x) | ExceptionallySevereDisability(x) | SevereDisability(x) | Beneficiary(x) | Family(x) | Nurturing(x) | Caring(x) | Pregnancy(x) | Nursing(x) | MedicalExaminationCouncil(x) | TypeImpairment(x) | LevelImpairment(x) | SelfServingCapacity(x) | WorkingCapacityDecrease(x) | UnclearConclusion(x) | StateBudget(x) | ImpairmentLevelDetermination(x) | CertificateIssuance(x) | HeartDisease(x) | DisabilityBenefits(x).\n\nExplanation:\nDisabled(x): x is a disabled person.\nBodyPartsImpairment(x): x has impairment in one or more body parts.\nFunctionalImpairment(x): x has a functional impairment.\nDifficultyWorking(x): x has difficulty working.\nDifficultyLiving(x): x has difficulty living.\nDifficultyStudying(x): x has difficulty studying.\nExceptionallySevereDisability(x): x has an exceptionally severe disability.\nSevereDisability(x): x has a severe disability.\nBeneficiary(x): x is a beneficiary of monthly care fund support.\nFamily(x): x is a family member.\nNurturing(x): x is nurturing someone.\nCaring(x): x is caring for someone.\nPregnancy(x): x is pregnant.\nNursing(x): x is nursing a child under 36 months of age.\nMedicalExaminationCouncil(x): x is a medical examination council.\nTypeImpairment(x): x is a type of impairment.\nLevelImpairment(x): x is a level of impairment.\nSelfServingCapacity(x): x has self-serving capacity.\nWorkingCapacityDecrease(x): x has a working capacity decrease.\nUnclearConclusion(x): x has an unclear conclusion on self-serving capacity and working capacity decrease.\nStateBudget(x): x is the state budget.\nImpairmentLevelDetermination(x): x is the determination of impairment levels.\nCertificateIssuance(x): x is the issuance of a certificate of impairment.\nHeartDisease(x): x has heart disease.\nDisabilityBenefits(x): x is entitled to disability benefits.\n\nPremises:\nall x (Disabled(x) <-> (BodyPartsImpairment(x) | FunctionalImpairment(x))).\nall x (Disabled(x) -> (DifficultyWorking(x) | DifficultyLiving(x) | DifficultyStudying(x))).\nall x (ExceptionallySevereDisability(x) -> Beneficiary(x)).\nall x (SevereDisability(x) -> Beneficiary(x)).\nall x (Pregnancy(x) -> Beneficiary(x)).\nall x (Nursing(x) -> Beneficiary(x)).\nall x (MedicalExaminationCouncil(x) -> TypeImpairment(x)).\nall x (MedicalExaminationCouncil(x) -> LevelImpairment(x)).\nall x (SelfServingCapacity(x) -> WorkingCapacityDecrease(x)).\nall x (UnclearConclusion(x) -> ImpairmentLevelDetermination(x)).\nall x (StateBudget(x) -> ImpairmentLevelDetermination(x)).\nall x (StateBudget(x) -> CertificateIssuance(x)).\n\nConclusion:\nHeartDisease(x) -> DisabilityBenefits(x).\n\nNote: The conclusion is not a valid FOL statement as it is not universally quantified. However, it is not possible to determine the validity of the conclusion without additional information on how heart disease is classified within the context of the given rules.",
        "premises": [
            "all x (Disabled(x) <-> (BodyPartsImpairment(x) | FunctionalImpairment(x))).",
            "all x (Disabled(x) -> (DifficultyWorking(x) | DifficultyLiving(x) | DifficultyStudying(x))).",
            "all x (ExceptionallySevereDisability(x) -> Beneficiary(x)).",
            "all x (SevereDisability(x) -> Beneficiary(x)).",
            "all x (Pregnancy(x) -> Beneficiary(x)).",
            "all x (Nursing(x) -> Beneficiary(x)).",
            "all x (MedicalExaminationCouncil(x) -> TypeImpairment(x)).",
            "all x (MedicalExaminationCouncil(x) -> LevelImpairment(x)).",
            "all x (SelfServingCapacity(x) -> WorkingCapacityDecrease(x)).",
            "all x (UnclearConclusion(x) -> ImpairmentLevelDetermination(x)).",
            "all x (StateBudget(x) -> ImpairmentLevelDetermination(x)).",
            "all x (StateBudget(x) -> CertificateIssuance(x))."
        ],
        "conclusion": "Note: The conclusion is not a valid FOL statement as it is not universally quantified. However, it is not possible to determine the validity of the conclusion without additional information on how heart disease is classified within the context of the given rules.",
        "id": "6f354fa6-f9c2-439d-9759-2ace00b873d8"
    },
    {
        "raw": " ###\nPredicates:\nNewMedicinePractice(x) | Research(x) | Completed(x) | Accepted(x) | CommitteeApproval(x) | Certificate(x) | ForeignCountry(x) | HostCountryRegulations(x) | BoardAppraisal(x) | DepartmentApproval(x) | Clause2(x) | ForeignAuthority(x) | OverseasHealthcare(x) | ProfessionalCouncilReview(x) | Clause3(x) | MinistryClassification(x) | HealthcareApplication(x).\n\nExplanation:\nNewMedicinePractice(x): x is a new medicine practice or method.\nResearch(x): x is researched.\nCompleted(x): x has completed research.\nAccepted(x): x is accepted.\nCommitteeApproval(x): x is approved by the Committee for Evaluation of Ethical Conducts in Biomedical Researches affiliated to the Ministry of Health or the Ministerial-level Science Council.\nCertificate(x): x is issued the Certificate of Research Results by the Department of Science, Technology and Training affiliated to Ministry of Heath.\nForeignCountry(x): x is researched in a foreign country.\nHostCountryRegulations(x): x complies with the regulations of the host country.\nBoardAppraisal(x): x is appraised by the Board of Ethics Evaluation in Biomedical Research - Ministry of Health or ministerial-level scientific Council.\nDepartmentApproval(x): x is granted Certificate of research result by the Department of Science, Technology and Training - Ministry of Health.\nClause2(x): x is a new medicine practice or method stipulated in Clause 2 Article 69 of the Law on Medical Examination and Treatment.\nForeignAuthority(x): x is permitted by foreign competent authorities.\nOverseasHealthcare(x): x is officially applied at at least one overseas healthcare establishment.\nProfessionalCouncilReview(x): x is reviewed and assessed by the professional council established by the Ministry of Health in the application for permission to apply for such practices or measures.\nClause3(x): x is a new medicine practice or method stipulated in Clause 3 Article 69 of the Law on Medical Examination and Treatment.\nMinistryClassification(x): x has been classified as special or type I by the Ministry of Health.\nHealthcareApplication(x): x is applied at healthcare establishments for the first time.\n\nPremises:\nall x (NewMedicinePractice(x) -> (Research(x) & Completed(x) & (Accepted(x) | ForeignCountry(x)))).\nall x (NewMedicinePractice(x) -> (CommitteeApproval(x) | BoardAppraisal(x))).\nall x (NewMedicinePractice(x) -> (Certificate(x) | DepartmentApproval(x))).\nall x (Clause2(x) -> (ForeignAuthority(x) & OverseasHealthcare(x) & ProfessionalCouncilReview(x))).\nall x (Clause3(x) -> (MinistryClassification(x) & HealthcareApplication(x))).\n\nConclusion:\nexists x (NewMedicinePractice(x)).",
        "premises": [
            "all x (NewMedicinePractice(x) -> (Research(x) & Completed(x) & (Accepted(x) | ForeignCountry(x)))).",
            "all x (NewMedicinePractice(x) -> (CommitteeApproval(x) | BoardAppraisal(x))).",
            "all x (NewMedicinePractice(x) -> (Certificate(x) | DepartmentApproval(x))).",
            "all x (Clause2(x) -> (ForeignAuthority(x) & OverseasHealthcare(x) & ProfessionalCouncilReview(x))).",
            "all x (Clause3(x) -> (MinistryClassification(x) & HealthcareApplication(x)))."
        ],
        "conclusion": "exists x (NewMedicinePractice(x)).",
        "id": "d532c08f-20c7-48e8-94d0-7366ce837326"
    },
    {
        "raw": " ###\nPredicates:\nEmployee(x) | PartTime(x) | Production(x) | Business(x) | Service(x) | Cooperative(x) | Union(x) | SelfEmployed(x) | EmployeeAbroad(x) | SocialInsurance(x) | Born(x, y) | Address(x, y) | Participate(x, y) | Continue(x, y) | Individual(x).\n\nExplanation:\nEmployee(x): x is an employee.\nPartTime(x): x is a part-time official.\nProduction(x): x participates in production activities.\nBusiness(x): x participates in business activities.\nService(x): x participates in service activities.\nCooperative(x): x is a cooperative member.\nUnion(x): x is a union of cooperatives member.\nSelfEmployed(x): x is a self-employed worker.\nEmployeeAbroad(x): x is an employee working abroad.\nSocialInsurance(x): x participates in social insurance.\nBorn(x, y): x was born in year y.\nAddress(x, y): x has an address in y.\nParticipate(x, y): x participates in y.\nContinue(x, y): x can continue to participate in y.\nIndividual(x): x is an individual.\n\nPremises:\nall x (Employee(x) -> (PartTime(x) | Production(x) | Business(x) | Service(x) | Cooperative(x) | Union(x) | SelfEmployed(x) | EmployeeAbroad(x))).\nall x (SocialInsurance(x) -> Participate(x, y)).\nBorn(she, 1985).\nAddress(she, \"Long Thanh Trung Commune, Hoa Thanh District, Tay Ninh Province\").\nParticipate(she, SocialInsurance).\nParticipate(she, \"Foreign Investment Enterprise at Trang Bang Industrial Park\").\nStartDate(she, 2005).\nEndDate(she, 2013).\nStopWorking(she).\nChildCare(she).\n\nConclusion:\nContinue(she, SocialInsurance) -> Individual(she).",
        "premises": [
            "all x (Employee(x) -> (PartTime(x) | Production(x) | Business(x) | Service(x) | Cooperative(x) | Union(x) | SelfEmployed(x) | EmployeeAbroad(x))).",
            "all x (SocialInsurance(x) -> Participate(x, y)).",
            "Born(she, 1985).",
            "Address(she, \"Long Thanh Trung Commune, Hoa Thanh District, Tay Ninh Province\").",
            "Participate(she, SocialInsurance).",
            "Participate(she, \"Foreign Investment Enterprise at Trang Bang Industrial Park\").",
            "StartDate(she, 2005).",
            "EndDate(she, 2013).",
            "StopWorking(she).",
            "ChildCare(she)."
        ],
        "conclusion": "Continue(she, SocialInsurance) -> Individual(she).",
        "id": "493e5e87-1286-42f4-8a97-82472b5c70e6"
    },
    {
        "raw": " ###\nPredicates:\nEmployee(x) | VietnameseCitizen(x) | IndefiniteContract(x) | TermContract(x) | Official(x) | PublicEmployee(x) | DefenseWorker(x) | PoliceWorker(x) | ArmyOfficer(x) | ArmySoldier(x) | PoliceOfficer(x) | PoliceNonCommissionedOfficer(x) | SalariedLikeArmy(x) | SalariedLikePolice(x) | Employer(x) | StateAgency(x) | NonBusinessUnit(x) | ArmedForcesUnit(x) | PoliticalOrganization(x) | SocioPoliticalOrganization(x) | ProfessionalOrganization(x) | SocialOrganization(x) | ForeignAgency(x) | InternationalOrganization(x) | OperatingInVietnam(x) | Enterprise(x) | Cooperative(x) | IndividualBusiness(x) | CooperativeGroup(x) | Hire(x, y) | Employ(x, y) | PayWages(x, y) | CompulsorySocialInsurance(x, y).\n\nExplanation:\nEmployee(x): x is an employee.\nVietnameseCitizen(x): x is a Vietnamese citizen.\nIndefiniteContract(x): x has an indefinite-term employment contract.\nTermContract(x): x has a term employment contract of full three months or more.\nOfficial(x): x is an official.\nPublicEmployee(x): x is a public employee.\nDefenseWorker(x): x is a defense worker.\nPoliceWorker(x): x is a police worker.\nArmyOfficer(x): x is an officer of the People's Army.\nArmySoldier(x): x is a soldier of the People's Army.\nPoliceOfficer(x): x is an officer of the People's Police.\nPoliceNonCommissionedOfficer(x): x is a non-commissioned officer of the People's Police.\nSalariedLikeArmy(x): x is salaried like the People's Army.\nSalariedLikePolice(x): x is salaried like the People's Police.\nEmployer(x): x is an employer.\nStateAgency(x): x is a state agency.\nNonBusinessUnit(x): x is a non-business unit.\nArmedForcesUnit(x): x is a people's armed forces unit.\nPoliticalOrganization(x): x is a political organization.\nSocioPoliticalOrganization(x): x is a socio-political organization.\nProfessionalOrganization(x): x is a professional organization.\nSocialOrganization(x): x is a social organization.\nForeignAgency(x): x is a foreign agency.\nInternationalOrganization(x): x is an international organization.\nOperatingInVietnam(x): x is operating in the Vietnamese territory.\nEnterprise(x): x is an enterprise.\nCooperative(x): x is a cooperative.\nIndividualBusiness(x): x is an individual business household.\nCooperativeGroup(x): x is a cooperative group.\nHire(x, y): x hires y.\nEmploy(x, y): x employs y.\nPayWages(x, y): x pays wages to y.\nCompulsorySocialInsurance(x, y): x pays compulsory social insurance for y.\n\nPremises:\nall x (Employee(x) -> VietnameseCitizen(x)).\nall x (Employee(x) -> (IndefiniteContract(x) | TermContract(x))).\nall x (Employee(x) -> (Official(x) | PublicEmployee(x) | DefenseWorker(x) | PoliceWorker(x) | ArmyOfficer(x) | ArmySoldier(x) | PoliceOfficer(x) | PoliceNonCommissionedOfficer(x) | SalariedLikeArmy(x) | SalariedLikePolice(x))).\nall x (Employer(x) -> (StateAgency(x) | NonBusinessUnit(x) | ArmedForcesUnit(x) | PoliticalOrganization(x) | SocioPoliticalOrganization(x) | ProfessionalOrganization(x) | SocialOrganization(x) | ForeignAgency(x) | InternationalOrganization(x) | Enterprise(x) | Cooperative(x) | IndividualBusiness(x) | CooperativeGroup(x))).\nall x (Employer(x) -> OperatingInVietnam(x)).\nall x, y (Hire(x, y) -> Employer(x)).\nall x, y (Employ(x, y) -> Employer(x)).\nall x, y (PayWages(x, y) -> Employer(x)).\nall x, y (Hire(x, y) & Employ(x, y) & PayWages(x, y) -> CompulsorySocialInsurance(x, y)).\n\nConclusion:\nnot exists x, y (Company(x) & AccountingServiceCompany(y) & Hire(x, y) & not CompulsorySocialInsurance(x, y)).",
        "premises": [
            "all x (Employee(x) -> VietnameseCitizen(x)).",
            "all x (Employee(x) -> (IndefiniteContract(x) | TermContract(x))).",
            "all x (Employee(x) -> (Official(x) | PublicEmployee(x) | DefenseWorker(x) | PoliceWorker(x) | ArmyOfficer(x) | ArmySoldier(x) | PoliceOfficer(x) | PoliceNonCommissionedOfficer(x) | SalariedLikeArmy(x) | SalariedLikePolice(x))).",
            "all x (Employer(x) -> (StateAgency(x) | NonBusinessUnit(x) | ArmedForcesUnit(x) | PoliticalOrganization(x) | SocioPoliticalOrganization(x) | ProfessionalOrganization(x) | SocialOrganization(x) | ForeignAgency(x) | InternationalOrganization(x) | Enterprise(x) | Cooperative(x) | IndividualBusiness(x) | CooperativeGroup(x))).",
            "all x (Employer(x) -> OperatingInVietnam(x)).",
            "all x, y (Hire(x, y) -> Employer(x)).",
            "all x, y (Employ(x, y) -> Employer(x)).",
            "all x, y (PayWages(x, y) -> Employer(x)).",
            "all x, y (Hire(x, y) & Employ(x, y) & PayWages(x, y) -> CompulsorySocialInsurance(x, y))."
        ],
        "conclusion": "not exists x, y (Company(x) & AccountingServiceCompany(y) & Hire(x, y) & not CompulsorySocialInsurance(x, y)).",
        "id": "bdd62613-2791-4c38-8208-196087b2726a"
    },
    {
        "raw": " ###\nPredicates:\nEmployee(x) | IndefiniteContract(x) | FixedContract(x) | Obligation(x) | SocialInsurance(x) | Years(x, y) | ContinueWork(x) | Pay(x).\n\nExplanation:\nEmployee(x): x is an employee.\nIndefiniteContract(x): x has an indefinite-term labor contract.\nFixedContract(x): x has a labor contract with a term of full three months or more.\nObligation(x): x has an obligation.\nSocialInsurance(x): x is participating in social insurance.\nYears(x, y): x has y years of social insurance participation.\nContinueWork(x): x continues working.\nPay(x): x pays for social insurance.\n\nPremises:\nall x (Employee(x) & (IndefiniteContract(x) | FixedContract(x)) -> Obligation(x)).\nall x (Obligation(x) -> SocialInsurance(x)).\nall x (SocialInsurance(x) -> Years(x, y)).\nall x (Years(x, y) & y >= z -> ContinueWork(x)).\nall x (ContinueWork(x) -> Pay(x)).\n\nConclusion:\n~(all x (Years(x, y) & y >= z -> ContinueWork(x) & ~Pay(x))).",
        "premises": [
            "all x (Employee(x) & (IndefiniteContract(x) | FixedContract(x)) -> Obligation(x)).",
            "all x (Obligation(x) -> SocialInsurance(x)).",
            "all x (SocialInsurance(x) -> Years(x, y)).",
            "all x (Years(x, y) & y >= z -> ContinueWork(x)).",
            "all x (ContinueWork(x) -> Pay(x))."
        ],
        "conclusion": "~(all x (Years(x, y) & y >= z -> ContinueWork(x) & ~Pay(x))).",
        "id": "2b92d223-d013-4bab-a31d-70189fbf1718"
    },
    {
        "raw": " ###\nPredicates:\nWorkAtCompany(x) | Eligible(x) | CompulsorySocialInsurance(x) | VoluntarySocialInsurance(x) | MaternityBenefit(x) | Switch(x, y) | Entitled(x) | Inapplicable(x) | LawOnSocialSecurity(x).\n\nExplanation:\nWorkAtCompany(x): x works at the company.\nEligible(x): x is eligible.\nCompulsorySocialInsurance(x): x participates in compulsory social insurance.\nVoluntarySocialInsurance(x): x participates in voluntary social insurance.\nMaternityBenefit(x): x is entitled to maternity benefit.\nSwitch(x, y): x switches to y.\nEntitled(x): x is entitled.\nInapplicable(x): x is inapplicable.\nLawOnSocialSecurity(x): x is prescribed by the Law on Social Security.\n\nPremises:\nall x (WorkAtCompany(x) & Eligible(x) -> CompulsorySocialInsurance(x) & ~VoluntarySocialInsurance(x)).\nall x (CompulsorySocialInsurance(x) -> Entitled(x, MaternityBenefit(x))).\nall x (VoluntarySocialInsurance(x) -> Inapplicable(x, MaternityBenefit(x))).\nall x, y (Switch(x, y) -> (~VoluntarySocialInsurance(x) & CompulsorySocialInsurance(y))).\nall x (LawOnSocialSecurity(x) -> ~(CompulsorySocialInsurance(x) & VoluntarySocialInsurance(x))).\n\nConclusion:\nall x, y (Switch(x, y) & LawOnSocialSecurity(x) -> CompulsorySocialInsurance(y)).",
        "premises": [
            "all x (WorkAtCompany(x) & Eligible(x) -> CompulsorySocialInsurance(x) & ~VoluntarySocialInsurance(x)).",
            "all x (CompulsorySocialInsurance(x) -> Entitled(x, MaternityBenefit(x))).",
            "all x (VoluntarySocialInsurance(x) -> Inapplicable(x, MaternityBenefit(x))).",
            "all x, y (Switch(x, y) -> (~VoluntarySocialInsurance(x) & CompulsorySocialInsurance(y))).",
            "all x (LawOnSocialSecurity(x) -> ~(CompulsorySocialInsurance(x) & VoluntarySocialInsurance(x)))."
        ],
        "conclusion": "all x, y (Switch(x, y) & LawOnSocialSecurity(x) -> CompulsorySocialInsurance(y)).",
        "id": "dc3ca2e6-3505-4157-94cb-8cdff143296b"
    },
    {
        "raw": " ###\nPredicates:\nEntitled(x) | Postpone(x) | Conscription(x) | RegularArmedForce(x) | MilitarySchool(x) | NonMilitarySchool(x) | NationalEducationSystem(x) | FormalEducation(x) | ConcentratedSchool(x) | ContinuingEducation(x) | LowerSecondarySchool(x) | UpperSecondarySchool(x) | EducationalInstitution(x) | StudyAbroad(x) | OverseasSchool(x) | TrainingDuration(x) | AdmissionProcedure(x) | EnlistmentNotice(x) | FirstConcentratedTraining(x) | FullTimeTraining(x) | BridgeProgram(x) | LegitimateReason(x) | Examination(x) | ValidReason(x) | SecondaryEducation(x) | MilitaryService(x).\n\nExplanation:\nEntitled(x): x is entitled to postponement of conscription.\nPostpone(x): x postpones conscription.\nConscription(x): x is subject to conscription.\nRegularArmedForce(x): x is a non-commissioned officer/soldier serving in the regular armed force.\nMilitarySchool(x): x is a non-military school according to plans of the Ministry of National Defense.\nNonMilitarySchool(x): x is a non-military school according to plans of the Ministry of National Defense.\nNationalEducationSystem(x): x is a school in the national education system.\nFormalEducation(x): x is a form of formal education.\nConcentratedSchool(x): x is a concentrated school.\nContinuingEducation(x): x is a continuing education program.\nLowerSecondarySchool(x): x is a lower secondary school.\nUpperSecondarySchool(x): x is an upper secondary school.\nEducationalInstitution(x): x is an educational institution.\nStudyAbroad(x): x is studying abroad.\nOverseasSchool(x): x is an overseas school.\nTrainingDuration(x): x is the duration of a training course.\nAdmissionProcedure(x): x is the date on which a citizen completes the admission procedures.\nEnlistmentNotice(x): x is an enlistment notice.\nFirstConcentratedTraining(x): x is the first concentrated training course.\nFullTimeTraining(x): x is a full-time training course.\nBridgeProgram(x): x is a bridge program.\nLegitimateReason(x): x is a legitimate reason for dropping out of school.\nExamination(x): x is an examination of citizens subject to postponement of conscription.\nValidReason(x): x is a valid reason for postponement of conscription.\nSecondaryEducation(x): x is a secondary education.\nMilitaryService(x): x is military service.\n\nPremises:\nall x (Entitled(x) -> Postpone(x)).\nall x (RegularArmedForce(x) | MilitarySchool(x) | NonMilitarySchool(x) -> Entitled(x)).\nall x (NationalEducationSystem(x) & FormalEducation(x) & ConcentratedSchool(x) -> Entitled(x)).\nall x (ContinuingEducation(x) & (LowerSecondarySchool(x) | UpperSecondarySchool(x)) & EducationalInstitution(x) -> Entitled(x)).\nall x (StudyAbroad(x) & OverseasSchool(x) & TrainingDuration(x) >= 12 -> Entitled(x)).\nall x (AdmissionProcedure(x) & Studying(x) -> Entitled(x)).\nall x (EnlistmentNotice(x) & Conscription(x) -> -Entitled(x)).\nall x (FirstConcentratedTraining(x) & ContinuingEducation(x) -> -Entitled(x)).\nall x (FullTimeTraining(x) -> TrainingDuration(x) >= 12).\nall x (BridgeProgram(x) -> ContinuingEducation(x)).\nall x (-LegitimateReason(x) & DroppedOut(x) -> -Entitled(x)).\nall x (FinishedCourse(x) -> -Entitled(x)).\nall x (EnrolledButNotAttending(x) -> -Entitled(x)).\nall x (FirstConcentratedTraining(x) & ChangedCourse(x) -> -Entitled(x)).\nall x (Examination(x) & -ValidReason(x) -> Conscription(x)).\n\nConclusion:\nall x (SecondaryEducation(x) -> MilitaryService(x)).",
        "premises": [
            "all x (Entitled(x) -> Postpone(x)).",
            "all x (RegularArmedForce(x) | MilitarySchool(x) | NonMilitarySchool(x) -> Entitled(x)).",
            "all x (NationalEducationSystem(x) & FormalEducation(x) & ConcentratedSchool(x) -> Entitled(x)).",
            "all x (ContinuingEducation(x) & (LowerSecondarySchool(x) | UpperSecondarySchool(x)) & EducationalInstitution(x) -> Entitled(x)).",
            "all x (StudyAbroad(x) & OverseasSchool(x) & TrainingDuration(x) >= 12 -> Entitled(x)).",
            "all x (AdmissionProcedure(x) & Studying(x) -> Entitled(x)).",
            "all x (EnlistmentNotice(x) & Conscription(x) -> -Entitled(x)).",
            "all x (FirstConcentratedTraining(x) & ContinuingEducation(x) -> -Entitled(x)).",
            "all x (FullTimeTraining(x) -> TrainingDuration(x) >= 12).",
            "all x (BridgeProgram(x) -> ContinuingEducation(x)).",
            "all x (-LegitimateReason(x) & DroppedOut(x) -> -Entitled(x)).",
            "all x (FinishedCourse(x) -> -Entitled(x)).",
            "all x (EnrolledButNotAttending(x) -> -Entitled(x)).",
            "all x (FirstConcentratedTraining(x) & ChangedCourse(x) -> -Entitled(x)).",
            "all x (Examination(x) & -ValidReason(x) -> Conscription(x))."
        ],
        "conclusion": "all x (SecondaryEducation(x) -> MilitaryService(x)).",
        "id": "31b9c53f-ee37-40ff-9f81-8934835f0e96"
    },
    {
        "raw": " Rules:\n1. If a patient has medical examination and treatment at a health facility without presenting a health insurance card or at a facility that does not have a contract for medical services covered by health insurance, the patient must pay the costs and then bring documents to the social insurance agency for direct payment.\n2. The social insurance agency shall directly pay the patient the actual costs within the scope of payment of the health fund but not exceeding the level specified in the regulations.\n3. The dossier for direct payment of medical examination and treatment costs of health insurance includes a written request for direct payment, a copy of a valid health insurance card, a document with a valid photo, a copy of hospital discharge paper (for inpatient treatment), and a copy of a prescription or medical book for outpatient treatment.\n4. If the patient does not go to the social security office to follow payment procedures, the person who follows procedures for payment on behalf of the patient must have a power of attorney or certificate of legal representation of the patient.\n\nGoals:\nIs it possible to get an out-of-line medical care at the University of Medicine and Pharmacy Hospital for an out of line medical care but forgot to carry the health insurance card?\n\n###\nPredicates:\nMedicalExamination(x) | Treatment(x) | HealthFacility(x) | HealthInsuranceCard(x) | Contract(x) | Costs(x) | SocialInsuranceAgency(x) | DirectPayment(x) | Patient(x) | ActualCosts(x) | PaymentScope(x) | PaymentLevel(x) | Dossier(x) | WrittenRequest(x) | ValidHealthInsuranceCard(x) | ValidPhoto(x) | HospitalDischargePaper(x) | Prescription(x) | MedicalBook(x) | InpatientTreatment(x) | OutpatientTreatment(x) | PowerOfAttorney(x) | LegalRepresentation(x) | UniversityOfMedicineAndPharmacyHospital(x).\n\nExplanation:\nMedicalExamination(x): x undergoes medical examination.\nTreatment(x): x undergoes treatment.\nHealthFacility(x): x is a health facility.\nHealthInsuranceCard(x): x has a health insurance card.\nContract(x): x has a contract for medical services covered by health insurance.\nCosts(x): x incurs costs.\nSocialInsuranceAgency(x): x is a social insurance agency.\nDirectPayment(x): x is paid directly.\nPatient(x): x is a patient.\nActualCosts(x): x are actual costs.\nPaymentScope(x): x is within the scope of payment of the health fund.\nPaymentLevel(x): x is not exceeding the level specified in the regulations.\nDossier(x): x is a dossier.\nWrittenRequest(x): x is a written request for direct payment.\nValidHealthInsuranceCard(x): x is a valid health insurance card.\nValidPhoto(x): x is a document with a valid photo.\nHospitalDischargePaper(x): x is a copy of hospital discharge paper.\nPrescription(x): x is a copy of a prescription.\nMedicalBook(x): x is a medical book for outpatient treatment.\nInpatientTreatment(x): x is for inpatient treatment.\nOutpatientTreatment(x): x is for outpatient treatment.\nPowerOfAttorney(x): x has a power of attorney.\nLegalRepresentation(x): x has a certificate of legal representation.\nUniversityOfMedicineAndPharmacyHospital(x): x is the University of Medicine and Pharmacy Hospital.\n\nPremises:\nall x (MedicalExamination(x) -> (HealthFacility(x) & (HealthInsuranceCard(x) | Contract(x)))).\nall x (Treatment(x) -> (HealthFacility(x) & (HealthInsuranceCard(x) | Contract(x)))).\nall x (~HealthInsuranceCard(x) -> Costs(x)).\nall x (DirectPayment(x) -> (ActualCosts(x) & PaymentScope(x) & PaymentLevel(x))).\nall x (Dossier(x) -> (WrittenRequest(x) & ValidHealthInsuranceCard(x) & ValidPhoto(x) & (HospitalDischargePaper(x) | (Prescription(x) | MedicalBook(x))))).\nall x (~Patient(x) -> (PowerOfAttorney(x) | LegalRepresentation(x))).\n\nConclusion:\nUniversityOfMedicineAndPharmacyHospital(x) & OutpatientTreatment(x) & ~HealthInsuranceCard(x) -> DirectPayment(x).",
        "premises": [
            "all x (MedicalExamination(x) -> (HealthFacility(x) & (HealthInsuranceCard(x) | Contract(x)))).",
            "all x (Treatment(x) -> (HealthFacility(x) & (HealthInsuranceCard(x) | Contract(x)))).",
            "all x (~HealthInsuranceCard(x) -> Costs(x)).",
            "all x (DirectPayment(x) -> (ActualCosts(x) & PaymentScope(x) & PaymentLevel(x))).",
            "all x (Dossier(x) -> (WrittenRequest(x) & ValidHealthInsuranceCard(x) & ValidPhoto(x) & (HospitalDischargePaper(x) | (Prescription(x) | MedicalBook(x))))).",
            "all x (~Patient(x) -> (PowerOfAttorney(x) | LegalRepresentation(x)))."
        ],
        "conclusion": "UniversityOfMedicineAndPharmacyHospital(x) & OutpatientTreatment(x) & ~HealthInsuranceCard(x) -> DirectPayment(x).",
        "id": "70b60076-ec55-431f-9b3e-c0b440d90dbe"
    },
    {
        "raw": " ###\nPredicates:\nEntitled(x) | Employee(x) | Pregnant(x) | GivesBirth(x) | Adopts(x) | IntrauterineDevice(x) | Sterilization(x) | SocialInsurance(x) | SixMonths(x) | TwelveMonths(x) | FullSixMonths(x) | MaternityLeave(x) | Twins(x) | AdditionalLeave(x) | PrenatalCheckup(x) | SamePlace(x) | Benefits(x).\n\nExplanation:\nEntitled(x): x is entitled to maternity benefits.\nEmployee(x): x is an employee.\nPregnant(x): x is pregnant.\nGivesBirth(x): x gives birth.\nAdopts(x): x adopts a child.\nIntrauterineDevice(x): x uses an intrauterine device.\nSterilization(x): x takes sterilization measures.\nSocialInsurance(x): x has social insurance.\nSixMonths(x): x has six months.\nTwelveMonths(x): x has twelve months.\nFullSixMonths(x): x has participated in social insurance for full six months.\nMaternityLeave(x): x is entitled to maternity leave.\nTwins(x): x gives birth to twins or more.\nAdditionalLeave(x): x is entitled to additional leave.\nPrenatalCheckup(x): x has prenatal check-ups.\nSamePlace(x): x gives birth at the same place of initial medical care.\nBenefits(x): x enjoys prescribed benefits.\n\nPremises:\nall x (Employee(x) & (Pregnant(x) | GivesBirth(x) | Adopts(x) | IntrauterineDevice(x) | Sterilization(x)) -> Entitled(x)).\nall x (Entitled(x) & GivesBirth(x) & SocialInsurance(x) & FullSixMonths(x) -> MaternityLeave(x)).\nall x (Entitled(x) & Twins(x) -> AdditionalLeave(x)).\nall x (Entitled(x) -> PrenatalCheckup(x)).\nall x (Entitled(x) & SamePlace(x) -> Benefits(x)).\nall x (FullSixMonths(x) -> SixMonths(x)).\nall x (FullSixMonths(x) -> TwelveMonths(x)).\n\nConclusion:\nall x (Entitled(x) -> Benefits(x)).\n\nNote: The conclusion states that an employee who is entitled to maternity benefits is also entitled to benefits, which is a tautology. The question about additional benefits beyond social insurance and health insurance is not addressed in the given rules and cannot be answered with the provided information.",
        "premises": [
            "all x (Employee(x) & (Pregnant(x) | GivesBirth(x) | Adopts(x) | IntrauterineDevice(x) | Sterilization(x)) -> Entitled(x)).",
            "all x (Entitled(x) & GivesBirth(x) & SocialInsurance(x) & FullSixMonths(x) -> MaternityLeave(x)).",
            "all x (Entitled(x) & Twins(x) -> AdditionalLeave(x)).",
            "all x (Entitled(x) -> PrenatalCheckup(x)).",
            "all x (Entitled(x) & SamePlace(x) -> Benefits(x)).",
            "all x (FullSixMonths(x) -> SixMonths(x)).",
            "all x (FullSixMonths(x) -> TwelveMonths(x))."
        ],
        "conclusion": "Note: The conclusion states that an employee who is entitled to maternity benefits is also entitled to benefits, which is a tautology. The question about additional benefits beyond social insurance and health insurance is not addressed in the given rules and cannot be answered with the provided information.",
        "id": "7a81af60-1f5d-43ac-bb43-b4afe8ed0d87"
    },
    {
        "raw": " Predicates:\nParticipate(x, y) | Unable(x) | Work(x) | Compulsory(y) | Voluntary(y) | Possible(x, y).\n\nExplanation:\nParticipate(x, y): x participates in y.\nUnable(x): x is unable to participate.\nWork(x): x works.\nCompulsory(y): y is compulsory.\nVoluntary(y): y is voluntary.\nPossible(x, y): It is possible for x to participate in y.\n\nPremises:\nall x (Unable(x) -> Participate(x, Voluntary)).\nall x (Work(x) -> Participate(x, Compulsory)).\n\nConclusion:\nPossible(x, Compulsory) & Possible(x, Voluntary).",
        "premises": [
            "all x (Unable(x) -> Participate(x, Voluntary)).",
            "all x (Work(x) -> Participate(x, Compulsory))."
        ],
        "conclusion": "Possible(x, Compulsory) & Possible(x, Voluntary).",
        "id": "86f1fdbc-28b7-4306-a744-f9ebcd7d1cdb"
    },
    {
        "raw": " ###\nPredicates:\nRequirement(x) | Valid(x) | Return(x) | Use(x) | Eligible(x) | PoorHousehold(x) | Employer(x) | HealthInsurance(x) | MaternityBenefits(x) | Birth(x) | CurrentEmployer(x).\n\nExplanation:\nRequirement(x): x is required.\nValid(x): x is valid.\nReturn(x): x needs to be returned.\nUse(x): x is used.\nEligible(x): x is eligible.\nPoorHousehold(x): x belongs to a poor household.\nEmployer(x): x is an employer.\nHealthInsurance(x): x is a health insurance.\nMaternityBenefits(x): x is maternity benefits.\nBirth(x): x is a childbirth.\nCurrentEmployer(x): x is the current employer.\n\nPremises:\nRequirement(HealthInsurance(x)).\n-Valid(PoorHousehold(x)).\nRequirement(Return(PoorHousehold(x))).\nRequirement(Use(Employer(x))).\n-Eligible(MaternityBenefits(x) | Use(PoorHousehold(x))).\nRequirement(CurrentEmployer(x)).\n\nConclusion:\n-Eligible(MaternityBenefits(x) | Use(PoorHousehold(x)) | Birth(x)).",
        "premises": [
            "Requirement(HealthInsurance(x)).",
            "-Valid(PoorHousehold(x)).",
            "Requirement(Return(PoorHousehold(x))).",
            "Requirement(Use(Employer(x))).",
            "-Eligible(MaternityBenefits(x) | Use(PoorHousehold(x))).",
            "Requirement(CurrentEmployer(x))."
        ],
        "conclusion": "-Eligible(MaternityBenefits(x) | Use(PoorHousehold(x)) | Birth(x)).",
        "id": "4ef9ba76-3299-4ec9-84de-5a0ac6f31bd6"
    },
    {
        "raw": " ###\nPredicates:\nHealthInsurance(x) | CardEffect(x) | ChildbirthCosts(x) | RegularMedicalCare(x) | HospitalLocation(x) | InitialRegistration(x) | CardLevel(x) | Payment(x) | Percentage(x) | Cost(x) | CommuneLevel(x) | BasePay(x) | Year(x) | CoPayment(x) | NonCoPayment(x) | Employee(x) | Benefit(x) | HealthInsuranceDuration(x) | Entitlement(x).\n\nExplanation:\nHealthInsurance(x): x has health insurance.\nCardEffect(x): x's health insurance card takes effect.\nChildbirthCosts(x): x is paid for childbirth costs.\nRegularMedicalCare(x): x is treated as receiving regular medical care.\nHospitalLocation(x): x is the location of the hospital.\nInitialRegistration(x): x is the place of initial registration.\nCardLevel(x): x is the level of technical services.\nPayment(x): x is the payment rate.\nPercentage(x): x is the percentage of costs covered.\nCost(x): x is the cost of medical services.\nCommuneLevel(x): x is at the commune level.\nBasePay(x): x is the base pay.\nYear(x): x is the year.\nCoPayment(x): x is the co-payment for medical expenses.\nNonCoPayment(x): x is granted a certificate of non-co-payment.\nEmployee(x): x is an employee.\nBenefit(x): x has a benefit.\nHealthInsuranceDuration(x): x has had health insurance for a certain duration.\nEntitlement(x): x is entitled to a certain percentage of medical examination and treatment costs.\n\nPremises:\nall x (HealthInsurance(x) -> CardEffect(x)).\nall x (CardEffect(x) -> ChildbirthCosts(x) & RegularMedicalCare(x)).\nall x (HospitalLocation(x) = InitialRegistration(x) | HospitalLocation(x) = CardLevel(x)).\nall x (HospitalLocation(x) = InitialRegistration(x) -> Payment(x) = 100%).\nall x (Cost(x) < 15% * BasePay(x) -> Payment(x) = 100%).\nall x (HealthInsuranceDuration(x) >= 5 years -> Payment(x) = 100%).\nall x (CoPayment(x) > 6 * BasePay(x) -> NonCoPayment(x)).\nall x (NonCoPayment(x) -> Payment(x) = 100%).\nall x (Entitlement(x) = 80%).\n\nConclusion:\nall x (Employee(x) & HealthInsuranceDuration(x) >= 6 months -> Benefit(x)).\n\n###\nNote: The conclusion is that any employee who has had health insurance for 6 months or more will have a benefit, but the specific benefit is not explicitly stated in the provided rules.",
        "premises": [
            "all x (HealthInsurance(x) -> CardEffect(x)).",
            "all x (CardEffect(x) -> ChildbirthCosts(x) & RegularMedicalCare(x)).",
            "all x (HospitalLocation(x) = InitialRegistration(x) | HospitalLocation(x) = CardLevel(x)).",
            "all x (HospitalLocation(x) = InitialRegistration(x) -> Payment(x) = 100%).",
            "all x (Cost(x) < 15% * BasePay(x) -> Payment(x) = 100%).",
            "all x (HealthInsuranceDuration(x) >= 5 years -> Payment(x) = 100%).",
            "all x (CoPayment(x) > 6 * BasePay(x) -> NonCoPayment(x)).",
            "all x (NonCoPayment(x) -> Payment(x) = 100%).",
            "all x (Entitlement(x) = 80%)."
        ],
        "conclusion": "Note: The conclusion is that any employee who has had health insurance for 6 months or more will have a benefit, but the specific benefit is not explicitly stated in the provided rules.",
        "id": "4b7f4894-0434-4998-b807-74e051d6f7f4"
    },
    {
        "raw": " ###\nPredicates:\nMember(x, y) | FirstGroup(x) | UseCard(x) | Pay(x) | ReturnCard(x) | ReturnPremium(x) | PublicServant(x) | PoliceRelative(x) | HealthInsurance(x) | Entity(x) | Law(x).\n\nExplanation:\nMember(x, y): x is a member of entity y.\nFirstGroup(x): x is the first group of entities.\nUseCard(x): x uses a health insurance card.\nPay(x): x pays health insurance premium.\nReturnCard(x): x returns the health insurance card.\nReturnPremium(x): x returns the collected health insurance premium.\nPublicServant(x): x is a public servant.\nPoliceRelative(x): x is a police relative.\nHealthInsurance(x): x is health insurance.\nEntity(x): x is an entity.\nLaw(x): x is a law.\n\nPremises:\nall x, y (Member(x, y) & Entity(y, Article12) & Member(x, z) & Entity(z, Article12) -> FirstGroup(y)).\nall x (PublicServant(x) -> Pay(x)).\nall x (PoliceRelative(x) -> ReturnCard(x)).\nall x (ReturnCard(x) -> ReturnPremium(x)).\nall x (HealthInsurance(x) -> UseCard(x)).\nall x (UseCard(x) -> not Member(x, y) | not Member(x, z)).\n\nConclusion:\nall x (PoliceRelative(x) -> not Member(x, y) | not Pay(x)).\n\n###\n\nNote: The conclusion is based on the given rules and goals. It states that if a person is a police relative, they cannot be a member of multiple entities and pay health insurance premium at the same time. However, the rules do not explicitly state that a person cannot participate in health insurance at work when their spouse serves in the police. Therefore, the conclusion is based on the given information and may not fully answer the question.",
        "premises": [
            "all x, y (Member(x, y) & Entity(y, Article12) & Member(x, z) & Entity(z, Article12) -> FirstGroup(y)).",
            "all x (PublicServant(x) -> Pay(x)).",
            "all x (PoliceRelative(x) -> ReturnCard(x)).",
            "all x (ReturnCard(x) -> ReturnPremium(x)).",
            "all x (HealthInsurance(x) -> UseCard(x)).",
            "all x (UseCard(x) -> not Member(x, y) | not Member(x, z))."
        ],
        "conclusion": "Note: The conclusion is based on the given rules and goals. It states that if a person is a police relative, they cannot be a member of multiple entities and pay health insurance premium at the same time. However, the rules do not explicitly state that a person cannot participate in health insurance at work when their spouse serves in the police. Therefore, the conclusion is based on the given information and may not fully answer the question.",
        "id": "fa04eca7-4055-4299-9d44-093b8f7b206a"
    },
    {
        "raw": " ###\nPredicates:\nChangeResidence(x) | ReplaceCard(x) | ReissueCard(x) | LostCard(x) | NationalityRestored(x) | ApplyNewCard(x) | SubmitDocument(x) | RecoverCard(x) | GoToPolice(x) | CollectInfo(x) | PrintReceipt(x) | CollectFee(x) | IssueAppointment(x) | RetrieveCard(x) | SearchInfo(x) | ApproveApplication(x) | ReturnCard(x) | RegisterReturnAddress(x) | CoordinateDelivery(x) | PayCharges(x).\n\nExplanation:\nChangeResidence(x): x changes permanent residence.\nReplaceCard(x): x replaces Citizen Identification Card.\nReissueCard(x): x reissues Citizen Identification Card.\nLostCard(x): x has lost Citizen Identification Card.\nNationalityRestored(x): x has restored Vietnamese nationality.\nApplyNewCard(x): x applies for new Citizen Identification Card.\nSubmitDocument(x): x submits a copy of the competent agency's document.\nRecoverCard(x): x recovers used Citizen Identification Cards.\nGoToPolice(x): x goes to the police office.\nCollectInfo(x): x collects citizen information.\nPrintReceipt(x): x prints citizen identification information receipt slips.\nCollectFee(x): x collects fees.\nIssueAppointment(x): x issues appointment papers.\nRetrieveCard(x): x retrieves the ID card or Citizen Identity Card.\nSearchInfo(x): x searches for citizen identification information.\nApproveApplication(x): x approves applications for issuance, exchange, and reissuance of Citizen Identification Cards.\nReturnCard(x): x returns Citizen Identification Cards and results of issuance, exchange, and reissuance.\nRegisterReturnAddress(x): x registers for the return of citizen's identity cards to addresses requested by them.\nCoordinateDelivery(x): x coordinates with delivery service providers.\nPayCharges(x): x pays charges for delivery service.\n\nPremises:\nall x (ChangeResidence(x) -> ApplyNewCard(x)).\nall x (ReplaceCard(x) -> (LostCard(x) | NationalityRestored(x) | ChangeResidence(x) | SubmitDocument(x) | RecoverCard(x))).\nall x (ReissueCard(x) -> (ChangeResidence(x) | LostCard(x) | NationalityRestored(x))).\nall x (GoToPolice(x) -> (CollectInfo(x) | PrintReceipt(x) | CollectFee(x) | IssueAppointment(x) | RetrieveCard(x) | SearchInfo(x) | ApproveApplication(x) | ReturnCard(x) | RegisterReturnAddress(x) | CoordinateDelivery(x) | PayCharges(x))).\n\nConclusion:\nall x (ChangeResidence(x) -> ApplyNewCard(x)).",
        "premises": [
            "all x (ChangeResidence(x) -> ApplyNewCard(x)).",
            "all x (ReplaceCard(x) -> (LostCard(x) | NationalityRestored(x) | ChangeResidence(x) | SubmitDocument(x) | RecoverCard(x))).",
            "all x (ReissueCard(x) -> (ChangeResidence(x) | LostCard(x) | NationalityRestored(x))).",
            "all x (GoToPolice(x) -> (CollectInfo(x) | PrintReceipt(x) | CollectFee(x) | IssueAppointment(x) | RetrieveCard(x) | SearchInfo(x) | ApproveApplication(x) | ReturnCard(x) | RegisterReturnAddress(x) | CoordinateDelivery(x) | PayCharges(x)))."
        ],
        "conclusion": "all x (ChangeResidence(x) -> ApplyNewCard(x)).",
        "id": "3777135a-b0cb-4ea1-bee8-13a57c92d958"
    },
    {
        "raw": " Predicates:\nRegisterDeath(x, y) | Deceased(x) | LastPlaceOfResidence(x, y) | UnidentifiablePlace(x) | PlaceOfDeath(x, y) | BodyDiscovered(x, y) | PermanentResidence(x, y) | TemporaryResidence(x, y) | CurrentPlaceOfStay(x, y) | CommuneLevelPeopleCommittee(x) | CurrentRegulations(x) | PlaceOfResidence(x, y) | DeathRegistrationAllowed(x, y).\n\nExplanation:\nRegisterDeath(x, y): x registers the death of y.\nDeceased(x): x is deceased.\nLastPlaceOfResidence(x, y): y is the last place of residence of x.\nUnidentifiablePlace(x): the last place of residence of x is unidentifiable.\nPlaceOfDeath(x, y): x died in y.\nBodyDiscovered(x, y): the body of x was discovered in y.\nPermanentResidence(x, y): y is the permanent residence of x.\nTemporaryResidence(x, y): y is the temporary residence of x.\nCurrentPlaceOfStay(x, y): y is the current place of stay of x.\nCommuneLevelPeopleCommittee(x): x is a commune-level People's Committee.\nCurrentRegulations(x): x is according to current regulations.\nPlaceOfResidence(x, y): y is the place of residence of x.\nDeathRegistrationAllowed(x, y): death registration is allowed for x in y.\n\nPremises:\nall x all y (Deceased(x) & LastPlaceOfResidence(x, y) -> CommuneLevelPeopleCommittee(y) & RegisterDeath(y, x) & CurrentRegulations(RegisterDeath(y, x))).\nall x all y (Deceased(x) & UnidentifiablePlace(x) & PlaceOfDeath(x, y) -> CommuneLevelPeopleCommittee(y) & RegisterDeath(y, x) & CurrentRegulations(RegisterDeath(y, x))).\nall x all y (Deceased(x) & UnidentifiablePlace(x) & BodyDiscovered(x, y) -> CommuneLevelPeopleCommittee(y) & RegisterDeath(y, x) & CurrentRegulations(RegisterDeath(y, x))).\nall x (PlaceOfResidence(x) -> (PermanentResidence(x) | TemporaryResidence(x))).\nall x (UnidentifiablePlace(x) -> CurrentPlaceOfStay(x)).\nall x all y (Deceased(x) & TemporaryResidence(x, y) -> DeathRegistrationAllowed(x, y)).\n\nConclusion:\nall x all y (Deceased(x) & TemporaryResidence(x, y) -> CommuneLevelPeopleCommittee(y) & RegisterDeath(y, x) & CurrentRegulations(RegisterDeath(y, x))).",
        "premises": [
            "all x all y (Deceased(x) & LastPlaceOfResidence(x, y) -> CommuneLevelPeopleCommittee(y) & RegisterDeath(y, x) & CurrentRegulations(RegisterDeath(y, x))).",
            "all x all y (Deceased(x) & UnidentifiablePlace(x) & PlaceOfDeath(x, y) -> CommuneLevelPeopleCommittee(y) & RegisterDeath(y, x) & CurrentRegulations(RegisterDeath(y, x))).",
            "all x all y (Deceased(x) & UnidentifiablePlace(x) & BodyDiscovered(x, y) -> CommuneLevelPeopleCommittee(y) & RegisterDeath(y, x) & CurrentRegulations(RegisterDeath(y, x))).",
            "all x (PlaceOfResidence(x) -> (PermanentResidence(x) | TemporaryResidence(x))).",
            "all x (UnidentifiablePlace(x) -> CurrentPlaceOfStay(x)).",
            "all x all y (Deceased(x) & TemporaryResidence(x, y) -> DeathRegistrationAllowed(x, y))."
        ],
        "conclusion": "all x all y (Deceased(x) & TemporaryResidence(x, y) -> CommuneLevelPeopleCommittee(y) & RegisterDeath(y, x) & CurrentRegulations(RegisterDeath(y, x))).",
        "id": "80e16e72-c33f-4904-940e-453ebbd7490e"
    },
    {
        "raw": " Predicates:\nApplySelfPrintedInvoices(x) | RequireAccountingSoftware(x) | AssociateWithSaleSoftware(x) | IssueDecision(x) | ManagingTaxOffice(x) | Responsibility(x) | AutomaticNumbering(x) | PrintOnce(x) | PrintCopy(x) | InvoicePrintingSoftware(x) | SatisfyConfidentiality(x) | DecentralizeUseRight(x) | UnauthorizedIntervention(x) | ApprovalByTaxOffice(x).\n\nExplanation:\nApplySelfPrintedInvoices(x): x applies self-printed invoices.\nRequireAccountingSoftware(x): x requires accounting software.\nAssociateWithSaleSoftware(x): x associates with sale software.\nIssueDecision(x): x issues a decision.\nManagingTaxOffice(x): x is a managing tax office.\nResponsibility(x): x has responsibility.\nAutomaticNumbering(x): x has automatic numbering.\nPrintOnce(x): x is printed once.\nPrintCopy(x): x is printed as a copy.\nInvoicePrintingSoftware(x): x is invoice-printing software.\nSatisfyConfidentiality(x): x satisfies confidentiality requirements.\nDecentralizeUseRight(x): x decentralizes the use right to users.\nUnauthorizedIntervention(x): x involves unauthorized intervention.\nApprovalByTaxOffice(x): x has approval by tax offices.\n\nPremises:\nall x (ApplySelfPrintedInvoices(x) & ApplySelfPrintedInvoicesSpecifiedAtPointA(x) -> ~RequireAccountingSoftware(x)).\nall x (ApplySelfPrintedInvoices(x) & ApplySelfPrintedInvoicesSpecifiedAtPointB(x) -> RequireAccountingSoftware(x) & AssociateWithSaleSoftware(x)).\nall x (IssueDecision(x) -> ManagingTaxOffice(x) & Responsibility(x)).\nall x (InvoicePrintingSoftware(x) -> AutomaticNumbering(x) & (PrintOnce(x) | PrintCopy(x))).\nall x (InvoicePrintingSoftware(x) -> SatisfyConfidentiality(x) & DecentralizeUseRight(x) & ~UnauthorizedIntervention(x)).\n\nConclusion:\n~all x (InvoicePrintingSoftware(x) -> ApprovalByTaxOffice(x)).",
        "premises": [
            "all x (ApplySelfPrintedInvoices(x) & ApplySelfPrintedInvoicesSpecifiedAtPointA(x) -> ~RequireAccountingSoftware(x)).",
            "all x (ApplySelfPrintedInvoices(x) & ApplySelfPrintedInvoicesSpecifiedAtPointB(x) -> RequireAccountingSoftware(x) & AssociateWithSaleSoftware(x)).",
            "all x (IssueDecision(x) -> ManagingTaxOffice(x) & Responsibility(x)).",
            "all x (InvoicePrintingSoftware(x) -> AutomaticNumbering(x) & (PrintOnce(x) | PrintCopy(x))).",
            "all x (InvoicePrintingSoftware(x) -> SatisfyConfidentiality(x) & DecentralizeUseRight(x) & ~UnauthorizedIntervention(x))."
        ],
        "conclusion": "~all x (InvoicePrintingSoftware(x) -> ApprovalByTaxOffice(x)).",
        "id": "39cee6c8-c086-4a40-88fb-03f281469e5e"
    },
    {
        "raw": " Predicates:\nOrganization(x) | Enterprise(x) | BusinessActivity(x) | BusinessHousehold(x) | Individual(x) | ExtraSmallEnterprise(x) | DifficultArea(x) | Eligible(x) | SelfPrint(x) | BuyInvoice(x) | TaxOffice(x) | Clause1(x) | Article11(x) | Circular(x).\n\nExplanation:\nOrganization(x): x is an organization.\nEnterprise(x): x is an enterprise.\nBusinessActivity(x): x has business activities.\nBusinessHousehold(x): x is a business household.\nIndividual(x): x is an individual.\nExtraSmallEnterprise(x): x is an extra-small enterprise.\nDifficultArea(x): x is in a geographical area with difficult or extremely difficult socio-economic conditions.\nEligible(x): x is eligible.\nSelfPrint(x): x can self-print invoices.\nBuyInvoice(x): x can buy invoices from tax offices.\nTaxOffice(x): x is a tax office.\nClause1(x): x is under Clause 1.\nArticle11(x): x is under Article 11.\nCircular(x): x is a circular.\n\nPremises:\nall x (Organization(x) & ~Enterprise(x) & BusinessActivity(x) & ~Eligible(x) -> BuyInvoice(x)).\nall x (BusinessHousehold(x) & ~Eligible(x) -> BuyInvoice(x)).\nall x (Individual(x) & ~Eligible(x) -> BuyInvoice(x)).\nall x (ExtraSmallEnterprise(x) & DifficultArea(x) & ~Eligible(x) -> BuyInvoice(x)).\nall x (BuyInvoice(x) -> exists y (TaxOffice(y) & Clause1(y) & Article11(y) & Circular(y))).\n\nConclusion:\nall x (~SelfPrint(x) -> exists y (TaxOffice(y) & BuyInvoice(x))).",
        "premises": [
            "all x (Organization(x) & ~Enterprise(x) & BusinessActivity(x) & ~Eligible(x) -> BuyInvoice(x)).",
            "all x (BusinessHousehold(x) & ~Eligible(x) -> BuyInvoice(x)).",
            "all x (Individual(x) & ~Eligible(x) -> BuyInvoice(x)).",
            "all x (ExtraSmallEnterprise(x) & DifficultArea(x) & ~Eligible(x) -> BuyInvoice(x)).",
            "all x (BuyInvoice(x) -> exists y (TaxOffice(y) & Clause1(y) & Article11(y) & Circular(y)))."
        ],
        "conclusion": "all x (~SelfPrint(x) -> exists y (TaxOffice(y) & BuyInvoice(x))).",
        "id": "84996f9b-d0fe-4f40-a860-cb6537aa06e6"
    },
    {
        "raw": " ###\nPredicates:\nCreateInvoice(x) | UseInvoice(x) | OrderedInvoice(x) | ElectronicInvoice(x) | Organization(x) | SimultaneousUse(x) | Possible(x) | Company(x).\n\nExplanation:\nCreateInvoice(x): x creates invoices.\nUseInvoice(x): x uses invoices.\nOrderedInvoice(x): x is an ordered invoice.\nElectronicInvoice(x): x is an electronic invoice.\nOrganization(x): x is an organization.\nSimultaneousUse(x): x can be used simultaneously.\nPossible(x): x is possible.\nCompany(x): x is a company.\n\nPremises:\nall x (CreateInvoice(x) -> SimultaneousUse(x)).\nall x (Organization(x) -> (UseInvoice(x) & SimultaneousUse(x))).\nall x (SimultaneousUse(x) -> (OrderedInvoice(x) & ElectronicInvoice(x))).\nall x (Company(x) -> Organization(x)).\n\nConclusion:\nall x (Company(x) -> Possible(x)).\n\nNote: The conclusion states that it is possible for any company to use both print invoices and electronic invoices simultaneously, based on the given rules.",
        "premises": [
            "all x (CreateInvoice(x) -> SimultaneousUse(x)).",
            "all x (Organization(x) -> (UseInvoice(x) & SimultaneousUse(x))).",
            "all x (SimultaneousUse(x) -> (OrderedInvoice(x) & ElectronicInvoice(x))).",
            "all x (Company(x) -> Organization(x))."
        ],
        "conclusion": "Note: The conclusion states that it is possible for any company to use both print invoices and electronic invoices simultaneously, based on the given rules.",
        "id": "133acf38-3607-43eb-9f2d-70c6898e4a59"
    },
    {
        "raw": " ###\nPredicates:\nEarnIncome(x) | Authorize(x, y) | RegisterTax(x) | Employer(x) | Employee(x) | IncomeFromSalariesOrWages(x) | ProvideDocuments(x) | Dependant(x) | TaxpayerRegistration(x) | DependantRegistration(x) | SimultaneouslyPayTax(x) | NotifyTIN(x) | IncomePayingAgency(x) | Entitled(x, y).\n\nExplanation:\nEarnIncome(x): x earns income.\nAuthorize(x, y): x authorizes y.\nRegisterTax(x): x registers for tax.\nEmployer(x): x is an employer.\nEmployee(x): x is an employee.\nIncomeFromSalariesOrWages(x): x earns income from salaries or wages.\nProvideDocuments(x): x provides documents.\nDependant(x): x is a dependant.\nTaxpayerRegistration(x): x is taxpayer registration.\nDependantRegistration(x): x is dependant registration.\nSimultaneouslyPayTax(x): x simultaneously pays personal income tax.\nNotifyTIN(x): x notifies TIN.\nIncomePayingAgency(x): x is an income-paying agency.\nEntitled(x, y): x is entitled to y.\n\nPremises:\nall x (IncomeFromSalariesOrWages(x) -> (Employer(x) & Employee(x))).\nall x, y (Employer(x) & Employee(y) & Authorize(y, x) -> RegisterTax(x)).\nall x, y (Employer(x) & Employee(y) & ProvideDocuments(y) -> (TaxpayerRegistration(x) & DependantRegistration(x))).\nall x (SimultaneouslyPayTax(x) -> IncomePayingAgency(x)).\nall x (IncomePayingAgency(x) -> NotifyTIN(x)).\n\nConclusion:\nEntitled(Employee, AuthorizeWorkTeamToPayPersonalTax).\n\nNote: The conclusion is not in Prover9 format, as the question is asking for entitlement, which is not a predicate that can be proven true or false in Prover9. The conclusion represents the goal of the problem, which is to determine if the employee is entitled to authorize the work team to pay personal tax.",
        "premises": [
            "all x (IncomeFromSalariesOrWages(x) -> (Employer(x) & Employee(x))).",
            "all x, y (Employer(x) & Employee(y) & Authorize(y, x) -> RegisterTax(x)).",
            "all x, y (Employer(x) & Employee(y) & ProvideDocuments(y) -> (TaxpayerRegistration(x) & DependantRegistration(x))).",
            "all x (SimultaneouslyPayTax(x) -> IncomePayingAgency(x)).",
            "all x (IncomePayingAgency(x) -> NotifyTIN(x))."
        ],
        "conclusion": "Note: The conclusion is not in Prover9 format, as the question is asking for entitlement, which is not a predicate that can be proven true or false in Prover9. The conclusion represents the goal of the problem, which is to determine if the employee is entitled to authorize the work team to pay personal tax.",
        "id": "f9a2c172-ef1b-4839-9c9a-032d4485a0ad"
    },
    {
        "raw": " Explanation:\nTaxpayer(x): x is a taxpayer.\nEnterprise(x): x is an enterprise.\nBusinessEntity(x): x is a business entity.\nOtherEntity(x): x is another entity.\nHouseholdBusiness(x): x is a household business.\nRegisteredAddress(x): x has a registered address.\nNotOperate(x): x does not operate at the registered address.\nRevocationDecision(x): x has a decision on revocation of the certificate of enterprise registration or certificate of household business registration.\nLicenseRevocation(x): x has a document on revocations of the license for establishment.\nNotification(x): x has received a notification from the tax authority.\nCommitment(x): x has made a commitment to fulfill tax liabilities.\nRestored(x): x is restored.\n\nPremises:\nall x (Taxpayer(x) & (Enterprise(x) | BusinessEntity(x) | OtherEntity(x) | HouseholdBusiness(x)) & RegisteredAddress(x) & NotOperate(x) & ~RevocationDecision(x) & ~LicenseRevocation(x) -> Commitment(x)).\nall x (Commitment(x) & Notification(x) -> Restored(x)).\n\nConclusion:\nall x (Taxpayer(x) & (Enterprise(x) | BusinessEntity(x) | OtherEntity(x) | HouseholdBusiness(x)) & RegisteredAddress(x) & NotOperate(x) & ~RevocationDecision(x) & ~LicenseRevocation(x) & Notification(x) -> Restored(x)).",
        "premises": [
            "all x (Taxpayer(x) & (Enterprise(x) | BusinessEntity(x) | OtherEntity(x) | HouseholdBusiness(x)) & RegisteredAddress(x) & NotOperate(x) & ~RevocationDecision(x) & ~LicenseRevocation(x) -> Commitment(x)).",
            "all x (Commitment(x) & Notification(x) -> Restored(x))."
        ],
        "conclusion": "all x (Taxpayer(x) & (Enterprise(x) | BusinessEntity(x) | OtherEntity(x) | HouseholdBusiness(x)) & RegisteredAddress(x) & NotOperate(x) & ~RevocationDecision(x) & ~LicenseRevocation(x) & Notification(x) -> Restored(x)).",
        "id": "38693347-2dba-4022-8e4c-67c5211b8da6"
    },
    {
        "raw": " ###\nPredicates:\nReactivate(x) | Request(x) | ResumeOperation(x) | TIN(x) | BusinessEntity(x) | OtherEntity(x) | HouseholdBusiness(x) | SubmitApplication(x) | TICDeactivation(x) | Notification(x) | TTCDeactivate(x) | Wish(x) | TID(x) | Restore(x).\n\nExplanation:\nReactivate(x): x is reactivated.\nRequest(x): x requests.\nResumeOperation(x): x resumes operation.\nTIN(x): x is a tax identification number.\nBusinessEntity(x): x is a business entity.\nOtherEntity(x): x is another entity.\nHouseholdBusiness(x): x is a household business.\nSubmitApplication(x): x submits an application.\nTICDeactivation(x): x is a tax identification certificate deactivation.\nNotification(x): x is a notification.\nTTCDeactivate(x): x is a tax authority's decision to deactivate.\nWish(x): x wishes.\nTID(x): x is a tax identification number.\nRestore(x): x is restored.\n\nPremises:\nall x (Reactivate(x) <-> (Request(x) & ResumeOperation(x))).\nall x (BusinessEntity(x) | OtherEntity(x) | HouseholdBusiness(x)).\nall x (SubmitApplication(x) -> TICDeactivation(x)).\nall x (Wish(x) -> ResumeOperation(x)).\nall x (TID(x) -> TIN(x)).\nall x (Reactivate(x) -> Restore(x)).\n\nConclusion:\nall x (Request(x) & ResumeOperation(x) -> Restore(x)).",
        "premises": [
            "all x (Reactivate(x) <-> (Request(x) & ResumeOperation(x))).",
            "all x (BusinessEntity(x) | OtherEntity(x) | HouseholdBusiness(x)).",
            "all x (SubmitApplication(x) -> TICDeactivation(x)).",
            "all x (Wish(x) -> ResumeOperation(x)).",
            "all x (TID(x) -> TIN(x)).",
            "all x (Reactivate(x) -> Restore(x))."
        ],
        "conclusion": "all x (Request(x) & ResumeOperation(x) -> Restore(x)).",
        "id": "c15cda2d-998a-413a-b925-111c720100ad"
    },
    {
        "raw": " ###\nPredicates:\nRegularEntry(x) | WorkPurpose(x) | Entitled(x, y) | DutyFreeLuggage(x) | DutyExemptLuggage(x) | AircraftOperator(x) | FlightAttendant(x) | InternationalFlight(x) | TrainOperator(x) | TrainAttendant(x) | InternationalTrain(x) | Officer(x) | CrewMember(x) | SeagoingShip(x) | VietnameseDriver(x) | Worker(x) | NeighboringCountry(x) | VietnamLandBorder(x) | PrimeMinisterDecision(x) | SellHandLuggage(x) | CustomsTax(x) | TaxEvasion(x).\n\nExplanation:\nRegularEntry(x): x regularly enters Vietnam.\nWorkPurpose(x): x enters Vietnam for work purposes.\nEntitled(x, y): x is entitled to y.\nDutyFreeLuggage(x): x is duty-free luggage.\nDutyExemptLuggage(x): x is duty-exempt luggage.\nAircraftOperator(x): x is an aircraft operator.\nFlightAttendant(x): x is a flight attendant.\nInternationalFlight(x): x is an international flight.\nTrainOperator(x): x is a train operator.\nTrainAttendant(x): x is a train attendant.\nInternationalTrain(x): x is an international train.\nOfficer(x): x is an officer.\nCrewMember(x): x is a crew member.\nSeagoingShip(x): x is a seagoing ship.\nVietnameseDriver(x): x is a Vietnamese driver.\nWorker(x): x is a worker.\nNeighboringCountry(x): x is a neighboring country.\nVietnamLandBorder(x): x is Vietnam's land border.\nPrimeMinisterDecision(x): x is subject to the Prime Minister's Decision.\nSellHandLuggage(x): x sells hand luggage.\nCustomsTax(x): x is a customs tax.\nTaxEvasion(x): x is tax evasion.\n\nPremises:\nall x (RegularEntry(x) & WorkPurpose(x) -> ~Entitled(x, DutyFreeLuggage(x))).\nall x (RegularEntry(x) & WorkPurpose(x) -> Entitled(x, DutyExemptLuggage(x))).\nall x (AircraftOperator(x) & FlightAttendant(x) & InternationalFlight(x) -> Entitled(x, DutyExemptLuggage(x))).\nall x (TrainOperator(x) & TrainAttendant(x) & InternationalTrain(x) -> Entitled(x, DutyExemptLuggage(x))).\nall x (Officer(x) & CrewMember(x) & SeagoingShip(x) -> Entitled(x, DutyExemptLuggage(x))).\nall x (VietnameseDriver(x) & Worker(x) & NeighboringCountry(x) & VietnamLandBorder(x) -> Entitled(x, DutyExemptLuggage(x))).\nall x (Entitled(x, DutyExemptLuggage(x)) -> PrimeMinisterDecision(x)).\nall x (SellHandLuggage(x) & ~CustomsTax(x) -> TaxEvasion(x)).\n\nConclusion:\nall x (SellHandLuggage(x) & ~CustomsTax(x) -> TaxEvasion(x)).",
        "premises": [
            "all x (RegularEntry(x) & WorkPurpose(x) -> ~Entitled(x, DutyFreeLuggage(x))).",
            "all x (RegularEntry(x) & WorkPurpose(x) -> Entitled(x, DutyExemptLuggage(x))).",
            "all x (AircraftOperator(x) & FlightAttendant(x) & InternationalFlight(x) -> Entitled(x, DutyExemptLuggage(x))).",
            "all x (TrainOperator(x) & TrainAttendant(x) & InternationalTrain(x) -> Entitled(x, DutyExemptLuggage(x))).",
            "all x (Officer(x) & CrewMember(x) & SeagoingShip(x) -> Entitled(x, DutyExemptLuggage(x))).",
            "all x (VietnameseDriver(x) & Worker(x) & NeighboringCountry(x) & VietnamLandBorder(x) -> Entitled(x, DutyExemptLuggage(x))).",
            "all x (Entitled(x, DutyExemptLuggage(x)) -> PrimeMinisterDecision(x)).",
            "all x (SellHandLuggage(x) & ~CustomsTax(x) -> TaxEvasion(x))."
        ],
        "conclusion": "all x (SellHandLuggage(x) & ~CustomsTax(x) -> TaxEvasion(x)).",
        "id": "6473199d-f793-4959-81c2-21226cb73cc9"
    },
    {
        "raw": " ###\nPredicates:\nRevenue(x) | Taxpayer(x) | Businessperson(x) | Resident(x) | Independent(x) | Licensed(x) | BusinessDomain(x) | Trade(x) | LotteryAgent(x) | InsuranceAgent(x) | MultiLevelMarketingAgent(x) | Contract(x) | BusinessCooperation(x) | AgriculturalProduction(x) | Trading(x) | ForestryProduction(x) | SaltMaking(x) | Aquaculture(x) | Fishing(x) | TaxExemption(x) | Turnover(x) | PersonalIncomeTax(x) | FlatTax(x) | Subsidies(x) | LocalTrades(x).\n\nExplanation:\nRevenue(x): x has a revenue.\nTaxpayer(x): x is a taxpayer.\nBusinessperson(x): x is a businessperson.\nResident(x): x is a resident.\nIndependent(x): x practices independently.\nLicensed(x): x is licensed.\nBusinessDomain(x): x is a business domain.\nTrade(x): x is a trade.\nLotteryAgent(x): x is a lottery agent.\nInsuranceAgent(x): x is an insurance agent.\nMultiLevelMarketingAgent(x): x is a multi-level marketing agent.\nContract(x): x has a contract.\nBusinessCooperation(x): x has business cooperation with organizations.\nAgriculturalProduction(x): x is agricultural production.\nTrading(x): x is trading.\nForestryProduction(x): x is forestry production.\nSaltMaking(x): x is salt making.\nAquaculture(x): x is aquaculture.\nFishing(x): x is fishing.\nTaxExemption(x): x is tax-exempt.\nTurnover(x): x has a turnover.\nPersonalIncomeTax(x): x is liable to personal income tax.\nFlatTax(x): x pays a flat tax.\nSubsidies(x): x has subsidies.\nLocalTrades(x): x is related to local trades.\n\nPremises:\nall x (Taxpayer(x) <-> (Businessperson(x) & Resident(x))).\nall x (Businessperson(x) <-> (Independent(x) | LotteryAgent(x) | InsuranceAgent(x) | MultiLevelMarketingAgent(x) | BusinessCooperation(x) | AgriculturalProduction(x) | Trading(x) | ForestryProduction(x) | SaltMaking(x) | Aquaculture(x) | Fishing(x))).\nall x (Independent(x) <-> (Licensed(x) & (BusinessDomain(x) | Trade(x)))).\nall x (LotteryAgent(x) <-> Contract(x)).\nall x (InsuranceAgent(x) <-> Contract(x)).\nall x (MultiLevelMarketingAgent(x) <-> Contract(x)).\nall x (BusinessCooperation(x) <-> Contract(x)).\nall x (AgriculturalProduction(x) & Trading(x) <-> ~TaxExemption(x)).\nall x (ForestryProduction(x) & Trading(x) <-> ~TaxExemption(x)).\nall x (SaltMaking(x) & Trading(x) <-> ~TaxExemption(x)).\nall x (Aquaculture(x) & Trading(x) <-> ~TaxExemption(x)).\nall x (Fishing(x) & Trading(x) <-> ~TaxExemption(x)).\nall x (Turnover(x) > 100,000,000 -> FlatTax(x)).\nall x (Turnover(x) <= 100,000,000 -> ~PersonalIncomeTax(x)).\nall x (Subsidies(x) <-> LocalTrades(x)).\n\nConclusion:\nall x (SellingGroceriesAtHome(x) -> Taxes(x)).\n\nNote: The conclusion is based on the assumption that selling groceries at home is considered as trading, and it does not meet the conditions for tax exemption. However, the exact tax liability would depend on the specific circumstances, such as the turnover and the applicable tax rates.",
        "premises": [
            "all x (Taxpayer(x) <-> (Businessperson(x) & Resident(x))).",
            "all x (Businessperson(x) <-> (Independent(x) | LotteryAgent(x) | InsuranceAgent(x) | MultiLevelMarketingAgent(x) | BusinessCooperation(x) | AgriculturalProduction(x) | Trading(x) | ForestryProduction(x) | SaltMaking(x) | Aquaculture(x) | Fishing(x))).",
            "all x (Independent(x) <-> (Licensed(x) & (BusinessDomain(x) | Trade(x)))).",
            "all x (LotteryAgent(x) <-> Contract(x)).",
            "all x (InsuranceAgent(x) <-> Contract(x)).",
            "all x (MultiLevelMarketingAgent(x) <-> Contract(x)).",
            "all x (BusinessCooperation(x) <-> Contract(x)).",
            "all x (AgriculturalProduction(x) & Trading(x) <-> ~TaxExemption(x)).",
            "all x (ForestryProduction(x) & Trading(x) <-> ~TaxExemption(x)).",
            "all x (SaltMaking(x) & Trading(x) <-> ~TaxExemption(x)).",
            "all x (Aquaculture(x) & Trading(x) <-> ~TaxExemption(x)).",
            "all x (Fishing(x) & Trading(x) <-> ~TaxExemption(x)).",
            "all x (Turnover(x) > 100,000,000 -> FlatTax(x)).",
            "all x (Turnover(x) <= 100,000,000 -> ~PersonalIncomeTax(x)).",
            "all x (Subsidies(x) <-> LocalTrades(x))."
        ],
        "conclusion": "Note: The conclusion is based on the assumption that selling groceries at home is considered as trading, and it does not meet the conditions for tax exemption. However, the exact tax liability would depend on the specific circumstances, such as the turnover and the applicable tax rates.",
        "id": "52c3e0e4-7096-44e3-bb8a-6cb0010fcd38"
    },
    {
        "raw": " ###\nPredicates:\nCircular(x) | Article(x) | Goods(x) | Liable(x) | ExciseTax(x) | Bring(x) | Sale(x) | OverseasFair(x) | Establishment(x) | Procedure(x) | Invitation(x) | Registration(x) | Export(x) | Declaration(x) | Certification(x) | List(x) | MoneyPayment(x) | Value(x) | Cash(x) | Remittance(x) | Bank(x) | Liquor(x) | TaxFree(x) | Qualify(x) | Document(x).\n\nExplanation:\nCircular(x): x is a circular.\nArticle(x): x is an article.\nGoods(x): x is a good.\nLiable(x): x is liable.\nExciseTax(x): x is an excise tax.\nBring(x): x brings goods abroad.\nSale(x): x sells goods.\nOverseasFair(x): x is an overseas fair.\nEstablishment(x): x is an establishment.\nProcedure(x): x is a procedure.\nInvitation(x): x is an invitation.\nRegistration(x): x is a registration.\nExport(x): x exports goods.\nDeclaration(x): x is a declaration.\nCertification(x): x is a certification.\nList(x): x is a list.\nMoneyPayment(x): x is a money payment.\nValue(x): x is a value.\nCash(x): x is cash.\nRemittance(x): x is a remittance.\nBank(x): x is a bank.\nLiquor(x): x is liquor.\nTaxFree(x): x is tax-free.\nQualify(x): x qualifies.\nDocument(x): x is a document.\n\nPremises:\nCircular(x) -> Article(x).\nArticle(x) -> Goods(x).\nGoods(x) -> (Liable(x) | ExciseTax(x)).\nBring(x) -> Sale(x).\nSale(x) -> OverseasFair(x).\nEstablishment(x) -> Procedure(x).\nProcedure(x) -> (Invitation(x) | Registration(x)).\nExport(x) -> Declaration(x).\nDeclaration(x) -> Certification(x).\nSale(x) -> List(x).\nSale(x) -> MoneyPayment(x).\nValue(x) -> Cash(x).\nRemittance(x) -> Bank(x).\nLiquor(x) -> TaxFree(x).\nQualify(x) -> Document(x).\n\nConclusion:\nSale(x) -> TaxFree(x).",
        "premises": [
            "Circular(x) -> Article(x).",
            "Article(x) -> Goods(x).",
            "Goods(x) -> (Liable(x) | ExciseTax(x)).",
            "Bring(x) -> Sale(x).",
            "Sale(x) -> OverseasFair(x).",
            "Establishment(x) -> Procedure(x).",
            "Procedure(x) -> (Invitation(x) | Registration(x)).",
            "Export(x) -> Declaration(x).",
            "Declaration(x) -> Certification(x).",
            "Sale(x) -> List(x).",
            "Sale(x) -> MoneyPayment(x).",
            "Value(x) -> Cash(x).",
            "Remittance(x) -> Bank(x).",
            "Liquor(x) -> TaxFree(x).",
            "Qualify(x) -> Document(x)."
        ],
        "conclusion": "Sale(x) -> TaxFree(x).",
        "id": "2fa34069-cac5-4419-9da6-8d84ab0710e9"
    },
    {
        "raw": " ###\nPredicates:\nTaxpayer(x) | Determine(x) | MonthlyDeclaration(x) | QuarterlyDeclaration(x) | TaxDeclaration(x) | VATDeclaration(x) | Company(x).\n\nExplanation:\nTaxpayer(x): x is a taxpayer.\nDetermine(x): x determines their own tax declaration frequency.\nMonthlyDeclaration(x): x makes monthly tax declarations.\nQuarterlyDeclaration(x): x makes quarterly tax declarations.\nTaxDeclaration(x): x makes a tax declaration.\nVATDeclaration(x): x makes a VAT declaration.\nCompany(x): x is a company.\n\nPremises:\nall x (Taxpayer(x) -> Determine(x)).\nall x (Determine(x) -> (MonthlyDeclaration(x) | QuarterlyDeclaration(x))).\nall x (MonthlyDeclaration(x) -> TaxDeclaration(x)).\nall x (QuarterlyDeclaration(x) -> TaxDeclaration(x)).\nall x (Company(x) -> Taxpayer(x)).\nall x (VATDeclaration(x) -> TaxDeclaration(x)).\n\nConclusion:\nexists x (Company(x) & VATDeclaration(x) & QuarterlyDeclaration(x)).",
        "premises": [
            "all x (Taxpayer(x) -> Determine(x)).",
            "all x (Determine(x) -> (MonthlyDeclaration(x) | QuarterlyDeclaration(x))).",
            "all x (MonthlyDeclaration(x) -> TaxDeclaration(x)).",
            "all x (QuarterlyDeclaration(x) -> TaxDeclaration(x)).",
            "all x (Company(x) -> Taxpayer(x)).",
            "all x (VATDeclaration(x) -> TaxDeclaration(x))."
        ],
        "conclusion": "exists x (Company(x) & VATDeclaration(x) & QuarterlyDeclaration(x)).",
        "id": "b97c3e4f-6c35-4e68-923e-c6823c7c63de"
    },
    {
        "raw": " ###\nPredicates:\nBusinessEstablishment(x) | FullyCompliant(x) | AnnualRevenue(x, y) | VND(x) | Operating(x) | SellingGoods(x) | ProvidingServices(x) | SubjectToVAT(x) | VoluntarilyRegister(x) | TaxCreditMethod(x) | DirectCalculationMethod(x) | ForeignOrganization(x) | ForeignIndividual(x) | Prospecting(x) | NewEnterprise(x) | InvestmentProject(x) | ApprovedByAuthority(x) | InvestmentPlan(x) | ApprovedByCompetentPerson(x) | InvestmentDecision(x) | LeaseContract(x) | MainContract(x) | Subcontract(x) | RecordInputOutputVAT(x) | EligibleForTaxDeductionMethod(x).\n\nExplanation:\nBusinessEstablishment(x): x is a business establishment.\nFullyCompliant(x): x has fully complied with regulations.\nAnnualRevenue(x, y): x has an annual revenue of y.\nVND(x): x is in Vietnamese Dong.\nOperating(x): x is operating.\nSellingGoods(x): x is selling goods.\nProvidingServices(x): x is providing services.\nSubjectToVAT(x): x is subject to VAT.\nVoluntarilyRegister(x): x has voluntarily registered.\nTaxCreditMethod(x): x uses the tax credit method.\nDirectCalculationMethod(x): x uses the direct calculation method.\nForeignOrganization(x): x is a foreign organization.\nForeignIndividual(x): x is a foreign individual.\nProspecting(x): x is prospecting.\nNewEnterprise(x): x is a new enterprise.\nInvestmentProject(x): x is an investment project.\nApprovedByAuthority(x): x is approved by a competent authority.\nInvestmentPlan(x): x has an investment plan.\nApprovedByCompetentPerson(x): x is approved by a competent person.\nInvestmentDecision(x): x has an investment decision.\nLeaseContract(x): x has a lease contract.\nMainContract(x): x has a main contract.\nSubcontract(x): x has a subcontract.\nRecordInputOutputVAT(x): x can record input and output VAT.\nEligibleForTaxDeductionMethod(x): x is eligible for the tax deduction method.\n\nPremises:\nall x (BusinessEstablishment(x) & FullyCompliant(x) & AnnualRevenue(x, y) & VND(y) & y >= 1000000000 & Operating(x) & (SellingGoods(x) | ProvidingServices(x)) & SubjectToVAT(x) & ~DirectCalculationMethod(x) -> TaxCreditMethod(x)).\nall x (BusinessEstablishment(x) & VoluntarilyRegister(x) & TaxCreditMethod(x) & ~DirectCalculationMethod(x) -> TaxCreditMethod(x)).\nall x (ForeignOrganization(x) | ForeignIndividual(x) & ProvidingServices(x) & Prospecting(x) -> TaxCreditMethod(x)).\nall x (BusinessEstablishment(x) & AnnualRevenue(x, y) & VND(y) & y < 1000000000 & Operating(x) & (SellingGoods(x) | ProvidingServices(x)) & SubjectToVAT(x) & FullyCompliant(x) -> TaxCreditMethod(x)).\nall x (NewEnterprise(x) & InvestmentProject(x) & ApprovedByAuthority(x) & VoluntarilyRegister(x) & TaxCreditMethod(x) -> TaxCreditMethod(x)).\nall x (NewEnterprise(x) & InvestmentPlan(x) & ApprovedByCompetentPerson(x) & InvestmentDecision(x) & VoluntarilyRegister(x) & TaxCreditMethod(x) -> TaxCreditMethod(x)).\nall x (NewEnterprise(x) & LeaseContract(x) & VoluntarilyRegister(x) & TaxCreditMethod(x) -> TaxCreditMethod(x)).\nall x (ForeignOrganization(x) | ForeignIndividual(x) & MainContract(x) & Subcontract(x) & ProvidingServices(x) -> TaxCreditMethod(x)).\nall x (BusinessEstablishment(x) & RecordInputOutputVAT(x) & ~Enterprise(x) & ~Cooperative(x) -> TaxCreditMethod(x)).\n\nConclusion:\nall x (BusinessEstablishment(x) & FullyCompliant(x) & (AnnualRevenue(x, y) & VND(y) & y >= 1000000000 | VoluntarilyRegister(x) & ~DirectCalculationMethod(x) | ForeignOrganization(x) | ForeignIndividual(x) & ProvidingServices(x) & Prospecting(x) | AnnualRevenue(x, y) & VND(y) & y < 1000000000 & Operating(x) & (SellingGoods(x) | ProvidingServices(x)) & SubjectToVAT(x) & FullyCompliant(x) | InvestmentProject(x) & ApprovedByAuthority(x) & VoluntarilyRegister(x) & TaxCreditMethod(x) | InvestmentPlan(x) & ApprovedByCompetentPerson(x) & InvestmentDecision(x) & VoluntarilyRegister(x) & TaxCreditMethod(x) | LeaseContract(x) & VoluntarilyRegister(x) & TaxCreditMethod(x) | ForeignOrganization(x) | ForeignIndividual(x) & MainContract(x) & Subcontract(x) & ProvidingServices(x) | RecordInputOutputVAT(x) & ~Enterprise(x) & ~Cooperative(x)) -> EligibleForTaxDeductionMethod(x)).",
        "premises": [
            "all x (BusinessEstablishment(x) & FullyCompliant(x) & AnnualRevenue(x, y) & VND(y) & y >= 1000000000 & Operating(x) & (SellingGoods(x) | ProvidingServices(x)) & SubjectToVAT(x) & ~DirectCalculationMethod(x) -> TaxCreditMethod(x)).",
            "all x (BusinessEstablishment(x) & VoluntarilyRegister(x) & TaxCreditMethod(x) & ~DirectCalculationMethod(x) -> TaxCreditMethod(x)).",
            "all x (ForeignOrganization(x) | ForeignIndividual(x) & ProvidingServices(x) & Prospecting(x) -> TaxCreditMethod(x)).",
            "all x (BusinessEstablishment(x) & AnnualRevenue(x, y) & VND(y) & y < 1000000000 & Operating(x) & (SellingGoods(x) | ProvidingServices(x)) & SubjectToVAT(x) & FullyCompliant(x) -> TaxCreditMethod(x)).",
            "all x (NewEnterprise(x) & InvestmentProject(x) & ApprovedByAuthority(x) & VoluntarilyRegister(x) & TaxCreditMethod(x) -> TaxCreditMethod(x)).",
            "all x (NewEnterprise(x) & InvestmentPlan(x) & ApprovedByCompetentPerson(x) & InvestmentDecision(x) & VoluntarilyRegister(x) & TaxCreditMethod(x) -> TaxCreditMethod(x)).",
            "all x (NewEnterprise(x) & LeaseContract(x) & VoluntarilyRegister(x) & TaxCreditMethod(x) -> TaxCreditMethod(x)).",
            "all x (ForeignOrganization(x) | ForeignIndividual(x) & MainContract(x) & Subcontract(x) & ProvidingServices(x) -> TaxCreditMethod(x)).",
            "all x (BusinessEstablishment(x) & RecordInputOutputVAT(x) & ~Enterprise(x) & ~Cooperative(x) -> TaxCreditMethod(x))."
        ],
        "conclusion": "all x (BusinessEstablishment(x) & FullyCompliant(x) & (AnnualRevenue(x, y) & VND(y) & y >= 1000000000 | VoluntarilyRegister(x) & ~DirectCalculationMethod(x) | ForeignOrganization(x) | ForeignIndividual(x) & ProvidingServices(x) & Prospecting(x) | AnnualRevenue(x, y) & VND(y) & y < 1000000000 & Operating(x) & (SellingGoods(x) | ProvidingServices(x)) & SubjectToVAT(x) & FullyCompliant(x) | InvestmentProject(x) & ApprovedByAuthority(x) & VoluntarilyRegister(x) & TaxCreditMethod(x) | InvestmentPlan(x) & ApprovedByCompetentPerson(x) & InvestmentDecision(x) & VoluntarilyRegister(x) & TaxCreditMethod(x) | LeaseContract(x) & VoluntarilyRegister(x) & TaxCreditMethod(x) | ForeignOrganization(x) | ForeignIndividual(x) & MainContract(x) & Subcontract(x) & ProvidingServices(x) | RecordInputOutputVAT(x) & ~Enterprise(x) & ~Cooperative(x)) -> EligibleForTaxDeductionMethod(x)).",
        "id": "b53b7956-d273-456d-a7b9-54f59ca6794f"
    },
    {
        "raw": " ###\nPredicates:\nChangeResidence(x) | NotifyMembers(x) | Obligation(x) | Penalty(x) | Violation(x) | Individual(x) | Organization(x) | Fine(x) | DoubleFine(x).\n\nExplanation:\nChangeResidence(x): x changes their residence.\nNotifyMembers(x): x notifies members of their new residence.\nObligation(x): x has an obligation.\nPenalty(x): x incurs a penalty.\nViolation(x): x violates regulations.\nIndividual(x): x is an individual.\nOrganization(x): x is an organization.\nFine(x): x incurs a fine.\nDoubleFine(x): x incurs a fine that is twice as much as an individual's fine.\n\nPremises:\nall x (ChangeResidence(x) -> Obligation(x, NotifyMembers(x))).\nall x (Violation(x, Obligation(x, NotifyMembers(x))) -> Penalty(x)).\nall x (Individual(x) -> Fine(x)).\nall x (Organization(x) -> DoubleFine(x)).\n\nConclusion:\nall x (ChangeResidence(x) -> NotifyMembers(x)).",
        "premises": [
            "all x (ChangeResidence(x) -> Obligation(x, NotifyMembers(x))).",
            "all x (Violation(x, Obligation(x, NotifyMembers(x))) -> Penalty(x)).",
            "all x (Individual(x) -> Fine(x)).",
            "all x (Organization(x) -> DoubleFine(x))."
        ],
        "conclusion": "all x (ChangeResidence(x) -> NotifyMembers(x)).",
        "id": "b8ab422f-0f14-408d-9711-d829f1ea3f48"
    },
    {
        "raw": " ###\nPredicates:\nRecognize(x, y) | Right(x) | Parent(x) | Child(y) | Dead(x) | Lawful(x) | Consent(x) | Married(x) | Adopt(x, y) | Adult(x) | Mother(x) | Father(x).\n\nExplanation:\nRecognize(x, y): x recognizes y.\nRight(x): x has the right.\nParent(x): x is a parent.\nChild(y): y is a child.\nDead(x): x has died.\nLawful(x): x is lawful.\nConsent(x): x has given consent.\nMarried(x): x is married.\nAdopt(x, y): x adopts y.\nAdult(x): x is an adult.\nMother(x): x is a mother.\nFather(x): x is a father.\n\nPremises:\nall x, y (Parent(x) & Child(y) -> Right(x, Recognize(x, y))).\nall x, y (Married(x) & Recognize(x, y) -> -Consent(other(x))).\nall x, y (Child(x) & Parent(y) -> Right(x, Recognize(x, y))).\nall x, y (Adult(x) & Father(y) & Adopt(x, y) -> -Consent(Mother(x))).\nall x, y (Adult(x) & Mother(y) & Adopt(x, y) -> -Consent(Father(x))).\n\nConclusion:\nall x, y (Parent(x) & Child(y) & Dead(y) -> Lawful(Recognize(x, y))).\n\nNote: To convert this into Prover9 format, replace \"all\" with \"!\" and \"->\" with \"->\". For example, \"all x, y (Parent(x) & Child(y) -> Right(x, Recognize(x, y)))\" becomes \"! [x, y] : (Parent(x) & Child(y) -> Right(x, Recognize(x, y)))\".",
        "premises": [
            "all x, y (Parent(x) & Child(y) -> Right(x, Recognize(x, y))).",
            "all x, y (Married(x) & Recognize(x, y) -> -Consent(other(x))).",
            "all x, y (Child(x) & Parent(y) -> Right(x, Recognize(x, y))).",
            "all x, y (Adult(x) & Father(y) & Adopt(x, y) -> -Consent(Mother(x))).",
            "all x, y (Adult(x) & Mother(y) & Adopt(x, y) -> -Consent(Father(x)))."
        ],
        "conclusion": "Note: To convert this into Prover9 format, replace \"all\" with \"!\" and \"->\" with \"->\". For example, \"all x, y (Parent(x) & Child(y) -> Right(x, Recognize(x, y)))\" becomes \"! [x, y] : (Parent(x) & Child(y) -> Right(x, Recognize(x, y)))\".",
        "id": "4725c77b-b97f-4cd7-925a-f4971c7fad39"
    },
    {
        "raw": " ###\nPredicates:\nMotherInLaw(x) | Husband(x) | Wife(x) | Marriage(x) | CommonProperty(x) | Creation(x) | Income(x) | Labor(x) | Production(x) | Business(x) | Lawful(x) | JointInheritance(x) | Donation(x) | Agreement(x) | Reclaim(x) | Papers(x) | Possible(x).\n\nExplanation:\nMotherInLaw(x): x is a mother-in-law.\nHusband(x): x is a husband.\nWife(x): x is a wife.\nMarriage(x): x is a marriage.\nCommonProperty(x): x is common property.\nCreation(x): x is created by husband and/or wife.\nIncome(x): x is an income.\nLabor(x): x is generated from labor.\nProduction(x): x is generated from production activities.\nBusiness(x): x is generated from business activities.\nLawful(x): x is lawful.\nJointInheritance(x): x is jointly inherited.\nDonation(x): x is a donation.\nAgreement(x): x is agreed upon as common property.\nReclaim(x): x can be reclaimed.\nPapers(x): x has papers.\nPossible(x): x is possible.\n\nPremises:\nall x (MotherInLaw(x) -> (Husband(x) | Wife(x))).\nall x (Marriage(x) -> (CommonProperty(x) & Creation(x) & Income(x) & Labor(x) & Production(x) & Business(x) & Lawful(x) & JointInheritance(x) | Donation(x) | Agreement(x))).\nall x (CommonProperty(x) -> Reclaim(x)).\nall x (Reclaim(x) -> Papers(x)).\n\nConclusion:\nall x (~Papers(x) -> ~Reclaim(x)).\n\nNote: The conclusion states that it is not possible to reclaim the gold without papers lent to the mother-in-law.",
        "premises": [
            "all x (MotherInLaw(x) -> (Husband(x) | Wife(x))).",
            "all x (Marriage(x) -> (CommonProperty(x) & Creation(x) & Income(x) & Labor(x) & Production(x) & Business(x) & Lawful(x) & JointInheritance(x) | Donation(x) | Agreement(x))).",
            "all x (CommonProperty(x) -> Reclaim(x)).",
            "all x (Reclaim(x) -> Papers(x))."
        ],
        "conclusion": "Note: The conclusion states that it is not possible to reclaim the gold without papers lent to the mother-in-law.",
        "id": "a5b711e6-fec4-427a-b585-7813856759d9"
    },
    {
        "raw": " ###\nPredicates:\nAged(x, y) | Pension(x) | InsuranceBenefits(x) | InsuranceAllowance(x) | BuyCard(x) | State(x) | HealthInsurance(x) | DeathBenefit(x) | Cover(x, y).\n\nExplanation:\nAged(x, y): person x is y years old.\nPension(x): person x has a monthly pension.\nInsuranceBenefits(x): person x has social insurance benefits.\nInsuranceAllowance(x): person x has a monthly social insurance allowance.\nBuyCard(x): the State buys a health insurance card for person x.\nState(x): x is the State.\nHealthInsurance(x): x is a health insurance.\nDeathBenefit(x): x is a monthly death benefit.\nCover(x, y): x covers y.\n\nPremises:\nall x (Aged(x, 80) -> (~Pension(x) & ~InsuranceBenefits(x) & ~InsuranceAllowance(x) -> BuyCard(State, x))).\nall x (HealthInsurance(x) -> Cover(x, Healthcare)).\nall x (DeathBenefit(x) -> ~Cover(HealthInsurance, x)).\n\nConclusion:\nall x (DeathBenefit(x) -> ~Cover(HealthInsurance, x)).",
        "premises": [
            "all x (Aged(x, 80) -> (~Pension(x) & ~InsuranceBenefits(x) & ~InsuranceAllowance(x) -> BuyCard(State, x))).",
            "all x (HealthInsurance(x) -> Cover(x, Healthcare)).",
            "all x (DeathBenefit(x) -> ~Cover(HealthInsurance, x))."
        ],
        "conclusion": "all x (DeathBenefit(x) -> ~Cover(HealthInsurance, x)).",
        "id": "d8436917-cdb6-434e-bf1a-4f2d92eee212"
    },
    {
        "raw": " ###\nPredicates:\nBuy(x) | Sell(x) | Guilty(x) | Crime(x) | Unsure(x) | Fake(x) | CallPolice(x) | FindOut(x) | Car(x).\n\nExplanation:\nBuy(x): x buys a car.\nSell(x): x sells a car.\nGuilty(x): x is guilty of a crime.\nCrime(x): x is a crime.\nUnsure(x): x is unsure.\nFake(x): x is a fake.\nCallPolice(x): x calls the police.\nFindOut(x): x finds out about a situation.\nCar(x): x is a car.\n\nPremises:\nall x (Buy(x) & Sell(x) -> ~Guilty(x)).\nall x (Unsure(x) & Fake(x) -> CallPolice(x) & FindOut(x)).\n\nConclusion:\nall x (Buy(x) & Sell(x) -> ~Crime(x)).\n\nNote: The conclusion assumes that buying and selling a car is not a crime if the seller is not guilty of a crime. However, if there is uncertainty about the authenticity of the car, the buyer should call the police to find out more information.",
        "premises": [
            "all x (Buy(x) & Sell(x) -> ~Guilty(x)).",
            "all x (Unsure(x) & Fake(x) -> CallPolice(x) & FindOut(x))."
        ],
        "conclusion": "Note: The conclusion assumes that buying and selling a car is not a crime if the seller is not guilty of a crime. However, if there is uncertainty about the authenticity of the car, the buyer should call the police to find out more information.",
        "id": "0b825725-dbf3-44be-b0e2-159759f3ff46"
    },
    {
        "raw": " ###\nPredicates:\nIssueCard(x, y) | Identifiable(x) | Foreigner(x) | Reside(x, y) | FileApplication(x, y) | Competent(x, y) | Authorize(x, y) | DirectSubmit(x, y) | SubmitOnBehalf(x, y) | DossierRequest(x, y) | ApplicationForm(x, y) | ResidenceCertificate(x, y) | PassportCopy(x, y) | NotarizedPowerOfAttorney(x, y) | FamilyRelation(x, y).\n\nExplanation:\nIssueCard(x, y): x issues card to y.\nIdentifiable(x): x's place of residence is identifiable.\nForeigner(x): x is a foreigner.\nReside(x, y): x resides in y.\nFileApplication(x, y): x files application with y.\nCompetent(x, y): x is competent to issue y.\nAuthorize(x, y): x authorizes y.\nDirectSubmit(x, y): x directly submits y.\nSubmitOnBehalf(x, y): x submits y on behalf of someone else.\nDossierRequest(x, y): x is a dossier request for y.\nApplicationForm(x, y): x is an application form for y.\nResidenceCertificate(x, y): x is a certificate of residence for y.\nPassportCopy(x, y): x is a copy of passport for y.\nNotarizedPowerOfAttorney(x, y): x is a notarized power of attorney for y.\nFamilyRelation(x, y): x is a family relation to y.\n\nPremises:\nall x (Foreigner(x) & ~Identifiable(x) -> IssueCard(NationalCenter, x)).\nall x (Foreigner(x) & Reside(x, Vietnam) -> FileApplication(x, ProvincialJusticeDept)).\nall x (Foreigner(x) & ~Reside(x, Vietnam) -> FileApplication(x, NationalCenter)).\nCompetent(NationalCenter, JudicialRecordCard).\nall x (FamilyRelation(x, y) -> Authorize(x, y)).\nall x (DirectSubmit(x, y) | Authorize(x, y)).\nall x (DirectSubmit(x, y) | SubmitOnBehalf(x, y)).\nall x (DossierRequest(x, y) -> (ApplicationForm(x, y) | ResidenceCertificate(x, y) | PassportCopy(x, y) | NotarizedPowerOfAttorney(x, y))).\n\nConclusion:\nall x (FamilyRelation(x, y) -> SubmitOnBehalf(x, y)).\n------------------------",
        "premises": [
            "all x (Foreigner(x) & ~Identifiable(x) -> IssueCard(NationalCenter, x)).",
            "all x (Foreigner(x) & Reside(x, Vietnam) -> FileApplication(x, ProvincialJusticeDept)).",
            "all x (Foreigner(x) & ~Reside(x, Vietnam) -> FileApplication(x, NationalCenter)).",
            "Competent(NationalCenter, JudicialRecordCard).",
            "all x (FamilyRelation(x, y) -> Authorize(x, y)).",
            "all x (DirectSubmit(x, y) | Authorize(x, y)).",
            "all x (DirectSubmit(x, y) | SubmitOnBehalf(x, y)).",
            "all x (DossierRequest(x, y) -> (ApplicationForm(x, y) | ResidenceCertificate(x, y) | PassportCopy(x, y) | NotarizedPowerOfAttorney(x, y)))."
        ],
        "conclusion": "------------------------",
        "id": "fe3b1bfa-7f90-4dce-a1f7-008bf0e5d5f5"
    },
    {
        "raw": " ###\nPredicates:\nFileDivorce(x) | MarriageLicense(x) | MarriageCertificate(x) | DivorceFile(x) | OriginalMarriageCertificate(x) | CourtProcess(x) | Spouse(x) | SubmitOriginal(x) | HouseholdRegistration(x) | PoliceAuthority(x) | PermanentResident(x) | SeparateApplication(x) | CertifyDivorce(x) | BirthRegistration(x) | CivilStatusAuthority(x) | ChildBirthRegistration(x) | ContactAuthorities(x) | FileDocuments(x) | Embarrass(x) | AddressEmbarrassment(x) | Court(x) | SupplementDocuments(x) | Sister(x) | CourtOrder(x) | RequestSupplement(x) | PlaceOfSettlement(x) | DistrictLevelCourt(x) | HusbandResidence(x) | HusbandWork(x) | AgreeSettlement(x) | WifeResidence(x) | WifeWork(x) | SettleCase(x) | OriginalMarriageCertificateNotAvailable(x).\n\nExplanation:\nFileDivorce(x): x can file for divorce.\nMarriageLicense(x): x has a marriage license.\nMarriageCertificate(x): x has a marriage certificate.\nDivorceFile(x): x is a divorce file.\nOriginalMarriageCertificate(x): x is an original marriage certificate.\nCourtProcess(x): x is a court process.\nSpouse(x): x is a spouse.\nSubmitOriginal(x): x is required to submit the original marriage certificate.\nHouseholdRegistration(x): x is a household registration.\nPoliceAuthority(x): x is a police authority.\nPermanentResident(x): x is a permanent resident.\nSeparateApplication(x): x can make a separate application.\nCertifyDivorce(x): x can certify the divorce.\nBirthRegistration(x): x is a birth registration.\nCivilStatusAuthority(x): x is a civil status authority.\nChildBirthRegistration(x): x is a child birth registration.\nContactAuthorities(x): x can contact the authorities.\nFileDocuments(x): x can file documents.\nEmbarrass(x): x attempts to embarrass.\nAddressEmbarrassment(x): x can address embarrassment.\nCourt(x): x is a court.\nSupplementDocuments(x): x can supplement documents.\nSister(x): x is a sister.\nCourtOrder(x): x is a court order.\nRequestSupplement(x): x can request supplement.\nPlaceOfSettlement(x): x is a place of settlement.\nDistrictLevelCourt(x): x is a district-level court.\nHusbandResidence(x): x is the husband's residence.\nHusbandWork(x): x is the husband's workplace.\nAgreeSettlement(x): x can agree to a settlement.\nWifeResidence(x): x is the wife's residence.\nWifeWork(x): x is the wife's workplace.\nSettleCase(x): x can settle a case.\nOriginalMarriageCertificateNotAvailable(x): x states that the original marriage certificate is not available.\n\nPremises:\nall x (FileDivorce(x) -> MarriageLicense(x)).\nall x (MarriageCertificate(x) -> DivorceFile(x)).\nall x (DivorceFile(x) -> OriginalMarriageCertificateNotAvailable(x)).\nall x (CourtProcess(x) -> SubmitOriginal(x)).\nall x (HouseholdRegistration(x) -> PoliceAuthority(x)).\nall x (PermanentResident(x) -> HouseholdRegistration(x)).\nall x (SeparateApplication(x) -> HouseholdRegistration(x)).\nall x (CertifyDivorce(x) -> DivorceFile(x)).\nall x (BirthRegistration(x) -> CivilStatusAuthority(x)).\nall x (ChildBirthRegistration(x) -> BirthRegistration(x)).\nall x (ContactAuthorities(x) -> AddressEmbarrassment(x)).\nall x (FileDocuments(x) -> Court(x)).\nall x (SupplementDocuments(x) -> CourtOrder(x)).\nall x (PlaceOfSettlement(x) -> DistrictLevelCourt(x)).\nall x (HusbandResidence(x) -> PlaceOfSettlement(x)).\nall x (HusbandWork(x) -> PlaceOfSettlement(x)).\nall x (AgreeSettlement(x) -> SettleCase(x)).\nall x (WifeResidence(x) -> SettleCase(x)).\nall x (WifeWork(x) -> SettleCase(x)).\n\nConclusion:\nall x (DivorceFile(x) & OriginalMarriageCertificateNotAvailable(x) -> FileDivorce(x)).",
        "premises": [
            "all x (FileDivorce(x) -> MarriageLicense(x)).",
            "all x (MarriageCertificate(x) -> DivorceFile(x)).",
            "all x (DivorceFile(x) -> OriginalMarriageCertificateNotAvailable(x)).",
            "all x (CourtProcess(x) -> SubmitOriginal(x)).",
            "all x (HouseholdRegistration(x) -> PoliceAuthority(x)).",
            "all x (PermanentResident(x) -> HouseholdRegistration(x)).",
            "all x (SeparateApplication(x) -> HouseholdRegistration(x)).",
            "all x (CertifyDivorce(x) -> DivorceFile(x)).",
            "all x (BirthRegistration(x) -> CivilStatusAuthority(x)).",
            "all x (ChildBirthRegistration(x) -> BirthRegistration(x)).",
            "all x (ContactAuthorities(x) -> AddressEmbarrassment(x)).",
            "all x (FileDocuments(x) -> Court(x)).",
            "all x (SupplementDocuments(x) -> CourtOrder(x)).",
            "all x (PlaceOfSettlement(x) -> DistrictLevelCourt(x)).",
            "all x (HusbandResidence(x) -> PlaceOfSettlement(x)).",
            "all x (HusbandWork(x) -> PlaceOfSettlement(x)).",
            "all x (AgreeSettlement(x) -> SettleCase(x)).",
            "all x (WifeResidence(x) -> SettleCase(x)).",
            "all x (WifeWork(x) -> SettleCase(x))."
        ],
        "conclusion": "all x (DivorceFile(x) & OriginalMarriageCertificateNotAvailable(x) -> FileDivorce(x)).",
        "id": "3b17b2c1-d9eb-47c7-979b-bac41de9ea28"
    },
    {
        "raw": " ###\nPredicates:\nInterest(x) | Contact(x) | SpecificGuidance(x) | Employee(x) | Bring(x) | Settlement(x) | SocialInsuranceBook(x) | BirthCertificate(x) | DecisionOnResignation(x) | Center(x) | LaborWarInvalidsAndSocialAffairs(x) | UnemploymentBenefits(x) | Authorized(x).\n\nExplanation:\nInterest(x): x is interested in unemployment benefits.\nContact(x): x contacts the Center.\nSpecificGuidance(x): x receives specific guidance.\nEmployee(x): x is an employee.\nBring(x): x brings documents.\nSettlement(x): x is settled.\nSocialInsuranceBook(x): x is a social insurance book.\nBirthCertificate(x): x is a birth certificate.\nDecisionOnResignation(x): x is a decision on resignation.\nCenter(x): x is a Center.\nLaborWarInvalidsAndSocialAffairs(x): x is a Labor, War Invalids and Social Affairs Center.\nUnemploymentBenefits(x): x is unemployment benefits.\nAuthorized(x): x is authorized.\n\nPremises:\nall x (Interest(x) -> Contact(x)).\nall x (Contact(x) -> SpecificGuidance(x)).\nall x (Employee(x) -> Bring(x)).\nall x (Bring(x) -> Settlement(x)).\nall x (SocialInsuranceBook(x) -> Employee(x)).\nall x (BirthCertificate(x) -> Employee(x)).\nall x (DecisionOnResignation(x) -> Employee(x)).\nall x (Center(x) -> LaborWarInvalidsAndSocialAffairs(x)).\nall x (LaborWarInvalidsAndSocialAffairs(x) -> UnemploymentBenefits(x)).\n\nConclusion:\nall x (UnemploymentBenefits(x) -> Authorized(x)).",
        "premises": [
            "all x (Interest(x) -> Contact(x)).",
            "all x (Contact(x) -> SpecificGuidance(x)).",
            "all x (Employee(x) -> Bring(x)).",
            "all x (Bring(x) -> Settlement(x)).",
            "all x (SocialInsuranceBook(x) -> Employee(x)).",
            "all x (BirthCertificate(x) -> Employee(x)).",
            "all x (DecisionOnResignation(x) -> Employee(x)).",
            "all x (Center(x) -> LaborWarInvalidsAndSocialAffairs(x)).",
            "all x (LaborWarInvalidsAndSocialAffairs(x) -> UnemploymentBenefits(x))."
        ],
        "conclusion": "all x (UnemploymentBenefits(x) -> Authorized(x)).",
        "id": "c134d882-f74b-41ed-88bf-deb6676cbbb6"
    },
    {
        "raw": " Predicates:\nAbandoned(x) | Transferred(x) | Adopted(x) | Record(x) | Register(x) | NurturingCenter(x) | CommuneLevel(x) | Located(x) | AdoptingPerson(x) | Resides(x).\n\nExplanation:\nAbandoned(x): x is an abandoned child.\nTransferred(x): x has been transferred to a nurturing center.\nAdopted(x): x has been adopted.\nRecord(x): x makes records certifying abandoned children's status.\nRegister(x): x registers adoption.\nNurturingCenter(x): x is a nurturing center.\nCommuneLevel(x): x is a commune-level People's Committee.\nLocated(x): x's head office is located in a certain locality.\nAdoptingPerson(x): x is an adopting person.\nResides(x): x resides in a certain locality.\n\nPremises:\nall x (Abandoned(x) & ~Transferred(x) & Adopted(x) -> all y (Record(y) & CommuneLevel(y) -> Register(y))).\nall x (Transferred(x) & Adopted(x) -> all y (Located(y) & CommuneLevel(y) -> Register(y))).\n\nConclusion:\nall x (AdoptingPerson(x) & Resides(x) -> CommuneLevel(x) & Register(x)).",
        "premises": [
            "all x (Abandoned(x) & ~Transferred(x) & Adopted(x) -> all y (Record(y) & CommuneLevel(y) -> Register(y))).",
            "all x (Transferred(x) & Adopted(x) -> all y (Located(y) & CommuneLevel(y) -> Register(y)))."
        ],
        "conclusion": "all x (AdoptingPerson(x) & Resides(x) -> CommuneLevel(x) & Register(x)).",
        "id": "b9a9ff0f-6478-4a9f-a23c-5c85538cc0a2"
    },
    {
        "raw": " ###\nPredicates:\nAdopt(x, y) | FullCapacity(x) | OlderThan(x, y) | HealthConditions(x) | EconomicConditions(x) | AccommodationConditions(x) | Care(x, y) | Nurturing(x, y) | Education(x, y) | GoodMoralStatus(x) | Stepfather(x) | Stepchild(y) | Wife(y) | Stepchild(x) | Husband(y) | NaturalAunt(x) | Uncle(x) | Adopted(y, x) | SingleAdoption(x, y) | MarriedAdoption(x, y, z).\n\nExplanation:\nAdopt(x, y): x adopts y.\nFullCapacity(x): x has full capacity of civil act.\nOlderThan(x, y): x is older than y.\nHealthConditions(x): x has health conditions.\nEconomicConditions(x): x has economic conditions.\nAccommodationConditions(x): x has accommodation conditions.\nCare(x, y): x cares for y.\nNurturing(x, y): x nurtures y.\nEducation(x, y): x educates y.\nGoodMoralStatus(x): x has good moral status.\nStepfather(x): x is a stepfather.\nStepchild(y): y is a stepchild.\nWife(y): y is a wife.\nStepchild(x): x is a stepchild.\nHusband(y): y is a husband.\nNaturalAunt(x): x is a natural aunt.\nUncle(x): x is an uncle.\nAdopted(y, x): y is adopted by x.\nSingleAdoption(x, y): x adopts y as a single person.\nMarriedAdoption(x, y, z): x and y adopt z as married persons.\n\nPremises:\nall x (Adopt(x, y) -> (FullCapacity(x) & OlderThan(x, y, 20) & HealthConditions(x) & EconomicConditions(x) & AccommodationConditions(x) & GoodMoralStatus(x))).\nall x (Stepfather(x) & Stepchild(y) & Wife(y) -> (~OlderThan(x, y, 20) & ~EconomicConditions(x) & ~AccommodationConditions(x))).\nall x (NaturalAunt(x) | Uncle(x)) & Adopt(x, y) -> ~OlderThan(x, y, 20) & ~EconomicConditions(x) & ~AccommodationConditions(x)).\nall x (Adopt(x, y) -> (SingleAdoption(x, y) | MarriedAdoption(x, y, z))).\n\nConclusion:\nall x (Grandson(x) & OlderThan(x, Grandchild(y), 15) -> Adopt(x, y)).\n\nNote: The conclusion is not valid due to the age requirement in the premises. The adopter must be at least 20 years older than the adoptee.",
        "premises": [
            "all x (Adopt(x, y) -> (FullCapacity(x) & OlderThan(x, y, 20) & HealthConditions(x) & EconomicConditions(x) & AccommodationConditions(x) & GoodMoralStatus(x))).",
            "all x (Stepfather(x) & Stepchild(y) & Wife(y) -> (~OlderThan(x, y, 20) & ~EconomicConditions(x) & ~AccommodationConditions(x))).",
            "all x (NaturalAunt(x) | Uncle(x)) & Adopt(x, y) -> ~OlderThan(x, y, 20) & ~EconomicConditions(x) & ~AccommodationConditions(x)).",
            "all x (Adopt(x, y) -> (SingleAdoption(x, y) | MarriedAdoption(x, y, z)))."
        ],
        "conclusion": "Note: The conclusion is not valid due to the age requirement in the premises. The adopter must be at least 20 years older than the adoptee.",
        "id": "ee8bb1b3-5bb6-47d9-84e8-d7421ffc78dc"
    },
    {
        "raw": " ###\nPredicates:\nAdopt(x, y) | FullCivilActCapacity(x) | Older(x, y) | HealthConditions(x) | EconomicConditions(x) | AccommodationConditions(x) | GoodMoralQualities(x) | RestrictedRights(x) | ServingPenalties(x) | CriminalRecord(x) | Stepfather(x, y) | Stepchild(x, y) | NaturalAuntOrUncle(x, y) | NieceOrNephew(x, y) | Single(x) | AdoptedBySingle(x).\n\nExplanation:\nAdopt(x, y): x adopts y.\nFullCivilActCapacity(x): x has full civil act capacity.\nOlder(x, y): x is older than y.\nHealthConditions(x): x has health conditions.\nEconomicConditions(x): x has economic conditions.\nAccommodationConditions(x): x has accommodation conditions.\nGoodMoralQualities(x): x has good moral qualities.\nRestrictedRights(x): x has restricted rights.\nServingPenalties(x): x is serving penalties.\nCriminalRecord(x): x has a criminal record.\nStepfather(x, y): x is a stepfather of y.\nStepchild(x, y): x is a stepchild of y.\nNaturalAuntOrUncle(x, y): x is a natural aunt or uncle of y.\nNieceOrNephew(x, y): x is a niece or nephew of y.\nSingle(x): x is single.\nAdoptedBySingle(x): x is adopted by a single person.\n\nPremises:\nall x (Adopt(x, y) -> (FullCivilActCapacity(x) & Older(x, y) & HealthConditions(x) & EconomicConditions(x) & AccommodationConditions(x) & GoodMoralQualities(x))).\nall x (RestrictedRights(x) -> ~Adopt(x, y)).\nall x (ServingPenalties(x) -> ~Adopt(x, y)).\nall x (CriminalRecord(x) -> ~Adopt(x, y)).\nall x (Stepfather(x, y) -> ~(Older(x, y) & AccommodationConditions(x))).\nall x (Stepchild(x, y) -> ~(Older(x, y) & AccommodationConditions(x))).\nall x (NaturalAuntOrUncle(x, y) -> ~(Older(x, y) & AccommodationConditions(x))).\nall x (NieceOrNephew(x, y) -> ~(Older(x, y) & AccommodationConditions(x))).\n\nConclusion:\nall x (Single(x) & FullCivilActCapacity(x) & Older(x, y) & HealthConditions(x) & EconomicConditions(x) & AccommodationConditions(x) & GoodMoralQualities(x) -> Adopt(x, y)).\n------------------------",
        "premises": [
            "all x (Adopt(x, y) -> (FullCivilActCapacity(x) & Older(x, y) & HealthConditions(x) & EconomicConditions(x) & AccommodationConditions(x) & GoodMoralQualities(x))).",
            "all x (RestrictedRights(x) -> ~Adopt(x, y)).",
            "all x (ServingPenalties(x) -> ~Adopt(x, y)).",
            "all x (CriminalRecord(x) -> ~Adopt(x, y)).",
            "all x (Stepfather(x, y) -> ~(Older(x, y) & AccommodationConditions(x))).",
            "all x (Stepchild(x, y) -> ~(Older(x, y) & AccommodationConditions(x))).",
            "all x (NaturalAuntOrUncle(x, y) -> ~(Older(x, y) & AccommodationConditions(x))).",
            "all x (NieceOrNephew(x, y) -> ~(Older(x, y) & AccommodationConditions(x)))."
        ],
        "conclusion": "------------------------",
        "id": "4f6a9b65-564d-45fb-a258-719994b43e47"
    },
    {
        "raw": " ###\nPredicates:\nSibling(x, y) | Give(x, y) | Child(x) | Younger(x, y) | Adopt(x, y) | ChangeName(x) | BirthCertificate(x) | BiologicalMother(x, y) | AdoptiveMother(x, y) | Possible(x).\n\nExplanation:\nSibling(x, y): x is a sibling of y.\nGive(x, y): x gives y.\nChild(x): x is a child.\nYounger(x, y): x is younger than y.\nAdopt(x, y): x adopts y.\nChangeName(x): x changes his/her name.\nBirthCertificate(x): x is written on the birth certificate.\nBiologicalMother(x, y): x is the biological mother of y.\nAdoptiveMother(x, y): x is the adoptive mother of y.\nPossible(x): x is possible.\n\nPremises:\nall x, y (Sibling(x, y) & Give(x, z) & Child(z) & Younger(y, x) -> Adopt(y, z) & ChangeName(y) & -BirthCertificate(y, BiologicalMother) & BirthCertificate(y, AdoptiveMother)).\n\nConclusion:\nall x, y (Adopt(x, y) -> Possible(x, Child(z))).\n\n###\nNote: This conclusion assumes that the goal is to determine if it is possible for a person who has adopted a child to then have another child of their own. If the goal is to determine if it is possible for the adopted child to have another child, then the conclusion would be:\n\nall x, y (Adopt(x, y) & Child(y) -> Possible(y, Child(z))).",
        "premises": [
            "all x, y (Sibling(x, y) & Give(x, z) & Child(z) & Younger(y, x) -> Adopt(y, z) & ChangeName(y) & -BirthCertificate(y, BiologicalMother) & BirthCertificate(y, AdoptiveMother))."
        ],
        "conclusion": "all x, y (Adopt(x, y) & Child(y) -> Possible(y, Child(z))).",
        "id": "cb5661bd-324e-4172-9aff-613a3842d0a0"
    },
    {
        "raw": " ###\nPredicates:\nAdoption(x) | Consider(x) | Settle(x) | Prepare(x) | Application(x) | Passport(x) | Investigation(x) | JudicialRecord(x) | HealthStatus(x) | IncomeProperty(x) | Permission(x) | Legalized(x) | Translated(x) | Certified(x) | BirthCertificate(x) | HealthCertificate(x) | Photo(x) | Proof(x) | Elaborating(x) | Decree(x) | Implement(x) | FeeLevel(x) | Aunt(x) | Over14(x) | Legal(x).\n\nExplanation:\nAdoption(x): x is an adoption.\nConsider(x): x is considered.\nSettle(x): x is settled.\nPrepare(x): x is prepared.\nApplication(x): x is an application.\nPassport(x): x is a passport.\nInvestigation(x): x is an investigation.\nJudicialRecord(x): x is a judicial record.\nHealthStatus(x): x is a health status.\nIncomeProperty(x): x is an income and property.\nPermission(x): x is a permission.\nLegalized(x): x is legalized.\nTranslated(x): x is translated.\nCertified(x): x is certified.\nBirthCertificate(x): x is a birth certificate.\nHealthCertificate(x): x is a health certificate.\nPhoto(x): x is a photo.\nProof(x): x is a proof.\nElaborating(x): x is being elaborated.\nDecree(x): x is a decree.\nImplement(x): x is implemented.\nFeeLevel(x): x is a fee level.\nAunt(x): x is an aunt.\nOver14(x): x is over 14 years old.\nLegal(x): x is legal.\n\nPremises:\nAdoption(x) -> Consider(x) & Settle(x).\nPrepare(x, Application(x)) & Prepare(x, Passport(x)) & Prepare(x, Investigation(x)) & Prepare(x, JudicialRecord(x)) & Prepare(x, HealthStatus(x)) & Prepare(x, IncomeProperty(x)) & Prepare(x, Permission(x)).\nLegalized(x) & Translated(x) & Certified(x).\nPrepare(x, BirthCertificate(x)) & Prepare(x, HealthCertificate(x)) & Prepare(x, Photo(x)) & Prepare(x, Proof(x)).\nElaborating(x, Decree(x)) & Implement(x, Decree(x)) & FeeLevel(x).\nAunt(x) & Over14(x).\n\nConclusion:\nLegal(x).\n\n###\nNote: The conclusion is not clear from the given rules and goals. The question of whether it is legal to adopt a niece or nephew over 14 years old is not directly addressed in the provided information.",
        "premises": [
            "Adoption(x) -> Consider(x) & Settle(x).",
            "Prepare(x, Application(x)) & Prepare(x, Passport(x)) & Prepare(x, Investigation(x)) & Prepare(x, JudicialRecord(x)) & Prepare(x, HealthStatus(x)) & Prepare(x, IncomeProperty(x)) & Prepare(x, Permission(x)).",
            "Legalized(x) & Translated(x) & Certified(x).",
            "Prepare(x, BirthCertificate(x)) & Prepare(x, HealthCertificate(x)) & Prepare(x, Photo(x)) & Prepare(x, Proof(x)).",
            "Elaborating(x, Decree(x)) & Implement(x, Decree(x)) & FeeLevel(x).",
            "Aunt(x) & Over14(x)."
        ],
        "conclusion": "Note: The conclusion is not clear from the given rules and goals. The question of whether it is legal to adopt a niece or nephew over 14 years old is not directly addressed in the provided information.",
        "id": "543e7524-21e8-4d98-a4a5-e881fac0d570"
    },
    {
        "raw": " Predicates:\nReject(x) | Request(x) | Change(x) | NaturalParent(x) | AdoptiveParent(x) | BirthCertificate(x) | BirthRegister(x) | Clause2(x) | Article28(x) | Decree158(x) | AdoptedChild(x) | Possible(x) | ChangeName(x) | NaturalMother(x) | AdoptedMother(x) | Birth(x) | Adoption(x).\n\nExplanation:\nReject(x): x is rejected.\nRequest(x): x is a request.\nChange(x): x is a change.\nNaturalParent(x): x is a natural parent.\nAdoptiveParent(x): x is an adoptive parent.\nBirthCertificate(x): x is a birth certificate.\nBirthRegister(x): x is a birth register.\nClause2(x): x is Clause 2.\nArticle28(x): x is Article 28.\nDecree158(x): x is Decree No. 158/2005/ND-CP.\nAdoptedChild(x): x is an adopted child.\nPossible(x): x is possible.\nChangeName(x): x is a change of name.\nNaturalMother(x): x is a natural mother.\nAdoptedMother(x): x is an adopted mother.\nBirth(x): x is at birth.\nAdoption(x): x is after adoption.\n\nPremises:\nall x (Change(x) -> Reject(x)) <- (Clause2(x) & Article28(x) & Decree158(x) & AdoptedChild(x)).\nall x (Change(x) -> (NaturalParent(x) | AdoptiveParent(x))) <- (BirthCertificate(x) | BirthRegister(x)).\nall x (ChangeName(x) -> Possible(x)) <- (NaturalMother(x) & AdoptedMother(x) & Birth(x) & Adoption(x)).\n\nConclusion:\nall x (ChangeName(x) -> Possible(x)).",
        "premises": [
            "all x (Change(x) -> Reject(x)) <- (Clause2(x) & Article28(x) & Decree158(x) & AdoptedChild(x)).",
            "all x (Change(x) -> (NaturalParent(x) | AdoptiveParent(x))) <- (BirthCertificate(x) | BirthRegister(x)).",
            "all x (ChangeName(x) -> Possible(x)) <- (NaturalMother(x) & AdoptedMother(x) & Birth(x) & Adoption(x))."
        ],
        "conclusion": "all x (ChangeName(x) -> Possible(x)).",
        "id": "9eaf2ce2-1667-415b-992c-6ee52b86cb7c"
    },
    {
        "raw": " ###\nPredicates:\nAdopt(x, y) | Stepfather(x, y) | Stepchild(x, y) | NaturalAunt(x, y) | NaturalUncle(x, y) | Age(x, y) | Adoptable(x, y) | LegalAdoption(x, y).\n\nExplanation:\nAdopt(x, y): x adopts y.\nStepfather(x, y): x is a stepfather to y.\nStepchild(x, y): x is a stepchild of y.\nNaturalAunt(x, y): x is a natural aunt to y.\nNaturalUncle(x, y): x is a natural uncle to y.\nAge(x, y): x is of age y.\nAdoptable(x, y): x is adoptable by y.\nLegalAdoption(x, y): x is a legal adoption by y.\n\nPremises:\nall x, y (Stepfather(x, y) -> Adoptable(x, y)).\nall x, y (NaturalAunt(x, y) -> Adoptable(x, y)).\nall x, y (NaturalUncle(x, y) -> Adoptable(x, y)).\nall x (Age(x, 16) & Age(x, 18) -> Adoptable(x)).\nall x, y (Adoptable(x, y) -> LegalAdoption(x, y)).\n\nConclusion:\nall x, y (Stepchild(x, y) & Age(x, 18) -> LegalAdoption(x, y)).\n\nBased on the given rules and goals, it appears that adopting your wife's 18-year-old stepchild is not explicitly covered by the provided rules. However, based on the premises, if the stepchild is considered adoptable, then the adoption would be legal. The rules do not specify the legality of adopting a stepchild who is 18 years old, so it may be necessary to consult additional laws or regulations for a definitive answer.",
        "premises": [
            "all x, y (Stepfather(x, y) -> Adoptable(x, y)).",
            "all x, y (NaturalAunt(x, y) -> Adoptable(x, y)).",
            "all x, y (NaturalUncle(x, y) -> Adoptable(x, y)).",
            "all x (Age(x, 16) & Age(x, 18) -> Adoptable(x)).",
            "all x, y (Adoptable(x, y) -> LegalAdoption(x, y))."
        ],
        "conclusion": "Based on the given rules and goals, it appears that adopting your wife's 18-year-old stepchild is not explicitly covered by the provided rules. However, based on the premises, if the stepchild is considered adoptable, then the adoption would be legal. The rules do not specify the legality of adopting a stepchild who is 18 years old, so it may be necessary to consult additional laws or regulations for a definitive answer.",
        "id": "10c5df0a-71f0-4437-a3cc-a06f2cc48d75"
    },
    {
        "raw": " Predicates:\nPerson(x) | Entitled(x) | Estate(x) | Share(x) | AtLawHeir(x) | Refuse(x) | Inherit(x) | Disabled(x) | WorkingCapacity(x) | Minor(x) | Parent(x) | Spouse(x) | GrownUp(x) | NotAllowed(x).\n\nExplanation:\nPerson(x): x is a person.\nEntitled(x): x is entitled to an estate.\nEstate(x): x is an estate.\nShare(x): x is a share of an estate.\nAtLawHeir(x): x is an at-law heir.\nRefuse(x): x refuses to receive the estate.\nInherit(x): x inherits the estate.\nDisabled(x): x is disabled.\nWorkingCapacity(x): x has working capacity.\nMinor(x): x is a minor.\nParent(x): x is a parent.\nSpouse(x): x is a spouse.\nGrownUp(x): x is grown up.\nNotAllowed(x): x is not allowed to inherit the estate.\n\nPremises:\nall x (Person(x) & (Minor(x) | Parent(x) | Spouse(x) | (GrownUp(x) & not WorkingCapacity(x))) -> Entitled(x, 2/3 * Share(AtLawHeir(x)))).\nall x (Person(x) & (Refuse(x) | NotAllowed(x)) -> not Entitled(x, 2/3 * Share(AtLawHeir(x)))).\n\nConclusion:\nall x (Person(x) & Disabled(x) -> Entitled(x, 2/3 * Share(AtLawHeir(x)))).\n\nNote: The conclusion assumes that being disabled implies having no working capacity, as per the provided rules. If this is not the case, the conclusion would need to be adjusted accordingly.",
        "premises": [
            "all x (Person(x) & (Minor(x) | Parent(x) | Spouse(x) | (GrownUp(x) & not WorkingCapacity(x))) -> Entitled(x, 2/3 * Share(AtLawHeir(x)))).",
            "all x (Person(x) & (Refuse(x) | NotAllowed(x)) -> not Entitled(x, 2/3 * Share(AtLawHeir(x))))."
        ],
        "conclusion": "Note: The conclusion assumes that being disabled implies having no working capacity, as per the provided rules. If this is not the case, the conclusion would need to be adjusted accordingly.",
        "id": "6587158f-701a-498b-a12e-a85c329b157f"
    },
    {
        "raw": " ###\nPredicates:\nDivorce(x) | Alimony(x) | Obligation(x) | DirectRaise(x) | EconomicallyCapable(x) | Request(x) | ProvideSupport(x) | Explain(x) | Interest(x) | Refuse(x) | Voluntary(x) | Capacity(x) | Conditions(x) | Right(x) | Father(x) | SupportObligation(x) | Anger(x) | Spouse(x) | Inaction(x) | Law(x) | Define(x) | FinancialSupport(x) | Clause2Article107(x) | Article119(x) | Law2014(x).\n\nExplanation:\nDivorce(x): x has been divorced.\nAlimony(x): x is alimony.\nObligation(x): x is an obligation.\nDirectRaise(x): x directly raises children.\nEconomicallyCapable(x): x is economically capable.\nRequest(x): x requests support.\nProvideSupport(x): x provides support.\nExplain(x): x explains the interests of the child.\nInterest(x): x is in the interest of the child.\nRefuse(x): x refuses to request financial support.\nVoluntary(x): x is voluntary.\nCapacity(x): x has the capacity.\nConditions(x): x has the conditions.\nRight(x): x has the right.\nFather(x): x is the father.\nSupportObligation(x): x has a supporting obligation.\nAnger(x): x is angry.\nSpouse(x): x is the spouse.\nInaction(x): x is in inaction.\nLaw(x): x is a law.\nDefine(x): x defines the obligation to provide financial support.\nFinancialSupport(x): x provides financial support.\nClause2Article107(x): x is Clause 2 Article 107.\nArticle119(x): x is Article 119.\nLaw2014(x): x is the 2014 Law on Marriage and Family.\n\nPremises:\nall x (Divorce(x) -> Alimony(x) & Obligation(x)).\nall x (DirectRaise(x) -> Request(x) & ProvideSupport(x)).\nall x (Request(x) -> Explain(x) & Interest(x)).\nall x (Refuse(x) & Voluntary(x) & Capacity(x) & Conditions(x) -> -ProvideSupport(x)).\nall x (Right(x) & Father(x) & SupportObligation(x) -> Refuse(x)).\nall x (Anger(x) & Spouse(x) & Inaction(x) -> -Refuse(x)).\nall x (Law(x) -> Define(x) & FinancialSupport(x)).\nall x (Clause2Article107(x) & Article119(x) & Law2014(x) -> Define(x)).\n\nConclusion:\nall x (Refuse(x) & Father(x) -> -SupportObligation(x)).",
        "premises": [
            "all x (Divorce(x) -> Alimony(x) & Obligation(x)).",
            "all x (DirectRaise(x) -> Request(x) & ProvideSupport(x)).",
            "all x (Request(x) -> Explain(x) & Interest(x)).",
            "all x (Refuse(x) & Voluntary(x) & Capacity(x) & Conditions(x) -> -ProvideSupport(x)).",
            "all x (Right(x) & Father(x) & SupportObligation(x) -> Refuse(x)).",
            "all x (Anger(x) & Spouse(x) & Inaction(x) -> -Refuse(x)).",
            "all x (Law(x) -> Define(x) & FinancialSupport(x)).",
            "all x (Clause2Article107(x) & Article119(x) & Law2014(x) -> Define(x))."
        ],
        "conclusion": "all x (Refuse(x) & Father(x) -> -SupportObligation(x)).",
        "id": "1f9671c4-7c46-4797-8aed-c28d7a882e57"
    },
    {
        "raw": " ###\nPredicates:\nSecureTransaction(x) | Collateral(x) | ExistingAsset(x) | FutureAsset(x) | Banned(x) | FormedFromLoan(x) | FormulationStage(x) | LawfulCreation(x) | OwnershipRegistration(x) | Mortgage(x) | OffPlanHousing(x) | LegitimateLand(x) | CreditInstitution(x) | Vietnam(x) | Good(x).\n\nExplanation:\nSecureTransaction(x): x is a secured transaction.\nCollateral(x): x is a collateral.\nExistingAsset(x): x is an existing asset.\nFutureAsset(x): x is a future asset.\nBanned(x): x is banned by law.\nFormedFromLoan(x): x is formed from a loan.\nFormulationStage(x): x is in the formulation stage.\nLawfulCreation(x): x is lawfully created.\nOwnershipRegistration(x): x is subject to ownership registration.\nMortgage(x): x is mortgaged.\nOffPlanHousing(x): x is off-plan housing.\nLegitimateLand(x): x is on legitimate land.\nCreditInstitution(x): x is a credit institution.\nVietnam(x): x is in Vietnam.\nGood(x): x is good.\n\nPremises:\nall x (SecureTransaction(x) -> Collateral(x)).\nall x (Collateral(x) -> (ExistingAsset(x) | FutureAsset(x))).\nall x (FutureAsset(x) -> ~Banned(x)).\nall x (FormedFromLoan(x) -> Collateral(x)).\nall x (FormulationStage(x) -> Collateral(x)).\nall x (LawfulCreation(x) -> Collateral(x)).\nall x (OwnershipRegistration(x) -> Collateral(x)).\nall x (OffPlanHousing(x) -> Mortgage(x)).\nall x (LegitimateLand(x) -> Mortgage(x)).\nall x (CreditInstitution(x) -> Vietnam(x)).\n\nConclusion:\nall x (FutureAcquiredHouses(x) & SecureTransaction(x) -> Good(x)).",
        "premises": [
            "all x (SecureTransaction(x) -> Collateral(x)).",
            "all x (Collateral(x) -> (ExistingAsset(x) | FutureAsset(x))).",
            "all x (FutureAsset(x) -> ~Banned(x)).",
            "all x (FormedFromLoan(x) -> Collateral(x)).",
            "all x (FormulationStage(x) -> Collateral(x)).",
            "all x (LawfulCreation(x) -> Collateral(x)).",
            "all x (OwnershipRegistration(x) -> Collateral(x)).",
            "all x (OffPlanHousing(x) -> Mortgage(x)).",
            "all x (LegitimateLand(x) -> Mortgage(x)).",
            "all x (CreditInstitution(x) -> Vietnam(x))."
        ],
        "conclusion": "all x (FutureAcquiredHouses(x) & SecureTransaction(x) -> Good(x)).",
        "id": "3eddeeea-1eeb-4c6e-a788-a6518161f087"
    },
    {
        "raw": " ###\nPredicates:\nMotherResides(x, y) | FatherResides(x, y) | ChildResides(x, y) | OrganizationResides(x, y) | RegisterBirth(x, y) | AbandonedChild(x) | TemporaryResidence(x) | PermanentResidence(x) | IdentifiedResidence(x) | LocalCommune(x, y).\n\nExplanation:\nMotherResides(x, y): Mother x resides in commune y.\nFatherResides(x, y): Father x resides in commune y.\nChildResides(x, y): Child x resides in commune y.\nOrganizationResides(x, y): Organization x is headquartered in commune y.\nRegisterBirth(x, y): Birth of child x is registered in commune y.\nAbandonedChild(x): Child x is abandoned.\nTemporaryResidence(x): x has a temporary residence.\nPermanentResidence(x): x has a permanent residence.\nIdentifiedResidence(x): The residence of x can be identified.\nLocalCommune(x, y): Commune y is the local commune of x.\n\nPremises:\nall x, y (MotherResides(x, y) & IdentifiedResidence(x) -> RegisterBirth(x, y)).\nall x, y (~IdentifiedResidence(x) & FatherResides(x, y) -> RegisterBirth(x, y)).\nall x, y (~IdentifiedResidence(x) & ChildResides(x, y) -> RegisterBirth(x, y)).\nall x, y (AbandonedChild(x) & (OrganizationResides(x, y) | ChildResides(x, y)) -> RegisterBirth(x, y)).\nall x, y (~IdentifiedResidence(x) & FatherResides(x, y) & (TemporaryResidence(y) | PermanentResidence(y)) -> RegisterBirth(x, y)).\n\nConclusion:\nall x, y (TemporaryResidence(y) & FatherResides(x, y) -> RegisterBirth(x, y)).",
        "premises": [
            "all x, y (MotherResides(x, y) & IdentifiedResidence(x) -> RegisterBirth(x, y)).",
            "all x, y (~IdentifiedResidence(x) & FatherResides(x, y) -> RegisterBirth(x, y)).",
            "all x, y (~IdentifiedResidence(x) & ChildResides(x, y) -> RegisterBirth(x, y)).",
            "all x, y (AbandonedChild(x) & (OrganizationResides(x, y) | ChildResides(x, y)) -> RegisterBirth(x, y)).",
            "all x, y (~IdentifiedResidence(x) & FatherResides(x, y) & (TemporaryResidence(y) | PermanentResidence(y)) -> RegisterBirth(x, y))."
        ],
        "conclusion": "all x, y (TemporaryResidence(y) & FatherResides(x, y) -> RegisterBirth(x, y)).",
        "id": "c87121d0-5e7a-45c4-b930-a8b76d23062a"
    },
    {
        "raw": " ###\nPredicates:\nBirthCertificate(x) | Submit(x) | BirthRegistration(x) | MedicalEstablishment(x) | Witness(x) | CivilActCapacity(x) | WrittenCommitment(x) | RealBirth(x) | PlaceOfResidence(x) | Mother(x) | Father(x) | AbandonedChild(x) | TemporaryRaising(x) | Organization(x) | Headquarter(x) | Required(x).\n\nExplanation:\nBirthCertificate(x): x is a birth certificate.\nSubmit(x): x submits a birth certificate.\nBirthRegistration(x): x is birth registration.\nMedicalEstablishment(x): x is a medical establishment.\nWitness(x): x is a witness.\nCivilActCapacity(x): x has full civil act capacity.\nWrittenCommitment(x): x makes a written commitment.\nRealBirth(x): x is a real birth.\nPlaceOfResidence(x): x is the place of residence.\nMother(x): x is the mother.\nFather(x): x is the father.\nAbandonedChild(x): x is an abandoned child.\nTemporaryRaising(x): x is temporarily raising a child.\nOrganization(x): x is an organization.\nHeadquarter(x): x is the headquarters of an organization.\nRequired(x): x is required.\n\nPremises:\nall x (BirthRegistration(x) -> Submit(x, BirthCertificate(x))).\nall x (MedicalEstablishment(x) -> Submit(x, BirthCertificate(x))).\nall x (Witness(x) -> CivilActCapacity(x)).\nall x (Witness(x) -> WrittenCommitment(x)).\nall x (Witness(x) -> RealBirth(x)).\nall x (PlaceOfResidence(x, Mother(x)) -> BirthRegistration(x)).\nall x (Father(x) -> BirthRegistration(x)).\nall x (AbandonedChild(x) -> TemporaryRaising(x)).\nall x (Organization(x) -> Headquarter(x)).\n\nConclusion:\nall x (BirthRegistration(x) -> Required(x, BirthCertificate(x))).",
        "premises": [
            "all x (BirthRegistration(x) -> Submit(x, BirthCertificate(x))).",
            "all x (MedicalEstablishment(x) -> Submit(x, BirthCertificate(x))).",
            "all x (Witness(x) -> CivilActCapacity(x)).",
            "all x (Witness(x) -> WrittenCommitment(x)).",
            "all x (Witness(x) -> RealBirth(x)).",
            "all x (PlaceOfResidence(x, Mother(x)) -> BirthRegistration(x)).",
            "all x (Father(x) -> BirthRegistration(x)).",
            "all x (AbandonedChild(x) -> TemporaryRaising(x)).",
            "all x (Organization(x) -> Headquarter(x))."
        ],
        "conclusion": "all x (BirthRegistration(x) -> Required(x, BirthCertificate(x))).",
        "id": "c406e75f-bf5e-4bea-a4bd-35f4ecad4f30"
    },
    {
        "raw": " ###\nPredicates:\nRelationship(x, y) | Accountable(x) | Behavior(x) | CriminalProsecution(x) | AdministrativePenalty(x) | Married(x) | Marrying(x) | Cohabiting(x) | Relative(x) | AdoptiveParent(x) | AdoptedChild(x) | ContractEmployee(x) | GovernmentEmployee(x) | CivilServant(x) | Adulterous(x) | Fired(x).\n\nExplanation:\nRelationship(x, y): x has a relationship with y.\nAccountable(x): x is held accountable.\nBehavior(x): x behaves in a certain way.\nCriminalProsecution(x): x is subject to criminal prosecution.\nAdministrativePenalty(x): x faces administrative penalties.\nMarried(x): x is married.\nMarrying(x): x marries another person.\nCohabiting(x): x cohabits with another person.\nRelative(x): x is a relative.\nAdoptiveParent(x): x is an adoptive parent.\nAdoptedChild(x): x is an adopted child.\nContractEmployee(x): x is a contract employee.\nGovernmentEmployee(x): x is a government employee.\nCivilServant(x): x is a civil servant.\nAdulterous(x): x is adulterous.\nFired(x): x is fired.\n\nPremises:\nall x (Relationship(x, y) -> Accountable(x)).\nall x (~CriminalProsecution(x) -> AdministrativePenalty(x)).\nall x (Married(x) & Marrying(x) -> AdministrativePenalty(x)).\nall x (~Married(x) & Cohabiting(x) -> AdministrativePenalty(x)).\nall x (Relative(x) & Marrying(x) -> AdministrativePenalty(x)).\nall x (AdoptiveParent(x) & AdoptedChild(x) & Marrying(x) -> AdministrativePenalty(x)).\nall x (ContractEmployee(x) -> ~CivilServant(x)).\nall x (GovernmentEmployee(x) & Adulterous(x) -> Fired(x)).\n\nConclusion:\nall x (GovernmentEmployee(x) & Adulterous(x) -> Fired(x)).",
        "premises": [
            "all x (Relationship(x, y) -> Accountable(x)).",
            "all x (~CriminalProsecution(x) -> AdministrativePenalty(x)).",
            "all x (Married(x) & Marrying(x) -> AdministrativePenalty(x)).",
            "all x (~Married(x) & Cohabiting(x) -> AdministrativePenalty(x)).",
            "all x (Relative(x) & Marrying(x) -> AdministrativePenalty(x)).",
            "all x (AdoptiveParent(x) & AdoptedChild(x) & Marrying(x) -> AdministrativePenalty(x)).",
            "all x (ContractEmployee(x) -> ~CivilServant(x)).",
            "all x (GovernmentEmployee(x) & Adulterous(x) -> Fired(x))."
        ],
        "conclusion": "all x (GovernmentEmployee(x) & Adulterous(x) -> Fired(x)).",
        "id": "7a0ce6b7-0f8b-4e91-9290-489dd50f4e6d"
    },
    {
        "raw": " ###\nPredicates:\nMortgageContract(x) | LoanCreditContract(x) | Signature(x) | AssetUser(x) | Notarization(x) | NotaryPublic(x) | OwnershipProof(x) | IdentityProof(x) | HouseholdRegistration(x) | CivilActCapacity(x) | Mortgagor(x) | MaritalStatus(x) | Sovereignty(x) | Spouse(x) | Signature(x) | SingleStatus(x) | MentalHealthProblem(x) | MedicalRecord(x) | Forgery(x) | Lawsuit(x) | InvalidContract(x).\n\nExplanation:\nMortgageContract(x): x is a mortgage contract.\nLoanCreditContract(x): x is a loan credit contract.\nSignature(x): x has a signature.\nAssetUser(x): x is an asset user.\nNotarization(x): x is notarized.\nNotaryPublic(x): x is a notary public.\nOwnershipProof(x): x has proof of ownership.\nIdentityProof(x): x has proof of identity.\nHouseholdRegistration(x): x has household registration.\nCivilActCapacity(x): x has civil act capacity.\nMortgagor(x): x is a mortgagor.\nMaritalStatus(x): x has a marital status.\nSovereignty(x): x has sovereignty.\nSpouse(x): x is a spouse.\nSignature(x): x has a signature.\nSingleStatus(x): x has single status.\nMentalHealthProblem(x): x has mental health problems.\nMedicalRecord(x): x has a medical record.\nForgery(x): x is a forgery.\nLawsuit(x): x is a lawsuit.\nInvalidContract(x): x is an invalid contract.\n\nPremises:\nall x (MortgageContract(x) -> all y (AssetUser(y) -> Signature(y, x))).\nall x (LoanCreditContract(x) -> all y (AssetUser(y) -> Signature(y, x))).\nall x (MortgageContract(x) -> Notarization(x)).\nall x (NotaryPublic(x) -> all y (OwnershipProof(y) -> Signature(x, y))).\nall x (NotaryPublic(x) -> all y (IdentityProof(y) -> Signature(x, y))).\nall x (NotaryPublic(x) -> all y (HouseholdRegistration(y) -> Signature(x, y))).\nall x (NotaryPublic(x) -> all y (CivilActCapacity(y) -> Signature(x, y))).\nall x (NotaryPublic(x) -> all y (MaritalStatus(y) -> Signature(x, y))).\nall x (Sovereignty(x) -> all y (Spouse(y) -> Signature(y, x))).\nall x (SingleStatus(x) -> Signature(x)).\nall x (MentalHealthProblem(x) -> MedicalRecord(x)).\nall x (Forgery(x) -> Lawsuit(x)).\nall x (Lawsuit(x) -> InvalidContract(x)).\n\nConclusion:\nall x (Forgery(x) -> Lawsuit(x)).",
        "premises": [
            "all x (MortgageContract(x) -> all y (AssetUser(y) -> Signature(y, x))).",
            "all x (LoanCreditContract(x) -> all y (AssetUser(y) -> Signature(y, x))).",
            "all x (MortgageContract(x) -> Notarization(x)).",
            "all x (NotaryPublic(x) -> all y (OwnershipProof(y) -> Signature(x, y))).",
            "all x (NotaryPublic(x) -> all y (IdentityProof(y) -> Signature(x, y))).",
            "all x (NotaryPublic(x) -> all y (HouseholdRegistration(y) -> Signature(x, y))).",
            "all x (NotaryPublic(x) -> all y (CivilActCapacity(y) -> Signature(x, y))).",
            "all x (NotaryPublic(x) -> all y (MaritalStatus(y) -> Signature(x, y))).",
            "all x (Sovereignty(x) -> all y (Spouse(y) -> Signature(y, x))).",
            "all x (SingleStatus(x) -> Signature(x)).",
            "all x (MentalHealthProblem(x) -> MedicalRecord(x)).",
            "all x (Forgery(x) -> Lawsuit(x)).",
            "all x (Lawsuit(x) -> InvalidContract(x))."
        ],
        "conclusion": "all x (Forgery(x) -> Lawsuit(x)).",
        "id": "00a73256-3ab7-4bd2-82cf-abf218c4589e"
    },
    {
        "raw": " ###\nPredicates:\nCollectEvidence(x) | Readable(x) | Audible(x) | Visible(x) | Exhibit(x) | PartyTestimony(x) | WitnessTestimony(x) | ExpertiseConclusion(x) | Minutes(x) | Custom(x) | PropertyValuation(x) | PriceAppraisal(x) | LawSource(x) | Evidence(x).\n\nExplanation:\nCollectEvidence(x): x is a source of evidence collection.\nReadable(x): x is readable.\nAudible(x): x is audible.\nVisible(x): x is visible.\nExhibit(x): x is an exhibit.\nPartyTestimony(x): x is a testimony of an involved party.\nWitnessTestimony(x): x is a testimony of a witness.\nExpertiseConclusion(x): x is an expertise conclusion.\nMinutes(x): x is a minutes on the on-site evaluation results.\nCustom(x): x is a custom.\nPropertyValuation(x): x is a property valuation result.\nPriceAppraisal(x): x is a price appraisal result.\nLawSource(x): x is a source prescribed by law.\nEvidence(x): x is evidence.\n\nPremises:\nall x (CollectEvidence(x) -> (Readable(x) | Audible(x) | Visible(x) | Exhibit(x) | PartyTestimony(x) | WitnessTestimony(x) | ExpertiseConclusion(x) | Minutes(x) | Custom(x) | PropertyValuation(x) | PriceAppraisal(x) | LawSource(x))).\nall x (WitnessTestimony(x) -> CollectEvidence(x)).\nall x (CollectEvidence(x) -> Evidence(x)).\n\nConclusion:\nall x (WitnessTestimony(x) -> Evidence(x)).",
        "premises": [
            "all x (CollectEvidence(x) -> (Readable(x) | Audible(x) | Visible(x) | Exhibit(x) | PartyTestimony(x) | WitnessTestimony(x) | ExpertiseConclusion(x) | Minutes(x) | Custom(x) | PropertyValuation(x) | PriceAppraisal(x) | LawSource(x))).",
            "all x (WitnessTestimony(x) -> CollectEvidence(x)).",
            "all x (CollectEvidence(x) -> Evidence(x))."
        ],
        "conclusion": "all x (WitnessTestimony(x) -> Evidence(x)).",
        "id": "fa817187-6280-4f98-b4be-dd107672fd42"
    },
    {
        "raw": " ###\nPredicates:\nMarried(x, y) | Adult(x) | SexualIntercourse(x, y) | Child(x) | Imprisonment(x) | RegisterMarriage(x, y) | ValidMarriage(x, y) | LiveTogether(x, y) | Recognized(x, y) | Divorced(x, y) | Remarry(x, y) | Convicted(x).\n\nExplanation:\nMarried(x, y): x is married to y.\nAdult(x): x is an adult.\nSexualIntercourse(x, y): x has sexual intercourse with y.\nChild(x): x is a child.\nImprisonment(x): x is sentenced to imprisonment.\nRegisterMarriage(x, y): x and y register their marriage.\nValidMarriage(x, y): x and y have a valid marriage.\nLiveTogether(x, y): x and y live together.\nRecognized(x, y): x and y are recognized as a couple by law.\nDivorced(x, y): x and y are divorced.\nRemarry(x, y): x and y remarry each other.\nConvicted(x): x is convicted.\n\nPremises:\nall x (Adult(x) & SexualIntercourse(x, y) & Child(y) -> Imprisonment(x)).\nall x (RegisterMarriage(x, y) -> ValidMarriage(x, y)).\nall x (LiveTogether(x, y) & -RegisterMarriage(x, y) -> -Recognized(x, y)).\nall x (Divorced(x, y) & Remarry(x, y) -> RegisterMarriage(x, y)).\n\nConclusion:\nall x (LiveTogether(x, y) & Child(x) & SexualIntercourse(x, y) -> Convicted(x)).\n\nNote: The conclusion assumes that the couple lives together without registering their marriage and that one of them is a child under the age of consent. If the couple is married and registered their marriage, they would not be convicted under these circumstances.",
        "premises": [
            "all x (Adult(x) & SexualIntercourse(x, y) & Child(y) -> Imprisonment(x)).",
            "all x (RegisterMarriage(x, y) -> ValidMarriage(x, y)).",
            "all x (LiveTogether(x, y) & -RegisterMarriage(x, y) -> -Recognized(x, y)).",
            "all x (Divorced(x, y) & Remarry(x, y) -> RegisterMarriage(x, y))."
        ],
        "conclusion": "Note: The conclusion assumes that the couple lives together without registering their marriage and that one of them is a child under the age of consent. If the couple is married and registered their marriage, they would not be convicted under these circumstances.",
        "id": "f4ace39b-f5bc-4fe2-a490-367a0697ae0b"
    },
    {
        "raw": " ###\nPredicates:\nSubmitDossier(x) | DossierComponent(x) | Declaration(x) | GuardianAppointmentPaper(x) | GuardianLetter(x) | GuardianAppointingPerson(x) | CompleteDossier(x) | ValidDossier(x) | CollectFees(x) | IssueAppointmentSlip(x) | IncompleteDossier(x) | InvalidDossier(x) | VerifyDossier(x) | ProposeSolution(x) | DirectorDecision(x) | ForeignElements(x).\n\nExplanation:\nSubmitDossier(x): x submits dossier.\nDossierComponent(x): x is a component of the dossier.\nDeclaration(x): x is a declaration.\nGuardianAppointmentPaper(x): x is a guardian appointment paper.\nGuardianLetter(x): x is a guardian letter.\nGuardianAppointingPerson(x): x is a guardian-appointing person.\nCompleteDossier(x): x is a complete dossier.\nValidDossier(x): x is a valid dossier.\nCollectFees(x): x collects fees.\nIssueAppointmentSlip(x): x issues an appointment slip.\nIncompleteDossier(x): x is an incomplete dossier.\nInvalidDossier(x): x is an invalid dossier.\nVerifyDossier(x): x verifies the dossier.\nProposeSolution(x): x proposes a solution.\nDirectorDecision(x): x is a decision made by the director.\nForeignElements(x): x involves foreign elements.\n\nPremises:\nall x (SubmitDossier(x) -> DossierComponent(x)).\nall x (DossierComponent(x) -> (Declaration(x) | GuardianAppointmentPaper(x) | GuardianLetter(x))).\nall x (GuardianLetter(x) -> GuardianAppointingPerson(x)).\nall x (CompleteDossier(x) & ValidDossier(x) -> CollectFees(x) & IssueAppointmentSlip(x)).\nall x (IncompleteDossier(x) | InvalidDossier(x) -> VerifyDossier(x) & ProposeSolution(x) & DirectorDecision(x)).\n\nConclusion:\nall x (SubmitDossier(x) -> ForeignElements(x)).\n\nNote: The conclusion does not follow from the premises, as the rules do not provide information about the involvement of foreign elements in the application for recognition of guardianship.",
        "premises": [
            "all x (SubmitDossier(x) -> DossierComponent(x)).",
            "all x (DossierComponent(x) -> (Declaration(x) | GuardianAppointmentPaper(x) | GuardianLetter(x))).",
            "all x (GuardianLetter(x) -> GuardianAppointingPerson(x)).",
            "all x (CompleteDossier(x) & ValidDossier(x) -> CollectFees(x) & IssueAppointmentSlip(x)).",
            "all x (IncompleteDossier(x) | InvalidDossier(x) -> VerifyDossier(x) & ProposeSolution(x) & DirectorDecision(x))."
        ],
        "conclusion": "Note: The conclusion does not follow from the premises, as the rules do not provide information about the involvement of foreign elements in the application for recognition of guardianship.",
        "id": "9b4f331e-b079-4880-82b6-0061701f791f"
    }
]