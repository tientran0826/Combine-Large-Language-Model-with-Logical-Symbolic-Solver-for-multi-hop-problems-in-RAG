[
    {
        "raw": "Rules:\n1.Article 2 of the Circular No. 15/2011/TT-NHNN stipulates the level of cash in foreign currencies and cash in Vietnamese currency to be declared to the border-gate customs upon exit and entry.\n2. Individuals, when exiting or entering through international border gates of Vietnam with passports, carrying cash in foreign currencies, Vietnam dong exceeding the levels prescribed must declare such to the border-gate customs offices.\n3. The entry-exit declaration with the border-gate customs office's certification of the amount of cash in foreign currencies brought in, made according to a set form, shall serve as a basis for a licensed credit institution to allow the depositing of cash amounts in foreign currency into the payment account.\n4. The level of cash in foreign currencies and cash in Vietnam dong required to be declared to the border-gate customs is not applicable to individuals carrying payment instruments and valuable papers in foreign currency or Vietnam dong.\n\nGoals:\nAre customs declarations required when carrying VND 20 million abroad?\n\nPredicates:\nDeclare(x) | Carry(x) | Customs(x) | Vietnam(x) | VND(x) | Level(x) | Licensed(x) | Payment(x) | Instrument(x) | Valuable(x) | Abroad(x) | Required(x)\n\nExplanation:\nDeclare(x): x makes a declaration.\nCarry(x): x carries something.\nCustoms(x): x is related to customs.\nVietnam(x): x is in the territory of Vietnam.\nVND(x): x is in Vietnamese dong.\nLevel(x): x is a level of cash.\nLicensed(x): x is a licensed credit institution.\nPayment(x): x is a payment account.\nInstrument(x): x is a payment instrument.\nValuable(x): x is a valuable paper.\nAbroad(x): x is abroad.\nRequired(x): x is required.\n\nPremises:\nall x (Carry(x) & VND(x) & Abroad(x) -> Declare(x) & Level(x) <= 15000000).\nall x (Licensed(x) -> Payment(x)).\nall x (Instrument(x) | Valuable(x) -> ~Declare(x)).\nall x (Declare(x) -> Customs(x)).\nall x (Customs(x) -> Vietnam(x)).\n\nConclusion:\nall x (Carry(x) & VND(x) & Abroad(x) & VND(x) = 20000000 -> Declare(x)).",
        "premises": [
            "all x (Carry(x) & VND(x) & Abroad(x) -> Declare(x) & Level(x) <= 15000000).",
            "all x (Licensed(x) -> Payment(x)).",
            "all x (Instrument(x) | Valuable(x) -> ~Declare(x)).",
            "all x (Declare(x) -> Customs(x)).",
            "all x (Customs(x) -> Vietnam(x))."
        ],
        "conclusion": "all x (Carry(x) & VND(x) & Abroad(x) & VND(x) = 20000000 -> Declare(x)).",
        "id": "9b0ccfe7-97bf-4565-94ac-c26875f5a044"
    },
    {
        "raw": "Here is the output:\n\nRules:\n1. Non-cash payment instruments include cheques, payment orders, payment order, collection order, bank cards and other payment instruments as prescribed by the State Bank.\n2. Illegal payment instruments are payment instruments not specified in Clause 6 of this Article.\n3. Prohibited acts include forging, modifying, erasing, replacing payment instruments, payment documents; storing, circulating, transferring, using counterfeit payment instruments.\n4. Prohibited acts include infiltrating or attempting to infiltrate, sabotaging or illegally changing software programs and electronic databases used in payment.\n5. Prohibited acts include providing false information during the provision and use of payment services and payment intermediary services.\n6. Prohibited acts include disclosing or providing information related to deposit of account holders at payment service providers against law regulations.\n7. Prohibited acts include opening or maintaining anonymous or impersonation checking accounts.\n8. Prohibited acts include issuing, providing and using illegal payment instruments.\n\nGoals:\nCryptocurrencies are recognized as a legitimate payment vehicle on the electronic exchanges.\n\nPredicates:\nPaymentInstrument(x) | Illegal(x) | StateBank(x) | Prescribed(x) | Forge(x) | Modify(x) | Erase(x) | Replace(x) | Store(x) | Circulate(x) | Transfer(x) | Use(x) | Infiltrate(x) | Sabotage(x) | Change(x) | ProvideFalseInfo(x) | Disclose(x) | OpenAnonymousAccount(x) | Legitimate(x) | ElectronicExchanges(x) | Cryptocurrency(x)\n\nExplanation:\nPaymentInstrument(x): x is a payment instrument.\nIllegal(x): x is illegal.\nStateBank(x): x is the State Bank.\nPrescribed(x): x is prescribed by the State Bank.\nForge(x): x forges payment instruments.\nModify(x): x modifies payment instruments.\nErase(x): x erases payment instruments.\nReplace(x): x replaces payment instruments.\nStore(x): x stores payment instruments.\nCirculate(x): x circulates payment instruments.\nTransfer(x): x transfers payment instruments.\nUse(x): x uses payment instruments.\nInfiltrate(x): x infiltrates software programs and electronic databases.\nSabotage(x): x sabotages software programs and electronic databases.\nChange(x): x changes software programs and electronic databases.\nProvideFalseInfo(x): x provides false information.\nDisclose(x): x discloses information.\nOpenAnonymousAccount(x): x opens or maintains anonymous or impersonation checking accounts.\nLegitimate(x): x is legitimate.\nElectronicExchanges(x): x is on electronic exchanges.\nCryptocurrency(x): x is a cryptocurrency.\n\nPremises:\nall x (PaymentInstrument(x) -> (~Illegal(x) <-> Prescribed(x))).\nall x (Illegal(x) -> (Forge(x) | Modify(x) | Erase(x) | Replace(x) | Store(x) | Circulate(x) | Transfer(x) | Use(x))).\nall x (Infiltrate(x) -> Illegal(x)).\nall x (Sabotage(x) -> Illegal(x)).\nall x (Change(x) -> Illegal(x)).\nall x (ProvideFalseInfo(x) -> Illegal(x)).\nall x (Disclose(x) -> Illegal(x)).\nall x (OpenAnonymousAccount(x) -> Illegal(x)).\nall x (Cryptocurrency(x) -> PaymentInstrument(x)).\n-Illegal(x) | Legitimate(x).\nall x (ElectronicExchanges(x) -> Legitimate(x)).\n\nConclusion:\nall x (Cryptocurrency(x) -> Legitimate(x)).",
        "premises": [
            "all x (PaymentInstrument(x) -> (~Illegal(x) <-> Prescribed(x))).",
            "all x (Illegal(x) -> (Forge(x) | Modify(x) | Erase(x) | Replace(x) | Store(x) | Circulate(x) | Transfer(x) | Use(x))).",
            "all x (Infiltrate(x) -> Illegal(x)).",
            "all x (Sabotage(x) -> Illegal(x)).",
            "all x (Change(x) -> Illegal(x)).",
            "all x (ProvideFalseInfo(x) -> Illegal(x)).",
            "all x (Disclose(x) -> Illegal(x)).",
            "all x (OpenAnonymousAccount(x) -> Illegal(x)).",
            "all x (Cryptocurrency(x) -> PaymentInstrument(x)).",
            "-Illegal(x) | Legitimate(x).",
            "all x (ElectronicExchanges(x) -> Legitimate(x))."
        ],
        "conclusion": "all x (Cryptocurrency(x) -> Legitimate(x)).",
        "id": "7c2bdc89-9f2d-4ef3-9147-0cfc3d47d5c7"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1. Clause 1 Article 23 of Decree No. 88/2019/ND-CP stipulates as follows: Trading foreign currency between individuals if the value of foreign currency sold or bought is under USD 1,000 (or equivalent value in another foreign currency).\n2. Trading foreign currency at an organization that is not permitted to exchange foreign currency if the foreign currency bought or sold is under 1,000 US dollars (or an equivalent value).\n3. Failing to comply with regulations of law when making payment for goods/services in foreign currency with the value under U.S. dollar (or similar value in other foreign currencies).\n\nGoals:\nThere is no penalty for trading foreign currency at unauthorized organizations.\n\nPredicates:\nTrade(x) | Individual(x) | Organization(x) | Authorized(x) | ForeignCurrency(x) | Value(x) | USD(x) | Penalty(x) | Law(x) | Goods(x) | Services(x)\n\nExplanation:\nTrade(x): x trades foreign currency.\nIndividual(x): x is an individual.\nOrganization(x): x is an organization.\nAuthorized(x): x is authorized to exchange foreign currency.\nForeignCurrency(x): x is foreign currency.\nValue(x): x has a value.\nUSD(x): x is in US dollars.\nPenalty(x): x has a penalty.\nLaw(x): x complies with the law.\nGoods(x): x is goods.\nServices(x): x is services.\n\nPremises:\nall x (Trade(x) & Individual(x) & Value(x) < 1000 & ForeignCurrency(x) -> ~Penalty(x)).\nall x (Trade(x) & Organization(x) & ~Authorized(x) & Value(x) < 1000 & ForeignCurrency(x) -> Penalty(x)).\nall x (Trade(x) & Goods(x) & Services(x) & ~Law(x) & Value(x) < 1000 & ForeignCurrency(x) -> Penalty(x)).\n~Penalty(x) | ~Trade(x) | ~Organization(x) | Authorized(x).\nall x (Trade(x) -> ForeignCurrency(x)).\nall x (ForeignCurrency(x) -> Value(x)).\n\nConclusion:\n~all x (Trade(x) & Organization(x) & ~Authorized(x) -> Penalty(x)).",
        "premises": [
            "all x (Trade(x) & Individual(x) & Value(x) < 1000 & ForeignCurrency(x) -> ~Penalty(x)).",
            "all x (Trade(x) & Organization(x) & ~Authorized(x) & Value(x) < 1000 & ForeignCurrency(x) -> Penalty(x)).",
            "all x (Trade(x) & Goods(x) & Services(x) & ~Law(x) & Value(x) < 1000 & ForeignCurrency(x) -> Penalty(x)).",
            "~Penalty(x) | ~Trade(x) | ~Organization(x) | Authorized(x).",
            "all x (Trade(x) -> ForeignCurrency(x)).",
            "all x (ForeignCurrency(x) -> Value(x))."
        ],
        "conclusion": "~all x (Trade(x) & Organization(x) & ~Authorized(x) -> Penalty(x)).",
        "id": "064d2f1d-03e5-4089-ba44-b7f4d0b1cea0"
    },
    {
        "raw": "Rules:\n1. An application form for checking account opening is required.\n2. The account holder's citizen identification card or ID card or unexpired passport is required.\n3. Additional documents are required for certain cases (e.g. Vietnamese citizen under 14, foreigner).\n\nGoals:\nOpen a bank account without a CCCD card is legal.\n\nPredicates:\nOpen(x) | ApplicationForm(x) | CCCD(x) | IDCard(x) | Passport(x) | Citizen(x) | Foreigner(x) | Guardian(x) | Representative(x) | Legal(x) | Required(x) | Document(x) | Bank(x).\n\nExplanation:\nOpen(x): x opens a bank account.\nApplicationForm(x): x is an application form.\nCCCD(x): x is a citizen identification card.\nIDCard(x): x is an ID card.\nPassport(x): x is an unexpired passport.\nCitizen(x): x is a Vietnamese citizen.\nForeigner(x): x is a foreigner.\nGuardian(x): x is a guardian.\nRepresentative(x): x is a legal representative.\nLegal(x): x is legal.\nRequired(x): x is required.\nDocument(x): x is a document.\nBank(x): x is a bank.\n\nPremises:\nall x (Open(x) -> (ApplicationForm(x) & (CCCD(x) | IDCard(x) | Passport(x)))).\nall x (Citizen(x) & Under14(x) -> Required(BirthCertificate(x))).\nall x (Foreigner(x) -> Required(EntryVisa(x))).\nall x (Open(x) & (Guardian(x) | Representative(x)) -> Required(AdditionalDocument(x))).\n-CCCD(x) | Required(x).\nall x (Open(x) -> Bank(x)).\n\nConclusion:\n- all x (Open(x) -> CCCD(x)).",
        "premises": [
            "all x (Open(x) -> (ApplicationForm(x) & (CCCD(x) | IDCard(x) | Passport(x)))).",
            "all x (Citizen(x) & Under14(x) -> Required(BirthCertificate(x))).",
            "all x (Foreigner(x) -> Required(EntryVisa(x))).",
            "all x (Open(x) & (Guardian(x) | Representative(x)) -> Required(AdditionalDocument(x))).",
            "-CCCD(x) | Required(x).",
            "all x (Open(x) -> Bank(x))."
        ],
        "conclusion": "- all x (Open(x) -> CCCD(x)).",
        "id": "e1946d8a-ebdb-49ba-964d-ba72fffe2433"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1. Article 2 of Circular No. 11/2014/TT-NHNN prohibits carrying ingot gold and raw material gold upon entry or exit by passport.\n2. Foreigners carrying gold bullion or gold material shall deposit at customs warehouses or transfer abroad and bear all related expenses.\n3. Declaration of gold jewelry in a total amount of 300g or more upon entry or exit by passport is required.\n\nGoals:\nForeigners are allowed to bring gold jewelry into Vietnam.\n\nPredicates:\nCarry(x) | IngotGold(x) | RawMaterialGold(x) | GoldBullion(x) | GoldMaterial(x) | GoldJewelry(x) | Declare(x) | Deposit(x) | Transfer(x) | BearExpenses(x) | Allowed(x) | Foreigner(x) | Vietnam(x) | Passport(x) | Customs(x) | DeclareAmount(x).\n\nExplanation:\nCarry(x): x carries gold.\nIngotGold(x): x is ingot gold.\nRawMaterialGold(x): x is raw material gold.\nGoldBullion(x): x is gold bullion.\nGoldMaterial(x): x is gold material.\nGoldJewelry(x): x is gold jewelry.\nDeclare(x): x declares gold.\nDeposit(x): x deposits gold.\nTransfer(x): x transfers gold.\nBearExpenses(x): x bears expenses.\nAllowed(x): x is allowed.\nForeigner(x): x is a foreigner.\nVietnam(x): x is in Vietnam.\nPassport(x): x uses a passport.\nCustoms(x): x is related to customs.\nDeclareAmount(x): x declares a certain amount.\n\nPremises:\nall x (Foreigner(x) & Carry(x) & IngotGold(x) -> ~Allowed(x)).\nall x (Foreigner(x) & Carry(x) & GoldBullion(x) -> Deposit(x) | Transfer(x)).\nall x (Foreigner(x) & Carry(x) & GoldJewelry(x) & DeclareAmount(x) -> Declare(x)).\nall x (Declare(x) -> Allowed(x)).\nall x (Foreigner(x) -> ~IngotGold(x)).\nall x (Foreigner(x) -> ~RawMaterialGold(x)).\n\nConclusion:\nall x (Foreigner(x) & Carry(x) & GoldJewelry(x) -> Allowed(x)).",
        "premises": [
            "all x (Foreigner(x) & Carry(x) & IngotGold(x) -> ~Allowed(x)).",
            "all x (Foreigner(x) & Carry(x) & GoldBullion(x) -> Deposit(x) | Transfer(x)).",
            "all x (Foreigner(x) & Carry(x) & GoldJewelry(x) & DeclareAmount(x) -> Declare(x)).",
            "all x (Declare(x) -> Allowed(x)).",
            "all x (Foreigner(x) -> ~IngotGold(x)).",
            "all x (Foreigner(x) -> ~RawMaterialGold(x))."
        ],
        "conclusion": "all x (Foreigner(x) & Carry(x) & GoldJewelry(x) -> Allowed(x)).",
        "id": "9789c422-3ba7-469c-ba93-7ef37943ebbc"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1.Article 3 of Decision No. 130/2003/QD-TTg provides for the protection of Vietnamese money as follows : Counterfeit money making, transporting, storing, circulating, buying and selling counterfeit money.\n2. Destroying Vietnamese currency in any form.\n3. The photocopying of Vietnamese currency for any purpose without prior written approval of the State Bank is prohibited.\n4. To refuse to receive and circulate the money issued by the State Bank in the territory of Vietnam.\nGoals:\nIs it illegal to burn money?\n###\nPredicates:\nCounterfeit(x) | Transport(x) | Store(x) | Circulate(x) | Buy(x) | Sell(x) | Destroy(x) | Photocopy(x) | Legal(x) | Approval(x) | StateBank(x) | Vietnam(x) | VietnameseCurrency(x) | Burn(x) | Illegal(x).\n\nExplanation:\nCounterfeit(x): x engages in counterfeiting money.\nTransport(x): x transports money.\nStore(x): x stores money.\nCirculate(x): x circulates money.\nBuy(x): x buys money.\nSell(x): x sells money.\nDestroy(x): x destroys money.\nPhotocopy(x): x photocopies money.\nLegal(x): x is legal.\nApproval(x): x has approval.\nStateBank(x): x is the State Bank.\nVietnam(x): x is in the territory of Vietnam.\nVietnameseCurrency(x): x is Vietnamese currency.\nBurn(x): x burns money.\nIllegal(x): x is illegal.\n\nPremises:\nall x (Counterfeit(x) -> (Transport(x) | Store(x) | Circulate(x) | Buy(x) | Sell(x))).\nall x (Destroy(x) -> Illegal(x)).\nall x (Photocopy(x) -> (Legal(x) & Approval(x))).\nall x (Legal(x) -> Vietnam(x)).\nall x (StateBank(x) -> Vietnam(x)).\n-Photocopy(x) | Approval(x).\nall x (VietnameseCurrency(x) -> StateBankApproval(x)).\nall x (Burn(x) -> Destroy(x)).\n\nConclusion:\nall x (Burn(x) -> Illegal(x)).",
        "premises": [
            "all x (Counterfeit(x) -> (Transport(x) | Store(x) | Circulate(x) | Buy(x) | Sell(x))).",
            "all x (Destroy(x) -> Illegal(x)).",
            "all x (Photocopy(x) -> (Legal(x) & Approval(x))).",
            "all x (Legal(x) -> Vietnam(x)).",
            "all x (StateBank(x) -> Vietnam(x)).",
            "-Photocopy(x) | Approval(x).",
            "all x (VietnameseCurrency(x) -> StateBankApproval(x)).",
            "all x (Burn(x) -> Destroy(x))."
        ],
        "conclusion": "all x (Burn(x) -> Illegal(x)).",
        "id": "290a8877-962e-4f88-94e9-875d9c0f9d98"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1. Pursuant to Clause 13 Article 1 of the Ordinance amending Ordinance on foreign exchange in 2013, all transactions, payments, posting, advertisements, quotations, valuation, and price entry in contracts, agreements, and other similar forms of residents and non-residents must not be made in foreign exchange, except for the cases permitted by the State bank of Vietnam.\n2. Pursuant to Article 3 of Circular No. 32/2013/TT-NHNN, all transaction, payment, posting and advertising in foreign exchange is restricted in the territory of Vietnam, except the cases in which foreign exchange is allowed.\n\nGoals:\nSigning a contract in foreign currency for lease house signing is illegal.\n\nPredicates:\nTransaction(x) | Payment(x) | Posting(x) | Advertisement(x) | Quotation(x) | Valuation(x) | PriceEntry(x) | Contract(x) | Agreement(x) | Resident(x) | NonResident(x) | ForeignExchange(x) | Permit(x) | StateBank(x) | Vietnam(x) | LeaseHouse(x) | Illegal(x).\n\nExplanation:\nTransaction(x): x is a transaction.\nPayment(x): x is a payment.\nPosting(x): x is a posting.\nAdvertisement(x): x is an advertisement.\nQuotation(x): x is a quotation.\nValuation(x): x is a valuation.\nPriceEntry(x): x is a price entry.\nContract(x): x is a contract.\nAgreement(x): x is an agreement.\nResident(x): x is a resident.\nNonResident(x): x is a non-resident.\nForeignExchange(x): x is in foreign exchange.\nPermit(x): x is permitted.\nStateBank(x): x is the State Bank.\nVietnam(x): x is in the territory of Vietnam.\nLeaseHouse(x): x is a lease house.\nIllegal(x): x is illegal.\n\nPremises:\nall x (Transaction(x) & Vietnam(x) -> ~ForeignExchange(x) | Permit(x)).\nall x (Payment(x) & Vietnam(x) -> ~ForeignExchange(x) | Permit(x)).\nall x (Posting(x) & Vietnam(x) -> ~ForeignExchange(x) | Permit(x)).\nall x (Advertisement(x) & Vietnam(x) -> ~ForeignExchange(x) | Permit(x)).\nall x (Contract(x) & ForeignExchange(x) & ~Permit(x) -> Illegal(x)).\nall x (Agreement(x) & ForeignExchange(x) & ~Permit(x) -> Illegal(x)).\nall x (LeaseHouse(x) -> Contract(x)).\n\nConclusion:\nall x (Contract(x) & ForeignExchange(x) & LeaseHouse(x) -> Illegal(x)).",
        "premises": [
            "all x (Transaction(x) & Vietnam(x) -> ~ForeignExchange(x) | Permit(x)).",
            "all x (Payment(x) & Vietnam(x) -> ~ForeignExchange(x) | Permit(x)).",
            "all x (Posting(x) & Vietnam(x) -> ~ForeignExchange(x) | Permit(x)).",
            "all x (Advertisement(x) & Vietnam(x) -> ~ForeignExchange(x) | Permit(x)).",
            "all x (Contract(x) & ForeignExchange(x) & ~Permit(x) -> Illegal(x)).",
            "all x (Agreement(x) & ForeignExchange(x) & ~Permit(x) -> Illegal(x)).",
            "all x (LeaseHouse(x) -> Contract(x))."
        ],
        "conclusion": "all x (Contract(x) & ForeignExchange(x) & LeaseHouse(x) -> Illegal(x)).",
        "id": "7fbf3cc8-1c9a-4a0c-9ede-ec20f362e60c"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Enterprises shall not make cash payment in capital contribution transactions and in the purchase, sale or transfer of capital contributions to enterprises.\n2. Enterprises other than credit institutions do not use cash when borrowing and lending to each other.\n\nGoals:\nThe company is not allowed to use cash when lending.\n\nPredicates:\nCashPayment(x) | CapitalContribution(x) | Purchase(x) | Sale(x) | Transfer(x) | Borrowing(x) | Lending(x) | Enterprise(x) | CreditInstitution(x) | Allowed(x).\n\nExplanation:\nCashPayment(x): x makes cash payment.\nCapitalContribution(x): x is a capital contribution.\nPurchase(x): x is a purchase.\nSale(x): x is a sale.\nTransfer(x): x is a transfer.\nBorrowing(x): x is borrowing.\nLending(x): x is lending.\nEnterprise(x): x is an enterprise.\nCreditInstitution(x): x is a credit institution.\nAllowed(x): x is allowed.\n\nPremises:\nall x (Enterprise(x) & CapitalContribution(x) -> ~CashPayment(x)).\nall x (Enterprise(x) & ~CreditInstitution(x) & Borrowing(x) & Lending(x) -> ~CashPayment(x)).\nall x (Enterprise(x) & Lending(x) -> Borrowing(x)).\nall x (Allowed(x) -> ~CashPayment(x)).\n\nConclusion:\nall x (Enterprise(x) & Lending(x) -> ~CashPayment(x)).",
        "premises": [
            "all x (Enterprise(x) & CapitalContribution(x) -> ~CashPayment(x)).",
            "all x (Enterprise(x) & ~CreditInstitution(x) & Borrowing(x) & Lending(x) -> ~CashPayment(x)).",
            "all x (Enterprise(x) & Lending(x) -> Borrowing(x)).",
            "all x (Allowed(x) -> ~CashPayment(x))."
        ],
        "conclusion": "all x (Enterprise(x) & Lending(x) -> ~CashPayment(x)).",
        "id": "6b1e724-2a30-49d9-8c43-ca7af168eea2"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. The debt with restructured repayment term is the debt whose repayment period is adjusted and/or rescheduled by the credit institution or foreign bank branch when the customer is incapable of paying principal and/or orbital interest on the agreed schedule but is considered by the Credit institution or Foreign bank branch to be capable of fully paying principal, interest on schedule.\nGoals:\nIs the undue debt a bad debt?\n\nPredicates:\nDebt(x) | Restructured(x) | Repayment(x) | Adjusted(x) | Rescheduled(x) | Incapable(x) | Pay(x) | Principal(x) | Interest(x) | Schedule(x) | CreditInstitution(x) | ForeignBankBranch(x) | Customer(x) | BadDebt(x) | UndueDebt(x).\n\nExplanation:\nDebt(x): x is a debt.\nRestructured(x): x has a restructured repayment term.\nRepayment(x): x is a repayment.\nAdjusted(x): x is adjusted.\nRescheduled(x): x is rescheduled.\nIncapable(x): x is incapable of paying.\nPay(x): x pays.\nPrincipal(x): x is a principal.\nInterest(x): x is an interest.\nSchedule(x): x is a schedule.\nCreditInstitution(x): x is a credit institution.\nForeignBankBranch(x): x is a foreign bank branch.\nCustomer(x): x is a customer.\nBadDebt(x): x is a bad debt.\nUndueDebt(x): x is an undue debt.\n\nPremises:\nall x (Debt(x) & Incapable(x) & Restructured(x) -> Pay(x)).\nall x (Restructured(x) -> (Adjusted(x) | Rescheduled(x))).\nall x (Adjusted(x) -> Repayment(x)).\nall x (Rescheduled(x) -> Repayment(x)).\nall x (Repayment(x) -> (Principal(x) & Interest(x))).\nall x (Principal(x) & Interest(x) -> Schedule(x)).\nall x (Schedule(x) -> (CreditInstitution(x) | ForeignBankBranch(x))).\nall x (CreditInstitution(x) -> Customer(x)).\nall x (ForeignBankBranch(x) -> Customer(x)).\nall x (Customer(x) -> Debt(x)).\n-UndueDebt(x) | BadDebt(x).\n\nConclusion:\nall x (UndueDebt(x) -> BadDebt(x)).",
        "premises": [
            "all x (Debt(x) & Incapable(x) & Restructured(x) -> Pay(x)).",
            "all x (Restructured(x) -> (Adjusted(x) | Rescheduled(x))).",
            "all x (Adjusted(x) -> Repayment(x)).",
            "all x (Rescheduled(x) -> Repayment(x)).",
            "all x (Repayment(x) -> (Principal(x) & Interest(x))).",
            "all x (Principal(x) & Interest(x) -> Schedule(x)).",
            "all x (Schedule(x) -> (CreditInstitution(x) | ForeignBankBranch(x))).",
            "all x (CreditInstitution(x) -> Customer(x)).",
            "all x (ForeignBankBranch(x) -> Customer(x)).",
            "all x (Customer(x) -> Debt(x)).",
            "-UndueDebt(x) | BadDebt(x)."
        ],
        "conclusion": "all x (UndueDebt(x) -> BadDebt(x)).",
        "id": "0b1c6aeb-f312-4192-8b83-45f266e256c7"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1. Clause 4 Article 68 of the Government's Decree No. 171/2013/ND-CP provides for the power to impose penalties for road and rail transport offences.\n\nGoals:\nDid the officer in the line get a red line?\n\nPredicates:\nOfficer(x) | Line(x) | RedLine(x) | Penalty(x) | Road(x) | Rail(x) | Transport(x) | Decree(x) | Government(x).\n\nExplanation:\nOfficer(x): x is an officer.\nLine(x): x is in a line.\nRedLine(x): x gets a red line.\nPenalty(x): x imposes a penalty.\nRoad(x): x is related to road transport.\nRail(x): x is related to rail transport.\nTransport(x): x is related to transport.\nDecree(x): x is a decree.\nGovernment(x): x is the Government.\n\nPremises:\nall x (Officer(x) -> Line(x)).\nall x (Line(x) -> Transport(x)).\nall x (Transport(x) -> (Road(x) | Rail(x))).\nall x (Decree(x) -> Government(x)).\nall x (Penalty(x) -> Decree(x)).\n-RedLine(x) | Officer(x).\n\nConclusion:\nall x (Officer(x) -> RedLine(x)).",
        "premises": [
            "all x (Officer(x) -> Line(x)).",
            "all x (Line(x) -> Transport(x)).",
            "all x (Transport(x) -> (Road(x) | Rail(x))).",
            "all x (Decree(x) -> Government(x)).",
            "all x (Penalty(x) -> Decree(x)).",
            "-RedLine(x) | Officer(x)."
        ],
        "conclusion": "all x (Officer(x) -> RedLine(x)).",
        "id": "8121f6ab-4eb9-493e-8a64-2ecce6cbd45e"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Clause 2 Article 3 of Decree No. 73/2016/ND-CP prescribes the rules for participation in insurance and provision of insurance services in Vietnam.\n2. Organizations and individuals may only participate in insurance at licensed insurance enterprises or foreign branches in Vietnam.\n3. No organization or individual is allowed to illegally interfere in the insurance buyer's right to select an insurer or foreign branch.\n4. Clause 5 Article 9 of the Law on Insurance Business 2022 prohibits any act of threatening or coercing conclusion of insurance policies.\n\nGoals:\nA commercial bank is not allowed to force customers to buy insurance when they borrow.\n\nPredicates:\nParticipate(x) | Insurance(x) | Vietnam(x) | Licensed(x) | Interfere(x) | Select(x) | Threaten(x) | Coerce(x) | Force(x) | Buy(x) | Borrow(x) | CommercialBank(x) | Customer(x).\n\nExplanation:\nParticipate(x): x participates in insurance.\nInsurance(x): x is insurance.\nVietnam(x): x is in Vietnam.\nLicensed(x): x is licensed.\nInterfere(x): x interferes in the insurance buyer's right.\nSelect(x): x selects an insurer or foreign branch.\nThreaten(x): x threatens to conclude insurance policies.\nCoerce(x): x coerces to conclude insurance policies.\nForce(x): x forces to buy insurance.\nBuy(x): x buys insurance.\nBorrow(x): x borrows.\nCommercialBank(x): x is a commercial bank.\nCustomer(x): x is a customer.\n\nPremises:\nall x (Participate(x) -> (Insurance(x) & Vietnam(x) & Licensed(x))).\nall x (-Interfere(x) | Select(x)).\nall x (-Threaten(x) | -Coerce(x)).\nall x (Force(x) -> (Threaten(x) | Coerce(x))).\nall x (CommercialBank(x) -> -Force(Customer(x))).\nall x (Buy(x) -> Insurance(x)).\nall x (Borrow(x) -> Customer(x)).\n\nConclusion:\nall x (-Force(CommercialBank(x)) | -Buy(Customer(x))).",
        "premises": [
            "all x (Participate(x) -> (Insurance(x) & Vietnam(x) & Licensed(x))).",
            "all x (-Interfere(x) | Select(x)).",
            "all x (-Threaten(x) | -Coerce(x)).",
            "all x (Force(x) -> (Threaten(x) | Coerce(x))).",
            "all x (CommercialBank(x) -> -Force(Customer(x))).",
            "all x (Buy(x) -> Insurance(x)).",
            "all x (Borrow(x) -> Customer(x))."
        ],
        "conclusion": "all x (-Force(CommercialBank(x)) | -Buy(Customer(x))).",
        "id": "4e45a89c-0a24-4025-8283-071a48e0df16"
    },
    {
        "raw": "Here is the output:\n\nRules:\n1.Clause 3 Article 11 of Decree No. 100/2019/ND-CP prescribes a fine of VND 200,000-VND to 300.000 VND for persons who are carried on motorcycles, mopeds (including electric motorcycles) and vehicles similar to motorcycles, vehicles similar as moped motorcycles, and mopheds (even electric bicycles) without \\\" helmet for riders \\\" or with \\\" helmet \\\" not fastening straps in accordance with specifications when participating in road traffic.\n\nGoals:\nIs there any fine for people sitting on motorbike without helmet?\n\nPredicates:\nFine(x) | Motorbike(x) | Helmet(x) | Rider(x) | Fasten(x) | Specification(x) | RoadTraffic(x) | Participate(x) | VND(x).\n\nExplanation:\nFine(x): x is fined.\nMotorbike(x): x is a motorbike.\nHelmet(x): x wears a helmet.\nRider(x): x is a rider.\nFasten(x): x fastens the helmet.\nSpecification(x): x meets the specifications.\nRoadTraffic(x): x participates in road traffic.\nParticipate(x): x participates in an activity.\nVND(x): x is a fine in VND.\n\nPremises:\nall x (Motorbike(x) & Rider(x) & !Helmet(x) -> Fine(x)).\nall x (Motorbike(x) & Rider(x) & Helmet(x) & !Fasten(x) -> Fine(x)).\nall x (Participate(x) & RoadTraffic(x) & Motorbike(x) & Rider(x) -> (Helmet(x) & Fasten(x)) | Fine(x)).\nall x (VND(x) -> Fine(x)).\n\nConclusion:\nall x (Motorbike(x) & Rider(x) & !Helmet(x) -> Fine(x)).",
        "premises": [
            "all x (Motorbike(x) & Rider(x) & !Helmet(x) -> Fine(x)).",
            "all x (Motorbike(x) & Rider(x) & Helmet(x) & !Fasten(x) -> Fine(x)).",
            "all x (Participate(x) & RoadTraffic(x) & Motorbike(x) & Rider(x) -> (Helmet(x) & Fasten(x)) | Fine(x)).",
            "all x (VND(x) -> Fine(x))."
        ],
        "conclusion": "all x (Motorbike(x) & Rider(x) & !Helmet(x) -> Fine(x)).",
        "id": "5b287a17-0ea7-457c-8a7b-a38a040c2444"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Ensure facilities, testing equipment and scoring instruments as prescribed to ensure accuracy and objectivity in tests.\n2. Report to the Department of Transport and Directorate for Roads of Vietnam on inaccurate and unstable testing equipment or changes in testing equipment for timely handling.\n3. Cooperate with driver training institutions in providing refresher courses and driving test councils in organizing tests conveniently and on schedule.\n4. Comply with and cooperate with competent authorities in inspecting and assessing driving test centers.\n5. Publicly announce the testing fees and other service charges.\n\nGoals:\nIs it allowed to use external vehicles when driving test?\n\nPredicates:\nFacility(x) | Equipment(x) | ScoringInstrument(x) | Accurate(x) | Objective(x) | Report(x) | Inaccurate(x) | Unstable(x) | Cooperate(x) | RefresherCourse(x) | DrivingTestCouncil(x) | Convenient(x) | Schedule(x) | Comply(x) | Inspect(x) | Assess(x) | PubliclyAnnounce(x) | ExternalVehicle(x) | Allowed(x) | DrivingTest(x).\n\nExplanation:\nFacility(x): x has facilities.\nEquipment(x): x has equipment.\nScoringInstrument(x): x has scoring instruments.\nAccurate(x): x is accurate.\nObjective(x): x is objective.\nReport(x): x reports.\nInaccurate(x): x is inaccurate.\nUnstable(x): x is unstable.\nCooperate(x): x cooperates.\nRefresherCourse(x): x provides refresher courses.\nDrivingTestCouncil(x): x is a driving test council.\nConvenient(x): x is convenient.\nSchedule(x): x is on schedule.\nComply(x): x complies.\nInspect(x): x inspects.\nAssess(x): x assesses.\nPubliclyAnnounce(x): x publicly announces.\nExternalVehicle(x): x is an external vehicle.\nAllowed(x): x is allowed.\nDrivingTest(x): x is a driving test.\n\nPremises:\nall x (Facility(x) -> Accurate(x)).\nall x (Equipment(x) -> Objective(x)).\nall x (ScoringInstrument(x) -> Accurate(x)).\nall x (Report(x) -> Inaccurate(x) | Unstable(x)).\nall x (Cooperate(x) -> RefresherCourse(x) | DrivingTestCouncil(x)).\nall x (Comply(x) -> Inspect(x) | Assess(x)).\nall x (PubliclyAnnounce(x) -> Schedule(x)).\n-ExternalVehicle(x) | Allowed(x).\nall x (DrivingTest(x) -> Facility(x) | Equipment(x) | ScoringInstrument(x)).\n\nConclusion:\nall x (DrivingTest(x) -> Allowed(x)).",
        "premises": [
            "all x (Facility(x) -> Accurate(x)).",
            "all x (Equipment(x) -> Objective(x)).",
            "all x (ScoringInstrument(x) -> Accurate(x)).",
            "all x (Report(x) -> Inaccurate(x) | Unstable(x)).",
            "all x (Cooperate(x) -> RefresherCourse(x) | DrivingTestCouncil(x)).",
            "all x (Comply(x) -> Inspect(x) | Assess(x)).",
            "all x (PubliclyAnnounce(x) -> Schedule(x)).",
            "-ExternalVehicle(x) | Allowed(x).",
            "all x (DrivingTest(x) -> Facility(x) | Equipment(x) | ScoringInstrument(x))."
        ],
        "conclusion": "all x (DrivingTest(x) -> Allowed(x)).",
        "id": "4e10db30-25ac-4972-8782-c85bebe53b57"
    },
    {
        "raw": "Here is the output:\n\nRules:\n1. A fine of VND 1,000,010-VND 2,020,500 shall be imposed for: Gathering to encourage or incite the vehicle running behind the speed limit, weaving, speeding, chasing on public roads, or racing illegally.\n\nGoals:\nIs there a fine for illegal racing cheer?\n\nPredicates:\nFine(x) | Gather(x) | Encourage(x) | Incite(x) | SpeedLimit(x) | Weave(x) | Speed(x) | Chase(x) | Race(x) | Illegal(x) | PublicRoads(x) | Cheer(x) | RacingCheer(x).\n\nExplanation:\nFine(x): x is fined.\nGather(x): x gathers.\nEncourage(x): x encourages.\nIncite(x): x incites.\nSpeedLimit(x): x is running behind the speed limit.\nWeave(x): x weaves.\nSpeed(x): x speeds.\nChase(x): x chases.\nRace(x): x races.\nIllegal(x): x is illegal.\nPublicRoads(x): x is on public roads.\nCheer(x): x cheers.\nRacingCheer(x): x is illegal racing cheer.\n\nPremises:\nall x (Gather(x) & Encourage(x) & Incite(x) & (SpeedLimit(x) | Weave(x) | Speed(x) | Chase(x) | Race(x)) -> Fine(x)).\nall x (Race(x) & Illegal(x) -> RacingCheer(x)).\nall x (RacingCheer(x) -> Cheer(x)).\nall x (Cheer(x) -> PublicRoads(x)).\n\nConclusion:\nall x (RacingCheer(x) -> Fine(x)).",
        "premises": [
            "all x (Gather(x) & Encourage(x) & Incite(x) & (SpeedLimit(x) | Weave(x) | Speed(x) | Chase(x) | Race(x)) -> Fine(x)).",
            "all x (Race(x) & Illegal(x) -> RacingCheer(x)).",
            "all x (RacingCheer(x) -> Cheer(x)).",
            "all x (Cheer(x) -> PublicRoads(x))."
        ],
        "conclusion": "all x (RacingCheer(x) -> Fine(x)).",
        "id": "5eb886d7-66cc-4af9-82d0-68165dab50d2"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1. Taxis must use fare meters installed and inspected by a competent measurement agency.\n2. Fare meters must have invoice or fare receipt printing devices connected to them.\n3. Fare meters and printing devices must be fixed at noticeable positions.\n4. Drivers must print invoices or fare receipts and return them to passengers upon journey completion.\n5. Fare receipts must contain certain information: transport business name, vehicle's registration plate number, travel distance, and total fare payable.\n\nGoals:\nTaxi fare payment invoice is received.\n\nPredicates:\nUseFareMeter(x) | Installed(x) | Inspected(x) | Connected(x) | Fixed(x) | Print(x) | Return(x) | Contain(x) | Received(x) | CompetentAgency(x) | MeasurementAgency(x) | Taxi(x) | FareMeter(x) | PrintingDevice(x) | Invoice(x) | FareReceipt(x) | Passenger(x) | Journey(x) | BusinessName(x) | VehicleRegistration(x) | TravelDistance(x) | TotalFare(x).\n\nExplanation:\nUseFareMeter(x): x uses fare meter.\nInstalled(x): x is installed.\nInspected(x): x is inspected.\nConnected(x): x is connected.\nFixed(x): x is fixed.\nPrint(x): x prints.\nReturn(x): x returns.\nContain(x): x contains.\nReceived(x): x is received.\nCompetentAgency(x): x is a competent agency.\nMeasurementAgency(x): x is a measurement agency.\nTaxi(x): x is a taxi.\nFareMeter(x): x is a fare meter.\nPrintingDevice(x): x is a printing device.\nInvoice(x): x is an invoice.\nFareReceipt(x): x is a fare receipt.\nPassenger(x): x is a passenger.\nJourney(x): x is a journey.\nBusinessName(x): x is a business name.\nVehicleRegistration(x): x is a vehicle registration.\nTravelDistance(x): x is a travel distance.\nTotalFare(x): x is a total fare.\n\nPremises:\nall x (Taxi(x) -> UseFareMeter(x)).\nall x (UseFareMeter(x) -> (Installed(x) & Inspected(x))).\nall x (Installed(x) -> CompetentAgency(x)).\nall x (Inspected(x) -> MeasurementAgency(x)).\nall x (UseFareMeter(x) -> Connected(x)).\nall x (Connected(x) -> Fixed(x)).\nall x (Fixed(x) -> Print(x)).\nall x (Print(x) -> Return(x)).\nall x (Return(x) -> Contain(x)).\nall x (Contain(x) -> (BusinessName(x) & VehicleRegistration(x) & TravelDistance(x) & TotalFare(x))).\nall x (Contain(x) -> Received(x)).\n\nConclusion:\nall x (Taxi(x) -> Received(x)).",
        "premises": [
            "all x (Taxi(x) -> UseFareMeter(x)).",
            "all x (UseFareMeter(x) -> (Installed(x) & Inspected(x))).",
            "all x (Installed(x) -> CompetentAgency(x)).",
            "all x (Inspected(x) -> MeasurementAgency(x)).",
            "all x (UseFareMeter(x) -> Connected(x)).",
            "all x (Connected(x) -> Fixed(x)).",
            "all x (Fixed(x) -> Print(x)).",
            "all x (Print(x) -> Return(x)).",
            "all x (Return(x) -> Contain(x)).",
            "all x (Contain(x) -> (BusinessName(x) & VehicleRegistration(x) & TravelDistance(x) & TotalFare(x))).",
            "all x (Contain(x) -> Received(x))."
        ],
        "conclusion": "all x (Taxi(x) -> Received(x)).",
        "id": "30bcbd8a-b317-4796-989c-bc8e651a35b5"
    },
    {
        "raw": "Here is the output:\n\nRules:\n1. Clause 1 Article 56 of the Law on Penalties for Administrative Violations 2012 provides for administrative sanctioning without making a record in certain cases.\n2. Administrative sanction without record is applied in case of warning or fine up to VND 250,000 for individuals and VND 500,000 to organizations.\n3. The competent persons must issue decisions on sanctioning administrative violations on the spot.\n4. Administrative violations detected through the use of technical and professional means and equipment must be recorded in writing.\n\nGoals:\nThere is a place penalty for driving a motorcycle past a red light.\n\nPredicates:\nSanction(x) | Record(x) | Warning(x) | Fine(x) | Individual(x) | Organization(x) | Competent(x) | Spot(x) | TechnicalMeans(x) | ProfessionalEquipment(x) | WrittenRecord(x) | Penalty(x) | Place(x) | Motorcycle(x) | RedLight(x).\n\nExplanation:\nSanction(x): x is sanctioned.\nRecord(x): x makes a record.\nWarning(x): x is warned.\nFine(x): x is fined.\nIndividual(x): x is an individual.\nOrganization(x): x is an organization.\nCompetent(x): x is competent.\nSpot(x): x is on the spot.\nTechnicalMeans(x): x uses technical means.\nProfessionalEquipment(x): x uses professional equipment.\nWrittenRecord(x): x makes a written record.\nPenalty(x): x is penalized.\nPlace(x): x is a place.\nMotorcycle(x): x is a motorcycle.\nRedLight(x): x is a red light.\n\nPremises:\nall x (Sanction(x) -> (Warning(x) | Fine(x))).\nall x (Individual(x) -> Fine(x, 250000)).\nall x (Organization(x) -> Fine(x, 500000)).\nall x (Competent(x) -> Spot(x)).\nall x (TechnicalMeans(x) & ProfessionalEquipment(x) -> WrittenRecord(x)).\nall x (Motorcycle(x) & RedLight(x) -> Penalty(x)).\nall x (Penalty(x) -> Place(x)).\n\nConclusion:\nall x (Motorcycle(x) & RedLight(x) -> Place(x)).",
        "premises": [
            "all x (Sanction(x) -> (Warning(x) | Fine(x))).",
            "all x (Individual(x) -> Fine(x, 250000)).",
            "all x (Organization(x) -> Fine(x, 500000)).",
            "all x (Competent(x) -> Spot(x)).",
            "all x (TechnicalMeans(x) & ProfessionalEquipment(x) -> WrittenRecord(x)).",
            "all x (Motorcycle(x) & RedLight(x) -> Penalty(x)).",
            "all x (Penalty(x) -> Place(x))."
        ],
        "conclusion": "all x (Motorcycle(x) & RedLight(x) -> Place(x)).",
        "id": "47a6e4c4-d3c3-494e-98ea-90934f1fd5cd"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1. Clause 2 Article 3 of Decree No. 77/2021/ND-CP provides for the period of time for calculating and not calculating seniority pay, including: Probation period, unpaid leave, sick leave, maternity leave, working as experts, suspension, temporary detainment, detention, and other periods.\nGoals:\nApprenticeship period is included in the teacher seniority allowance.\n\nPredicates:\nProbation(x) | UnpaidLeave(x) | SickLeave(x) | MaternityLeave(x) | Experts(x) | Suspension(x) | TemporaryDetainment(x) | Detention(x) | OtherPeriods(x) | Apprenticeship(x) | Included(x) | Teacher(x) | SeniorityAllowance(x).\n\nExplanation:\nProbation(x): x is in probation period.\nUnpaidLeave(x): x takes unpaid leave.\nSickLeave(x): x takes sick leave.\nMaternityLeave(x): x takes maternity leave.\nExperts(x): x works as experts.\nSuspension(x): x is suspended.\nTemporaryDetainment(x): x is temporarily detained.\nDetention(x): x is detained.\nOtherPeriods(x): x is in other periods.\nApprenticeship(x): x is in apprenticeship period.\nIncluded(x): x is included in seniority allowance.\nTeacher(x): x is a teacher.\nSeniorityAllowance(x): x receives seniority allowance.\n\nPremises:\nall x (Probation(x) -> ~Included(x)).\nall x (UnpaidLeave(x) -> ~Included(x)).\nall x (SickLeave(x) -> ~Included(x)).\nall x (MaternityLeave(x) -> ~Included(x)).\nall x (Experts(x) -> ~Included(x)).\nall x (Suspension(x) -> ~Included(x)).\nall x (TemporaryDetainment(x) -> ~Included(x)).\nall x (Detention(x) -> ~Included(x)).\nall x (OtherPeriods(x) -> ~Included(x)).\nall x (Apprenticeship(x) -> Teacher(x)).\nall x (Teacher(x) -> SeniorityAllowance(x)).\n\nConclusion:\n~all x (Apprenticeship(x) -> Included(x)).",
        "premises": [
            "all x (Probation(x) -> ~Included(x)).",
            "all x (UnpaidLeave(x) -> ~Included(x)).",
            "all x (SickLeave(x) -> ~Included(x)).",
            "all x (MaternityLeave(x) -> ~Included(x)).",
            "all x (Experts(x) -> ~Included(x)).",
            "all x (Suspension(x) -> ~Included(x)).",
            "all x (TemporaryDetainment(x) -> ~Included(x)).",
            "all x (Detention(x) -> ~Included(x)).",
            "all x (OtherPeriods(x) -> ~Included(x)).",
            "all x (Apprenticeship(x) -> Teacher(x)).",
            "all x (Teacher(x) -> SeniorityAllowance(x))."
        ],
        "conclusion": "~all x (Apprenticeship(x) -> Included(x)).",
        "id": "51f10192-1372-4963-8d64-987396853c1b"
    },
    {
        "raw": "Here is the output:\n\nRules:\n1. Candidates who have a valid Foreign Language certificate with a minimum score are exempt from Foreign Language paper for high school graduation assessment.\n2. The valid Foreign Language certificates include TOEFL ITP, TOEFL iBT, and others.\n3. The minimum score for English subject is 450 points for TOEFL ITP and 45 points for TOEFL iBT.\n\nGoals:\nTOEIC certificates are exempted from English language exam exemption for 2021 high school graduation exam.\n\nPredicates:\nExempt(x) | Valid(x) | Certificate(x) | Score(x) | English(x) | TOEFLITP(x) | TOEFLiBT(x) | TOEIC(x) | HighSchool(x) | Graduation(x) | Language(x) | Subject(x) | Minimum(x) | Issuer(x).\n\nExplanation:\nExempt(x): x is exempt from Foreign Language paper.\nValid(x): x has a valid Foreign Language certificate.\nCertificate(x): x is a Foreign Language certificate.\nScore(x): x has a minimum score.\nEnglish(x): x is the English subject.\nTOEFLITP(x): x is a TOEFL ITP certificate.\nTOEFLiBT(x): x is a TOEFL iBT certificate.\nTOEIC(x): x is a TOEIC certificate.\nHighSchool(x): x is a high school.\nGraduation(x): x is a graduation assessment.\nLanguage(x): x is a Foreign Language.\nSubject(x): x is a subject.\nMinimum(x): x has a minimum score.\nIssuer(x): x is a certificate issuer.\n\nPremises:\nall x (Valid(x) & Score(x) -> Exempt(x)).\nall x (Certificate(x) -> Valid(x)).\nall x (TOEFLITP(x) -> Certificate(x)).\nall x (TOEFLiBT(x) -> Certificate(x)).\n-TOEIC(x) | Exempt(x).\nall x (English(x) -> Subject(x)).\nall x (HighSchool(x) -> Graduation(x)).\nall x (Language(x) -> Subject(x)).\nall x (Minimum(x) -> Score(x)).\nall x (Issuer(x) -> Certificate(x)).\n\nConclusion:\nall x (TOEIC(x) -> Exempt(x)).",
        "premises": [
            "all x (Valid(x) & Score(x) -> Exempt(x)).",
            "all x (Certificate(x) -> Valid(x)).",
            "all x (TOEFLITP(x) -> Certificate(x)).",
            "all x (TOEFLiBT(x) -> Certificate(x)).",
            "-TOEIC(x) | Exempt(x).",
            "all x (English(x) -> Subject(x)).",
            "all x (HighSchool(x) -> Graduation(x)).",
            "all x (Language(x) -> Subject(x)).",
            "all x (Minimum(x) -> Score(x)).",
            "all x (Issuer(x) -> Certificate(x))."
        ],
        "conclusion": "all x (TOEIC(x) -> Exempt(x)).",
        "id": "37218e1b-e898-4531-97ab-8c4128375fe4"
    },
    {
        "raw": "Here is the output:\n\nRules:\n1. Clause 2 Article 20 of the Regulation on admission to higher education issued together with Circular No. 09/2020/TT-BGDDT requires successful candidates to submit valid copies of certain documents.\nGoals:\nDuplicate ID is mandatory in college application.\n\nPredicates:\nSubmit(x) | Valid(x) | Document(x) | AcademicTranscript(x) | TemporaryCertificate(x) | HighSchoolDiploma(x) | BirthCertificate(x) | PriorityPolicy(x) | School(x) | Ministry(x) | Education(x) | Training(x) | ID(x) | Mandatory(x) | CollegeApplication(x).\n\nExplanation:\nSubmit(x): x submits a document.\nValid(x): x is a valid document.\nDocument(x): x is a document.\nAcademicTranscript(x): x is an academic transcript.\nTemporaryCertificate(x): x is a temporary high school graduation certificate.\nHighSchoolDiploma(x): x is a high school diploma.\nBirthCertificate(x): x is a birth certificate.\nPriorityPolicy(x): x is evidence for priority policy.\nSchool(x): x is a school.\nMinistry(x): x is the Ministry of Education and Training.\nEducation(x): x is related to education.\nTraining(x): x is related to training.\nID(x): x is an ID.\nMandatory(x): x is mandatory.\nCollegeApplication(x): x is a college application.\n\nPremises:\nall x (Submit(x) -> Valid(x)).\nall x (Valid(x) -> Document(x)).\nall x (Document(x) -> (AcademicTranscript(x) | TemporaryCertificate(x) | HighSchoolDiploma(x) | BirthCertificate(x) | PriorityPolicy(x))).\nall x (School(x) -> Ministry(x)).\nall x (Ministry(x) -> Education(x)).\nall x (Education(x) -> Training(x)).\nall x (ID(x) -> Document(x)).\n-not(Mandatory(x) & ID(x)).\n\nConclusion:\n-not(Mandatory(x) & CollegeApplication(x)).",
        "premises": [
            "all x (Submit(x) -> Valid(x)).",
            "all x (Valid(x) -> Document(x)).",
            "all x (Document(x) -> (AcademicTranscript(x) | TemporaryCertificate(x) | HighSchoolDiploma(x) | BirthCertificate(x) | PriorityPolicy(x))).",
            "all x (School(x) -> Ministry(x)).",
            "all x (Ministry(x) -> Education(x)).",
            "all x (Education(x) -> Training(x)).",
            "all x (ID(x) -> Document(x)).",
            "-not(Mandatory(x) & ID(x))."
        ],
        "conclusion": "-not(Mandatory(x) & CollegeApplication(x)).",
        "id": "178253f0-1064-4cc6-bfec-eac6f2325997"
    },
    {
        "raw": "Rules:\n1. Article 45 of the 2009 Law on Intellectual Property provides for the transfer of copyright or related rights.\n2. The author must not transfer the moral rights referred to in article 19, except for the right to publish the work.\n3. The transfer must be agreed upon by all co-owners in case of co-owned works, performances, phonograms, video recordings, or broadcasts.\n4. The licensing of copyright or related rights shall be effected through a licensing contract.\n\nGoals:\nTransfer of copyright or related rights is possible.\n\nPredicates:\nTransfer(x) | Copyright(x) | RelatedRights(x) | MoralRights(x) | Publish(x) | CoOwner(x) | Agree(x) | License(x) | Contract(x) | Possible(x) | IntellectualProperty(x) | Law(x).\n\nExplanation:\nTransfer(x): x transfers copyright or related rights.\nCopyright(x): x is a copyright.\nRelatedRights(x): x is a related right.\nMoralRights(x): x is a moral right.\nPublish(x): x publishes a work.\nCoOwner(x): x is a co-owner.\nAgree(x): x agrees to the transfer.\nLicense(x): x licenses copyright or related rights.\nContract(x): x is a contract.\nPossible(x): x is possible.\nIntellectualProperty(x): x is related to intellectual property.\nLaw(x): x is a law.\n\nPremises:\nall x (Transfer(x) -> (Copyright(x) | RelatedRights(x))).\nall x (MoralRights(x) -> ~Transfer(x)).\nall x (CoOwner(x) -> Agree(x)).\nall x (License(x) -> Contract(x)).\nall x (Contract(x) -> IntellectualProperty(x)).\nall x (IntellectualProperty(x) -> Law(x)).\nPossible(x) -> Transfer(x).\n\nConclusion:\nPossible(Transfer).",
        "premises": [
            "all x (Transfer(x) -> (Copyright(x) | RelatedRights(x))).",
            "all x (MoralRights(x) -> ~Transfer(x)).",
            "all x (CoOwner(x) -> Agree(x)).",
            "all x (License(x) -> Contract(x)).",
            "all x (Contract(x) -> IntellectualProperty(x)).",
            "all x (IntellectualProperty(x) -> Law(x)).",
            "Possible(x) -> Transfer(x)."
        ],
        "conclusion": "Possible(Transfer).",
        "id": "808a7386-db06-4da8-b618-f0eea5a09f2d"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1. Pupils and students living in households lawfully residing in localities where loans are provided and who fully meet the criteria specified in Article 2 of this Decision are required to borrow loans.\n2. For first-year pupils and students, there must be admission notices or admission certificates of their schools.\n3. For pupils and students from the second year on, they must have the school's certification that they are studying at the school and have not been administratively sanctioned or sanctioned for such acts as gambling, smoking, theft, smuggling.\n\nGoals:\nIs it possible to borrow money from a photocopy of your college application?\n\nPredicates:\nReside(x) | Lawful(x) | MeetCriteria(x) | Borrow(x) | Loan(x) | AdmissionNotice(x) | AdmissionCertificate(x) | SchoolCertification(x) | Study(x) | Sanctioned(x) | Gambling(x) | Smoking(x) | Theft(x) | Smuggling(x) | Photocopy(x) | CollegeApplication(x) | Possible(x)\n\nExplanation:\nReside(x): x resides in a locality.\nLawful(x): x is lawful.\nMeetCriteria(x): x meets the criteria.\nBorrow(x): x borrows a loan.\nLoan(x): x is a loan.\nAdmissionNotice(x): x has an admission notice.\nAdmissionCertificate(x): x has an admission certificate.\nSchoolCertification(x): x has a school certification.\nStudy(x): x is studying.\nSanctioned(x): x is sanctioned.\nGambling(x): x is gambling.\nSmoking(x): x is smoking.\nTheft(x): x is theft.\nSmuggling(x): x is smuggling.\nPhotocopy(x): x is a photocopy.\nCollegeApplication(x): x is a college application.\nPossible(x): x is possible.\n\nPremises:\nall x (Reside(x) & Lawful(x) & MeetCriteria(x) -> Borrow(x)).\nall x (Borrow(x) -> Loan(x)).\nall x (AdmissionNotice(x) -> Borrow(x)).\nall x (AdmissionCertificate(x) -> Borrow(x)).\nall x (SchoolCertification(x) -> Borrow(x)).\nall x (Study(x) -> Borrow(x)).\nall x (Sanctioned(x) -> ~Borrow(x)).\nall x (Gambling(x) -> Sanctioned(x)).\nall x (Smoking(x) -> Sanctioned(x)).\nall x (Theft(x) -> Sanctioned(x)).\nall x (Smuggling(x) -> Sanctioned(x)).\n~Photocopy(x) | ~Borrow(x).\nall x (CollegeApplication(x) -> ~Photocopy(x)).\n\nConclusion:\n~all x (Photocopy(x) -> Possible(x)).",
        "premises": [
            "all x (Reside(x) & Lawful(x) & MeetCriteria(x) -> Borrow(x)).",
            "all x (Borrow(x) -> Loan(x)).",
            "all x (AdmissionNotice(x) -> Borrow(x)).",
            "all x (AdmissionCertificate(x) -> Borrow(x)).",
            "all x (SchoolCertification(x) -> Borrow(x)).",
            "all x (Study(x) -> Borrow(x)).",
            "all x (Sanctioned(x) -> ~Borrow(x)).",
            "all x (Gambling(x) -> Sanctioned(x)).",
            "all x (Smoking(x) -> Sanctioned(x)).",
            "all x (Theft(x) -> Sanctioned(x)).",
            "all x (Smuggling(x) -> Sanctioned(x)).",
            "~Photocopy(x) | ~Borrow(x).",
            "all x (CollegeApplication(x) -> ~Photocopy(x))."
        ],
        "conclusion": "~all x (Photocopy(x) -> Possible(x)).",
        "id": "b96214fc-dfb4-46d2-98d8-bea1721ab331"
    },
    {
        "raw": "Here is the output:\n\nRules:\n1.The Development Bank may lease, mortgage and pledge assets under its rights to use and own assets in accordance with regulations of law with respect to wholly state-owned single-member limited liability companies.\n\nGoals:\nIs the Development Bank getting a lease on assets?\n\nPredicates:\nLease(x) | Mortgage(x) | Pledge(x) | Asset(x) | Right(x) | Own(x) | Regulation(x) | Law(x) | WhollyStateOwned(x) | SingleMember(x) | LimitedLiabilityCompany(x) | DevelopmentBank(x) | GetLease(x).\n\nExplanation:\nLease(x): x leases an asset.\nMortgage(x): x mortgages an asset.\nPledge(x): x pledges an asset.\nAsset(x): x is an asset.\nRight(x): x has a right.\nOwn(x): x owns an asset.\nRegulation(x): x is a regulation.\nLaw(x): x is a law.\nWhollyStateOwned(x): x is wholly state-owned.\nSingleMember(x): x is a single-member.\nLimitedLiabilityCompany(x): x is a limited liability company.\nDevelopmentBank(x): x is the Development Bank.\nGetLease(x): x gets a lease.\n\nPremises:\nall x (DevelopmentBank(x) -> (Lease(x) | Mortgage(x) | Pledge(x))).\nall x (Lease(x) -> Right(x)).\nall x (Right(x) -> Own(x)).\nall x (Own(x) -> Asset(x)).\nall x (Asset(x) -> Regulation(x)).\nall x (Regulation(x) -> Law(x)).\nall x (Law(x) -> WhollyStateOwned(x)).\nall x (WhollyStateOwned(x) -> SingleMember(x)).\nall x (SingleMember(x) -> LimitedLiabilityCompany(x)).\nall x (LimitedLiabilityCompany(x) -> DevelopmentBank(x)).\nGetLease(x) -> Lease(x).\n\nConclusion:\nall x (DevelopmentBank(x) -> GetLease(x)).",
        "premises": [
            "all x (DevelopmentBank(x) -> (Lease(x) | Mortgage(x) | Pledge(x))).",
            "all x (Lease(x) -> Right(x)).",
            "all x (Right(x) -> Own(x)).",
            "all x (Own(x) -> Asset(x)).",
            "all x (Asset(x) -> Regulation(x)).",
            "all x (Regulation(x) -> Law(x)).",
            "all x (Law(x) -> WhollyStateOwned(x)).",
            "all x (WhollyStateOwned(x) -> SingleMember(x)).",
            "all x (SingleMember(x) -> LimitedLiabilityCompany(x)).",
            "all x (LimitedLiabilityCompany(x) -> DevelopmentBank(x)).",
            "GetLease(x) -> Lease(x)."
        ],
        "conclusion": "all x (DevelopmentBank(x) -> GetLease(x)).",
        "id": "26fef828-fd26-4854-bc97-370091508c7e"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1. The current account holder may authorize another person to use the current accounts in writing.\n2. The payment account holder shall be entitled to authorize another person to use his/her payment account.\n3. The authorization in using payment account must be made in writing and comply with the provisions of the law on authorization.\n4. To authorize the use of a payment account, the account holder shall send to the payment service supplier where the account is opened a letter of authorization.\n\nGoals:\nSomeone can use my bank account.\n\nPredicates:\nAuthorize(x) | Holder(x) | Account(x) | Write(x) | Comply(x) | Law(x) | Person(x) | Use(x) | Payment(x) | Service(x) | Supplier(x) | Letter(x) | Registration(x) | Signature(x) | ID(x) | Passport(x) | Original(x) | Compare(x) | Allow(x) | Mine(x).\n\nExplanation:\nAuthorize(x): x authorizes someone.\nHolder(x): x is the account holder.\nAccount(x): x is a bank account.\nWrite(x): x is in writing.\nComply(x): x complies with the law.\nLaw(x): x is the law.\nPerson(x): x is a person.\nUse(x): x uses the account.\nPayment(x): x is a payment account.\nService(x): x is a payment service supplier.\nSupplier(x): x is a supplier.\nLetter(x): x is a letter of authorization.\nRegistration(x): x is a registration of specimen signature.\nSignature(x): x is a specimen signature.\nID(x): x is an ID card.\nPassport(x): x is a passport.\nOriginal(x): x is an original document.\nCompare(x): x is compared.\nAllow(x): x is allowed.\nMine(x): x is my account.\n\nPremises:\nall x (Holder(x) -> (Authorize(x) & Write(x))).\nall x (Authorize(x) -> Comply(x)).\nall x (Comply(x) -> Law(x)).\nall x (Authorize(x) -> (Person(x) & Use(x))).\nall x (Account(x) -> (Payment(x) | Service(x))).\nall x (Authorize(x) -> (Letter(x) & Registration(x) & Signature(x))).\nall x (Registration(x) -> (ID(x) | Passport(x))).\nall x (ID(x) -> Original(x)).\nall x (Original(x) -> Compare(x)).\nall x (Compare(x) -> Allow(x)).\nall x (Allow(x) -> Mine(x)).\n\nConclusion:\nall x (Mine(x) -> Allow(x)).",
        "premises": [
            "all x (Holder(x) -> (Authorize(x) & Write(x))).",
            "all x (Authorize(x) -> Comply(x)).",
            "all x (Comply(x) -> Law(x)).",
            "all x (Authorize(x) -> (Person(x) & Use(x))).",
            "all x (Account(x) -> (Payment(x) | Service(x))).",
            "all x (Authorize(x) -> (Letter(x) & Registration(x) & Signature(x))).",
            "all x (Registration(x) -> (ID(x) | Passport(x))).",
            "all x (ID(x) -> Original(x)).",
            "all x (Original(x) -> Compare(x)).",
            "all x (Compare(x) -> Allow(x)).",
            "all x (Allow(x) -> Mine(x))."
        ],
        "conclusion": "all x (Mine(x) -> Allow(x)).",
        "id": "35a10650-e894-4ed9-a7eb-937ad9cf7339"
    },
    {
        "raw": "Here is the output:\n\nRules:\n1. Persons aged 18 years or older and having full legal capacity as prescribed by Vietnamese law can open payment accounts.\n2. Persons from 15 years old to under 18 who do not have lost or limited legal capacity can open payment accounts.\n3. Minors aged 15, persons with limited legal capability or persons with lost legal capacity prescribed by Vietnam's law may open payment accounts through their legal representatives.\n4. People with limited cognition and behavior control prescribed by the Vietnamese law may use their guardians to open payment account.\n\nGoals:\nATM cards are available for under 18.\n\nPredicates:\nAge(x,y) | LegalCapacity(x) | VietnameseLaw(x) | OpenAccount(x) | Representative(x,y) | Guardian(x,y) | ATMCard(x) | Available(x)\n\nExplanation:\nAge(x,y): x is y years old.\nLegalCapacity(x): x has full legal capacity.\nVietnameseLaw(x): x is prescribed by Vietnamese law.\nOpenAccount(x): x can open a payment account.\nRepresentative(x,y): x is the legal representative of y.\nGuardian(x,y): x is the guardian of y.\nATMCard(x): x is an ATM card.\nAvailable(x): x is available.\n\nPremises:\nall x (Age(x,18) & LegalCapacity(x) -> OpenAccount(x)).\nall x (Age(x,y) & (15 <= y) & (y < 18) & LegalCapacity(x) -> OpenAccount(x)).\nall x (Age(x,15) & ~LegalCapacity(x) -> (exists y Representative(x,y) & OpenAccount(y))).\nall x (LimitedCognition(x) -> (exists y Guardian(x,y) & OpenAccount(y))).\n~Age(x,18) & ~Age(x,y) & (15 <= y) & (y < 18) & ~LegalCapacity(x) -> ~ATMCard(x).\n\nConclusion:\nexists x (Age(x,y) & (y < 18) & ATMCard(x) & Available(x)).",
        "premises": [
            "all x (Age(x,18) & LegalCapacity(x) -> OpenAccount(x)).",
            "all x (Age(x,y) & (15 <= y) & (y < 18) & LegalCapacity(x) -> OpenAccount(x)).",
            "all x (Age(x,15) & ~LegalCapacity(x) -> (exists y Representative(x,y) & OpenAccount(y))).",
            "all x (LimitedCognition(x) -> (exists y Guardian(x,y) & OpenAccount(y))).",
            "~Age(x,18) & ~Age(x,y) & (15 <= y) & (y < 18) & ~LegalCapacity(x) -> ~ATMCard(x)."
        ],
        "conclusion": "exists x (Age(x,y) & (y < 18) & ATMCard(x) & Available(x)).",
        "id": "4f908e7a-761c-42f1-8ea3-d4b300644b0a"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Cash withdrawal transactions by cards must be performed in Vietnam dong.\n2. For other card transactions: Transaction currency is Vietnam dong.\n3. Currency used for payment is Vietnam dong.\n4. In case of conversion from a foreign currency into Vietnam dong, the exchange rate between Vietnam dong and a foreign-currency amount shall be agreed upon by the parties in accordance with the State Bank's regulations.\n5. When conducting card transactions outside Vietnam's territory, cardholders shall make payments in Vietnam dong to card-issuing organizations at the exchange rate agreed upon by the parties in accordance with the State Bank's regulations.\n\nGoals:\nForeign exchange is possible when trading in bank cards.\n\nPredicates:\nVietnamDong(x) | ForeignCurrency(x) | CardTransaction(x) | Payment(x) | ExchangeRate(x) | StateBank(x) | Vietnam(x) | OutsideVietnam(x) | Cardholder(x) | CardIssuingOrganization(x) | Agreement(x) | Possible(x)\n\nExplanation:\nVietnamDong(x): x is Vietnam dong.\nForeignCurrency(x): x is a foreign currency.\nCardTransaction(x): x is a card transaction.\nPayment(x): x is a payment.\nExchangeRate(x): x is an exchange rate.\nStateBank(x): x is the State Bank.\nVietnam(x): x is in the territory of Vietnam.\nOutsideVietnam(x): x is outside Vietnam's territory.\nCardholder(x): x is a cardholder.\nCardIssuingOrganization(x): x is a card-issuing organization.\nAgreement(x): x is an agreement.\nPossible(x): x is possible.\n\nPremises:\nall x (CardTransaction(x) -> VietnamDong(x)).\nall x (Payment(x) -> VietnamDong(x)).\nall x (ExchangeRate(x) -> Agreement(x) & StateBank(x)).\nall x (OutsideVietnam(x) -> ExchangeRate(x)).\nall x (Cardholder(x) -> Payment(x)).\nall x (CardIssuingOrganization(x) -> Payment(x)).\n-Possible(x) | ForeignCurrency(x) & Agreement(x) & StateBank(x).\n\nConclusion:\nall x (CardTransaction(x) -> Possible(x)).",
        "premises": [
            "all x (CardTransaction(x) -> VietnamDong(x)).",
            "all x (Payment(x) -> VietnamDong(x)).",
            "all x (ExchangeRate(x) -> Agreement(x) & StateBank(x)).",
            "all x (OutsideVietnam(x) -> ExchangeRate(x)).",
            "all x (Cardholder(x) -> Payment(x)).",
            "all x (CardIssuingOrganization(x) -> Payment(x)).",
            "-Possible(x) | ForeignCurrency(x) & Agreement(x) & StateBank(x)."
        ],
        "conclusion": "all x (CardTransaction(x) -> Possible(x)).",
        "id": "95fd7816-1864-4501-803d-d10677317dd7"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Pursuant to Article 8 of Circular No. 39/2016/TT-NHNN, credit institutions are not allowed to provide loans to meet the following capital demands: Loans used for carrying out business investment activities in business lines prohibited by laws.\n2. To pay costs, meet the financial needs of transactions, acts prohibited by law.\n3. For purchase and use of goods and services in the business lines banned by law from investment.\n4. To buy gold bars.\n\nGoals:\nDid I get a bank loan to buy gold?\n\nPredicates:\nLoan(x) | Business(x) | Investment(x) | Law(x) | Prohibited(x) | Transaction(x) | Cost(x) | Financial(x) | Need(x) | Gold(x) | Bank(x) | CreditInstitution(x) | Circular(x) | Article(x).\n\nExplanation:\nLoan(x): x gets a loan.\nBusiness(x): x is a business.\nInvestment(x): x is an investment.\nLaw(x): x is a law.\nProhibited(x): x is prohibited.\nTransaction(x): x is a transaction.\nCost(x): x is a cost.\nFinancial(x): x is financial.\nNeed(x): x is a need.\nGold(x): x is gold.\nBank(x): x is a bank.\nCreditInstitution(x): x is a credit institution.\nCircular(x): x is a circular.\nArticle(x): x is an article.\n\nPremises:\nall x (Loan(x) -> (Business(x) & Investment(x) & ~Prohibited(x))).\nall x (Transaction(x) -> (Cost(x) & Financial(x) & Need(x))).\nall x (Prohibited(x) -> ~Loan(x)).\nall x (Gold(x) -> Prohibited(x)).\nall x (CreditInstitution(x) -> ~Loan(x) & Gold(x)).\nall x (Circular(x) -> Article(x)).\nall x (Article(x) -> ~Loan(x) & Gold(x)).\n\nConclusion:\n~all x (Loan(x) & Gold(x)).",
        "premises": [
            "all x (Loan(x) -> (Business(x) & Investment(x) & ~Prohibited(x))).",
            "all x (Transaction(x) -> (Cost(x) & Financial(x) & Need(x))).",
            "all x (Prohibited(x) -> ~Loan(x)).",
            "all x (Gold(x) -> Prohibited(x)).",
            "all x (CreditInstitution(x) -> ~Loan(x) & Gold(x)).",
            "all x (Circular(x) -> Article(x)).",
            "all x (Article(x) -> ~Loan(x) & Gold(x))."
        ],
        "conclusion": "~all x (Loan(x) & Gold(x)).",
        "id": "e6b27f8f-63a7-4a1d-a95b-0b8b5244f3a1"
    },
    {
        "raw": "Rules:\n1. Pursuant to Directive No. 15/CT-TTg, Chairpersons of provincial People's Committees shall direct adoption of measures to limit mass gatherings.\n2. Stop meetings and events with more than 20 people in one room.\n3. Do not gather 10 people or more outside offices, schools and hospitals.\n4. Maintain a minimum distance of 2m between people at public places.\n5. Strictly stop religious rituals and activities involving 20 or more people at religious, belief and worship establishments.\n6. Stop all cultural, sport and entertainment activities at public places.\n7. Temporarily suspend the operation of business and service establishments in the area, except for those trading essential goods and services.\n8. Restrict movement of people, especially from infected provinces to other localities.\n9. Suspend or reorganize public transportation activities to restrict movement and mass gatherings except for vehicles transporting goods.\n\nGoals:\nDid the bank work during the Covid-19 pandemic?\n\nPredicates:\nLimit(x) | Gather(x) | Meeting(x) | Event(x) | Room(x) | Outside(x) | Office(x) | School(x) | Hospital(x) | Distance(x) | Ritual(x) | Activity(x) | Establishment(x) | Business(x) | Service(x) | Essential(x) | Goods(x) | Operate(x) | Restrict(x) | Movement(x) | Infected(x) | Suspend(x) | Reorganize(x) | Transportation(x) | Vehicle(x) | GoodsTransport(x) | Bank(x) | Work(x) | Covid(x) | Pandemic(x).\n\nExplanation:\nLimit(x): x limits mass gatherings.\nGather(x): x gathers people.\nMeeting(x): x is a meeting.\nEvent(x): x is an event.\nRoom(x): x is a room.\nOutside(x): x is outside.\nOffice(x): x is an office.\nSchool(x): x is a school.\nHospital(x): x is a hospital.\nDistance(x): x maintains a minimum distance.\nRitual(x): x is a religious ritual.\nActivity(x): x is an activity.\nEstablishment(x): x is an establishment.\nBusiness(x): x is a business.\nService(x): x is a service.\nEssential(x): x is essential.\nGoods(x): x is goods.\nOperate(x): x operates.\nRestrict(x): x restricts movement.\nMovement(x): x is movement.\nInfected(x): x is infected.\nSuspend(x): x suspends.\nReorganize(x): x reorganizes.\nTransportation(x): x is transportation.\nVehicle(x): x is a vehicle.\nGoodsTransport(x): x transports goods.\nBank(x): x is a bank.\nWork(x): x works.\nCovid(x): x is Covid-19.\nPandemic(x): x is a pandemic.\n\nPremises:\nall x (Limit(x) -> (Meeting(x) & Event(x) & Room(x))).\nall x (Gather(x) -> (Outside(x) & Office(x) & School(x) & Hospital(x))).\nall x (Distance(x) -> (Room(x) & Outside(x))).\nall x (Ritual(x) -> (Activity(x) & Establishment(x))).\nall x (Business(x) -> (Service(x) & Essential(x) & Goods(x))).\nall x (Operate(x) -> (Business(x) & Service(x))).\nall x (Restrict(x) -> (Movement(x) & Infected(x))).\nall x (Suspend(x) -> (Transportation(x) & Vehicle(x) & GoodsTransport(x))).\n-Bank(x) | Operate(x).\nall x (Work(x) -> Bank(x)).\nall x (Covid(x) -> Pandemic(x)).\n\nConclusion:\n-Work(x) | Covid(x).",
        "premises": [
            "all x (Limit(x) -> (Meeting(x) & Event(x) & Room(x))).",
            "all x (Gather(x) -> (Outside(x) & Office(x) & School(x) & Hospital(x))).",
            "all x (Distance(x) -> (Room(x) & Outside(x))).",
            "all x (Ritual(x) -> (Activity(x) & Establishment(x))).",
            "all x (Business(x) -> (Service(x) & Essential(x) & Goods(x))).",
            "all x (Operate(x) -> (Business(x) & Service(x))).",
            "all x (Restrict(x) -> (Movement(x) & Infected(x))).",
            "all x (Suspend(x) -> (Transportation(x) & Vehicle(x) & GoodsTransport(x))).",
            "-Bank(x) | Operate(x).",
            "all x (Work(x) -> Bank(x)).",
            "all x (Covid(x) -> Pandemic(x))."
        ],
        "conclusion": "-Work(x) | Covid(x).",
        "id": "230258b3-21a1-4dd3-a5e7-14305eb7b836"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. After checking and verifying that documents included in the application for current account opening are sufficient, legitimate and valid as prescribed, the bank or foreign bank branch shall enter into a contract for current accounts opening with the client.\n2. The bank/foreign bank branch must meet the account holder or his/her guardian/legal representative (if the current accounts are opened through the guardian/lateral) in person when entering into the contract for opening and use of current accounts.\n3. In case where an individual living abroad, bank or foreign bank branch is unable to meet in person, it is possible to verify customer identification information through an agent bank or an intermediary bank, provided that the account holder is accurately identified and the bank or branch bank is responsible for its verification and identification of the current account holder.\n\nGoals:\nIs it possible to open a personal checking account while in a foreign country?\n\nPredicates:\nOpenAccount(x) | Meet(x) | Verify(x) | Identify(x) | Responsible(x) | Legal(x) | Valid(x) | Sufficient(x) | Prescribed(x) | Individual(x) | Abroad(x) | ForeignCountry(x) | AgentBank(x) | IntermediaryBank(x) | Guardian(x) | Representative(x) | CurrentAccount(x) | Bank(x) | ForeignBankBranch(x) | Client(x).\n\nExplanation:\nOpenAccount(x): x opens a current account.\nMeet(x): x meets in person.\nVerify(x): x verifies customer identification information.\nIdentify(x): x identifies the account holder.\nResponsible(x): x is responsible for verification and identification.\nLegal(x): x is legal.\nValid(x): x is valid.\nSufficient(x): x is sufficient.\nPrescribed(x): x is as prescribed.\nIndividual(x): x is an individual.\nAbroad(x): x is living abroad.\nForeignCountry(x): x is in a foreign country.\nAgentBank(x): x is an agent bank.\nIntermediaryBank(x): x is an intermediary bank.\nGuardian(x): x is a guardian.\nRepresentative(x): x is a legal representative.\nCurrentAccount(x): x is a current account.\nBank(x): x is a bank.\nForeignBankBranch(x): x is a foreign bank branch.\nClient(x): x is a client.\n\nPremises:\nall x (OpenAccount(x) -> (Meet(x) | Verify(x))).\nall x (Meet(x) -> Individual(x)).\nall x (Verify(x) -> (Identify(x) & Responsible(x))).\nall x (Individual(x) -> (Abroad(x) -> ForeignCountry(x))).\nall x (ForeignCountry(x) -> (AgentBank(x) | IntermediaryBank(x))).\nall x (OpenAccount(x) -> CurrentAccount(x)).\nall x (CurrentAccount(x) -> (Bank(x) | ForeignBankBranch(x))).\nall x (Bank(x) -> Client(x)).\nall x (ForeignBankBranch(x) -> Client(x)).\n-OpenAccount(x) | Abroad(x).\n\nConclusion:\nall x (Abroad(x) -> OpenAccount(x)).",
        "premises": [
            "all x (OpenAccount(x) -> (Meet(x) | Verify(x))).",
            "all x (Meet(x) -> Individual(x)).",
            "all x (Verify(x) -> (Identify(x) & Responsible(x))).",
            "all x (Individual(x) -> (Abroad(x) -> ForeignCountry(x))).",
            "all x (ForeignCountry(x) -> (AgentBank(x) | IntermediaryBank(x))).",
            "all x (OpenAccount(x) -> CurrentAccount(x)).",
            "all x (CurrentAccount(x) -> (Bank(x) | ForeignBankBranch(x))).",
            "all x (Bank(x) -> Client(x)).",
            "all x (ForeignBankBranch(x) -> Client(x)).",
            "-OpenAccount(x) | Abroad(x)."
        ],
        "conclusion": "all x (Abroad(x) -> OpenAccount(x)).",
        "id": "493689fe-2bee-4b7e-b5a3-836d0d4016d6"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Clause 7 Article 1 of Circular No. 02/2019/TT-NHNN amending Circular No 23/23/TH14/TD-NN dated June 23,2024 of the Governor of the State bank of Vietnam on guidelines for opening and use of checking accounts at payment service providers shall be stipulated as follows: 1 a) An application form for opening a checking account made using the form provided by the bank/foreign bank's branch where the checking account is opened and in accordance with Clause 1 Article 13 hereof; b) The account holder's ID card or ID paper or unexpired passport, birth certificate (if the account holder is a Vietnamese citizen aged under 14 years ), entry visa or document proving exemption from entry visa (if he/she is a foreigner ), etc.\n\nGoals:\nIs a foreigner allowed to open a bank account in Vietnam?\n\nPredicates:\nOpen(x,y) | Foreigner(x) | Vietnam(y) | Bank(y) | ID(x) | Passport(x) | Visa(x) | Account(x) | Holder(x) | Citizen(x) | Allowed(x,y)\n\nExplanation:\nOpen(x,y): x opens an account in y.\nForeigner(x): x is a foreigner.\nVietnam(y): y is Vietnam.\nBank(y): y is a bank.\nID(x): x has an ID.\nPassport(x): x has a passport.\nVisa(x): x has a visa.\nAccount(x): x is an account.\nHolder(x): x is an account holder.\nCitizen(x): x is a Vietnamese citizen.\nAllowed(x,y): x is allowed to open an account in y.\n\nPremises:\nall x (Foreigner(x) -> (ID(x) | Passport(x) | Visa(x))).\nall x (Citizen(x) -> ID(x)).\nall x (Open(x,y) -> (Bank(y) & (ID(x) | Passport(x) | Visa(x)))).\nall x (Bank(y) -> Vietnam(y)).\nall x (Open(x,y) -> Holder(x)).\nall x (Holder(x) -> Account(x)).\nall x (Account(x) -> Bank(x)).\n\nConclusion:\nall x (Foreigner(x) -> Allowed(x,Vietnam)).",
        "premises": [
            "all x (Foreigner(x) -> (ID(x) | Passport(x) | Visa(x))).",
            "all x (Citizen(x) -> ID(x)).",
            "all x (Open(x,y) -> (Bank(y) & (ID(x) | Passport(x) | Visa(x)))).",
            "all x (Bank(y) -> Vietnam(y)).",
            "all x (Open(x,y) -> Holder(x)).",
            "all x (Holder(x) -> Account(x)).",
            "all x (Account(x) -> Bank(x))."
        ],
        "conclusion": "all x (Foreigner(x) -> Allowed(x,Vietnam)).",
        "id": "6b572955-8836-4739-b856-aa1e912ff92f"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1. Article 105 of the 2015 Civil Code defines property as objects, money, valuable papers, and property rights.\n2. Property includes real estate and movable property, which can be existing or future property.\n3. Valuable papers include government bonds, corporate bonds, promissory notes, shares, and other valuable papers in foreign currency.\n\nGoals:\nAre stocks considered an asset?\n\nPredicates:\nProperty(x) | Objects(x) | Money(x) | ValuablePapers(x) | PropertyRights(x) | RealEstate(x) | MovableProperty(x) | ExistingProperty(x) | FutureProperty(x) | GovernmentBonds(x) | CorporateBonds(x) | PromissoryNotes(x) | Shares(x) | Asset(x) | ForeignCurrency(x)\n\nExplanation:\nProperty(x): x is a property.\nObjects(x): x is an object.\nMoney(x): x is money.\nValuablePapers(x): x is a valuable paper.\nPropertyRights(x): x is a property right.\nRealEstate(x): x is a real estate.\nMovableProperty(x): x is a movable property.\nExistingProperty(x): x is an existing property.\nFutureProperty(x): x is a future property.\nGovernmentBonds(x): x is a government bond.\nCorporateBonds(x): x is a corporate bond.\nPromissoryNotes(x): x is a promissory note.\nShares(x): x is a share.\nAsset(x): x is an asset.\nForeignCurrency(x): x is in foreign currency.\n\nPremises:\nall x (Property(x) <-> (Objects(x) | Money(x) | ValuablePapers(x) | PropertyRights(x))).\nall x (Property(x) -> (RealEstate(x) | MovableProperty(x))).\nall x (RealEstate(x) | MovableProperty(x) -> (ExistingProperty(x) | FutureProperty(x))).\nall x (ValuablePapers(x) -> (GovernmentBonds(x) | CorporateBonds(x) | PromissoryNotes(x) | Shares(x))).\nall x (Shares(x) -> ValuablePapers(x)).\nall x (ValuablePapers(x) -> Asset(x)).\n\nConclusion:\nall x (Shares(x) -> Asset(x)).",
        "premises": [
            "all x (Property(x) <-> (Objects(x) | Money(x) | ValuablePapers(x) | PropertyRights(x))).",
            "all x (Property(x) -> (RealEstate(x) | MovableProperty(x))).",
            "all x (RealEstate(x) | MovableProperty(x) -> (ExistingProperty(x) | FutureProperty(x))).",
            "all x (ValuablePapers(x) -> (GovernmentBonds(x) | CorporateBonds(x) | PromissoryNotes(x) | Shares(x))).",
            "all x (Shares(x) -> ValuablePapers(x)).",
            "all x (ValuablePapers(x) -> Asset(x))."
        ],
        "conclusion": "all x (Shares(x) -> Asset(x)).",
        "id": "ab0f849c-7637-4a9b-81b8-35140324fbc0"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1. Credit institutions shall take and pay out savings deposits at legal transaction locations within the operation network of credit institutions.\n2. For each passbook, the credit institution may receive and pay out savings deposits at the transaction office where the passbook is issued or at other transaction offices of the credit institutions.\n\nGoals:\nWithdrawal of savings account at another branch is possible.\n\nPredicates:\nTransaction(x) | Pay(x) | Savings(x) | CreditInstitution(x) | Legal(x) | OperationNetwork(x) | Passbook(x) | Office(x) | Withdrawal(x) | Branch(x) | SamePlace(x) | Accurate(x) | Safe(x) | Depositor(x) | Lost(x) | Person(x).\n\nExplanation:\nTransaction(x): x is a transaction location.\nPay(x): x pays out savings deposits.\nSavings(x): x is a savings deposit.\nCreditInstitution(x): x is a credit institution.\nLegal(x): x is legal.\nOperationNetwork(x): x is within the operation network.\nPassbook(x): x is a passbook.\nOffice(x): x is a transaction office.\nWithdrawal(x): x is a withdrawal of savings account.\nBranch(x): x is a branch.\nSamePlace(x): x is the same place.\nAccurate(x): x is accurate.\nSafe(x): x is safe.\nDepositor(x): x is a depositor.\nLost(x): x is a lost person.\nPerson(x): x is a person.\n\nPremises:\nall x (Transaction(x) -> CreditInstitution(x)).\nall x (Pay(x) -> Savings(x)).\nall x (Savings(x) -> CreditInstitution(x)).\nall x (Passbook(x) -> Office(x)).\nall x (Office(x) -> CreditInstitution(x)).\nall x (Withdrawal(x) -> (Branch(x) | SamePlace(x))).\nall x (Accurate(x) -> Safe(x)).\nall x (Safe(x) -> Depositor(x)).\nall x (Depositor(x) -> Person(x)).\nall x (Lost(x) -> Person(x)).\n\nConclusion:\nall x (Withdrawal(x) -> Branch(x)).",
        "premises": [
            "all x (Transaction(x) -> CreditInstitution(x)).",
            "all x (Pay(x) -> Savings(x)).",
            "all x (Savings(x) -> CreditInstitution(x)).",
            "all x (Passbook(x) -> Office(x)).",
            "all x (Office(x) -> CreditInstitution(x)).",
            "all x (Withdrawal(x) -> (Branch(x) | SamePlace(x))).",
            "all x (Accurate(x) -> Safe(x)).",
            "all x (Safe(x) -> Depositor(x)).",
            "all x (Depositor(x) -> Person(x)).",
            "all x (Lost(x) -> Person(x))."
        ],
        "conclusion": "all x (Withdrawal(x) -> Branch(x)).",
        "id": "d6b119c0-4773-4b19-88ad-b9de5f9af16b"
    },
    {
        "raw": "Rules:\n1. Article 4 of Decree No. 117/2018/ND-CP prescribes confidentiality and provision of client information.\n2. Regulatory authorities, other organizations and individuals may only request client information for the right purposes, contents, scope and within their competence as prescribed by law.\n3. The applicant shall retain and preserve client information, applications for provision of client information and delivery of client data in accordance with regulations of law on retention and preservation of documents.\n4. Article 11 of Decree No. 117/2018/ND-CP prescribes the following cases of provision of client information.\n\nGoals:\nLeaking customer information is not possible.\n\nPredicates:\nConfidential(x) | Provide(x) | Access(x) | Approve(x) | Request(x) | Purpose(x) | Content(x) | Scope(x) | Competence(x) | Law(x) | Retain(x) | Preserve(x) | Document(x) | Leak(x) | Customer(x) | Information(x) | Banker(x) | Client(x) | Representative(x).\n\nExplanation:\nConfidential(x): x is confidential.\nProvide(x): x provides information.\nAccess(x): x accesses information.\nApprove(x): x approves.\nRequest(x): x requests information.\nPurpose(x): x is for a purpose.\nContent(x): x is content.\nScope(x): x is within scope.\nCompetence(x): x is within competence.\nLaw(x): x is according to law.\nRetain(x): x retains information.\nPreserve(x): x preserves information.\nDocument(x): x is a document.\nLeak(x): x leaks information.\nCustomer(x): x is a customer.\nInformation(x): x is information.\nBanker(x): x is a banker.\nClient(x): x is a client.\nRepresentative(x): x is a representative.\n\nPremises:\nall x (Provide(x) -> (Confidential(x) & Approve(x))).\nall x (Request(x) -> (Purpose(x) & Content(x) & Scope(x) & Competence(x) & Law(x))).\nall x (Retain(x) -> Preserve(x)).\nall x (Preserve(x) -> Document(x)).\nall x (Leak(x) -> -Confidential(x)).\nall x (Customer(x) -> Client(x)).\nall x (Banker(x) -> -Leak(x)).\n\nConclusion:\nall x (-Leak(x)).",
        "premises": [
            "all x (Provide(x) -> (Confidential(x) & Approve(x))).",
            "all x (Request(x) -> (Purpose(x) & Content(x) & Scope(x) & Competence(x) & Law(x))).",
            "all x (Retain(x) -> Preserve(x)).",
            "all x (Preserve(x) -> Document(x)).",
            "all x (Leak(x) -> -Confidential(x)).",
            "all x (Customer(x) -> Client(x)).",
            "all x (Banker(x) -> -Leak(x))."
        ],
        "conclusion": "all x (-Leak(x)).",
        "id": "eff43c90-3eb3-4871-a6c1-c043c45a8fc2"
    },
    {
        "raw": "Rules:\n1. Gems include diamonds, ruby, emerald, sapphire, pearls, and other gems.\n2. Precious metals include silver, platinum, fine art items, and jewelry made of silver and platinum alloys.\n3. Customs declaration is required for foreign currencies, Vietnam dong in cash, precious metals, and gemstones.\n\nGoals:\nForeigners can bring diamonds into Vietnam.\n\nPredicates:\nGems(x) | PreciousMetals(x) | CustomsDeclaration(x) | ForeignCurrencies(x) | VietnamDong(x) | Foreigner(x) | Bring(x) | Diamond(x) | Vietnam(x) | StateBank(x).\n\nExplanation:\nGems(x): x is a gem.\nPreciousMetals(x): x is a precious metal.\nCustomsDeclaration(x): x requires customs declaration.\nForeignCurrencies(x): x is a foreign currency.\nVietnamDong(x): x is Vietnam dong.\nForeigner(x): x is a foreigner.\nBring(x): x brings something.\nDiamond(x): x is a diamond.\nVietnam(x): x is in Vietnam.\nStateBank(x): x is the State Bank.\n\nPremises:\nall x (Gems(x) -> CustomsDeclaration(x)).\nall x (PreciousMetals(x) -> CustomsDeclaration(x)).\nall x (ForeignCurrencies(x) -> CustomsDeclaration(x)).\nall x (VietnamDong(x) -> CustomsDeclaration(x)).\nall x (Diamond(x) -> Gems(x)).\nall x (Foreigner(x) -> Bring(x)).\nall x (Bring(x) -> Vietnam(x)).\nall x (StateBank(x) -> Vietnam(x)).\n\nConclusion:\nall x (Foreigner(x) & Bring(x) & Diamond(x) -> Vietnam(x)).",
        "premises": [
            "all x (Gems(x) -> CustomsDeclaration(x)).",
            "all x (PreciousMetals(x) -> CustomsDeclaration(x)).",
            "all x (ForeignCurrencies(x) -> CustomsDeclaration(x)).",
            "all x (VietnamDong(x) -> CustomsDeclaration(x)).",
            "all x (Diamond(x) -> Gems(x)).",
            "all x (Foreigner(x) -> Bring(x)).",
            "all x (Bring(x) -> Vietnam(x)).",
            "all x (StateBank(x) -> Vietnam(x))."
        ],
        "conclusion": "all x (Foreigner(x) & Bring(x) & Diamond(x) -> Vietnam(x)).",
        "id": "45c18845-5024-4d6a-a857-fa844c908a18"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1. In order to follow procedures for depositing saving deposits at transaction offices of credit institutions, depositors must directly visit transaction offices and present identity proof of depositor.\n2. In case of joint savings deposit, all depositors must present identity proving documents of their own.\n3. In case of making a savings deposit through the legal representative, the legal representatives must present documents proving the legal representation status of the legal delegates, identity proof of the Legal representatives and identity proofs of the depositors.\n4. The depositor's identity proof is the unexpired ID card or Citizen Identity Card or passport or the birth certificate of the individual who is under 14 years of age.\n\nGoals:\nAre you required to present ID or ID in order to deposit your savings?\n\nPredicates:\nDeposit(x) | Present(x) | IdentityProof(x) | ID(x) | CitizenIdentityCard(x) | Passport(x) | BirthCertificate(x) | LegalRepresentative(x) | LegalRepresentationStatus(x) | Depositor(x) | JointSavingsDeposit(x) | TransactionOffice(x) | CreditInstitution(x) | Required(x) | Savings(x).\n\nExplanation:\nDeposit(x): x makes a deposit.\nPresent(x): x presents something.\nIdentityProof(x): x is an identity proof.\nID(x): x is an ID card.\nCitizenIdentityCard(x): x is a Citizen Identity Card.\nPassport(x): x is a passport.\nBirthCertificate(x): x is a birth certificate.\nLegalRepresentative(x): x is a legal representative.\nLegalRepresentationStatus(x): x has legal representation status.\nDepositor(x): x is a depositor.\nJointSavingsDeposit(x): x is a joint savings deposit.\nTransactionOffice(x): x is a transaction office.\nCreditInstitution(x): x is a credit institution.\nRequired(x): x is required.\nSavings(x): x is savings.\n\nPremises:\nall x (Deposit(x) -> Present(x) & IdentityProof(x)).\nall x (JointSavingsDeposit(x) -> (Present(x) & IdentityProof(x))).\nall x (LegalRepresentative(x) -> (Present(x) & LegalRepresentationStatus(x) & IdentityProof(x))).\nall x (IdentityProof(x) <-> (ID(x) | CitizenIdentityCard(x) | Passport(x) | BirthCertificate(x))).\nall x (Deposit(x) -> Depositor(x)).\nall x (Depositor(x) -> TransactionOffice(x) & CreditInstitution(x)).\nall x (Savings(x) -> Deposit(x)).\n\nConclusion:\nall x (Deposit(x) -> Required(x)).",
        "premises": [
            "all x (Deposit(x) -> Present(x) & IdentityProof(x)).",
            "all x (JointSavingsDeposit(x) -> (Present(x) & IdentityProof(x))).",
            "all x (LegalRepresentative(x) -> (Present(x) & LegalRepresentationStatus(x) & IdentityProof(x))).",
            "all x (IdentityProof(x) <-> (ID(x) | CitizenIdentityCard(x) | Passport(x) | BirthCertificate(x))).",
            "all x (Deposit(x) -> Depositor(x)).",
            "all x (Depositor(x) -> TransactionOffice(x) & CreditInstitution(x)).",
            "all x (Savings(x) -> Deposit(x))."
        ],
        "conclusion": "all x (Deposit(x) -> Required(x)).",
        "id": "2409b5fb-e120-4e60-8c30-2c925303a276"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1. Article 10 of the Circular No. 48/2018/TT-NHNN prescribing savings deposits issued by the State Bank of Vietnam prescribes currencies of savings deposit receipt and payment, including: 1 The currency of savings deposit is Vietnam dong and foreign currencies. Credit institutions shall determine the type of foreign currency in which savings deposits are taken. 2. The currency used for savings deposit payment is the currency deposited by the depositor. The payment for foreign currencies in small amounts shall comply with the guidance of the credit institution.\n\nGoals:\nIs it allowed to withdraw savings in foreign currency?\n\nExplanation:\nSavingsDeposit(x): x is a savings deposit.\nCurrency(x): x is a currency.\nVietnamDong(x): x is Vietnam dong.\nForeignCurrency(x): x is a foreign currency.\nCreditInstitution(x): x is a credit institution.\nDepositor(x): x is a depositor.\nPayment(x): x is a payment.\nAllowed(x): x is allowed.\n\nPremises:\nall x (SavingsDeposit(x) -> (Currency(x) = VietnamDong(x) | Currency(x) = ForeignCurrency(x))).\nall x (Currency(x) = ForeignCurrency(x) -> CreditInstitution(x)).\nall x (Payment(x) = Currency(x)).\nall x (ForeignCurrency(x) -> Allowed(x)).\n\nConclusion:\nall x (SavingsDeposit(x) -> Allowed(x)).",
        "premises": [
            "all x (SavingsDeposit(x) -> (Currency(x) = VietnamDong(x) | Currency(x) = ForeignCurrency(x))).",
            "all x (Currency(x) = ForeignCurrency(x) -> CreditInstitution(x)).",
            "all x (Payment(x) = Currency(x)).",
            "all x (ForeignCurrency(x) -> Allowed(x))."
        ],
        "conclusion": "all x (SavingsDeposit(x) -> Allowed(x)).",
        "id": "cbb72473-e56b-43d0-aa69-7facb39befc5"
    },
    {
        "raw": "Rules:\n1. Paper money with color change, faded, image, pattern, letter, number, crumpled, smeared, dirty, old, torn or piece-to-piece stuck but the note is still intact is still valid.\n2. Coins, which are worn, rusted, damaged partly or wholly the image, patterns, letter and number and plated on the money are still valid.\n\nGoals:\nTorn money is reprinted and used.\n\nPredicates:\nTorn(x) | Reprint(x) | Used(x) | Valid(x) | ColorChange(x) | Faded(x) | Image(x) | Pattern(x) | Letter(x) | Number(x) | Crumpled(x) | Smear(x) | Dirty(x) | Old(x) | PieceToPieceStuck(x) | Worn(x) | Rusted(x) | Damaged(x) | Plated(x) | Coin(x) | PaperMoney(x).\n\nExplanation:\nTorn(x): x is torn.\nReprint(x): x is reprinted.\nUsed(x): x is used.\nValid(x): x is valid.\nColorChange(x): x has a color change.\nFaded(x): x is faded.\nImage(x): x has an image.\nPattern(x): x has a pattern.\nLetter(x): x has a letter.\nNumber(x): x has a number.\nCrumpled(x): x is crumpled.\nSmear(x): x is smeared.\nDirty(x): x is dirty.\nOld(x): x is old.\nPieceToPieceStuck(x): x is piece-to-piece stuck.\nWorn(x): x is worn.\nRusted(x): x is rusted.\nDamaged(x): x is damaged.\nPlated(x): x is plated.\nCoin(x): x is a coin.\nPaperMoney(x): x is paper money.\n\nPremises:\nall x (Torn(x) & PaperMoney(x) -> Valid(x)).\nall x (Worn(x) & Coin(x) -> Valid(x)).\nall x (Rusted(x) & Coin(x) -> Valid(x)).\nall x (Damaged(x) & Coin(x) -> Valid(x)).\nall x (Plated(x) & Coin(x) -> Valid(x)).\nall x (ColorChange(x) & PaperMoney(x) -> Valid(x)).\nall x (Faded(x) & PaperMoney(x) -> Valid(x)).\nall x (Image(x) & PaperMoney(x) -> Valid(x)).\nall x (Pattern(x) & PaperMoney(x) -> Valid(x)).\nall x (Letter(x) & PaperMoney(x) -> Valid(x)).\nall x (Number(x) & PaperMoney(x) -> Valid(x)).\nall x (Crumpled(x) & PaperMoney(x) -> Valid(x)).\nall x (Smear(x) & PaperMoney(x) -> Valid(x)).\nall x (Dirty(x) & PaperMoney(x) -> Valid(x)).\nall x (Old(x) & PaperMoney(x) -> Valid(x)).\nall x (PieceToPieceStuck(x) & PaperMoney(x) -> Valid(x)).\n-Torn(x) | Reprint(x) & Used(x).\n\nConclusion:\nall x (Torn(x) -> Reprint(x) & Used(x)).",
        "premises": [
            "all x (Torn(x) & PaperMoney(x) -> Valid(x)).",
            "all x (Worn(x) & Coin(x) -> Valid(x)).",
            "all x (Rusted(x) & Coin(x) -> Valid(x)).",
            "all x (Damaged(x) & Coin(x) -> Valid(x)).",
            "all x (Plated(x) & Coin(x) -> Valid(x)).",
            "all x (ColorChange(x) & PaperMoney(x) -> Valid(x)).",
            "all x (Faded(x) & PaperMoney(x) -> Valid(x)).",
            "all x (Image(x) & PaperMoney(x) -> Valid(x)).",
            "all x (Pattern(x) & PaperMoney(x) -> Valid(x)).",
            "all x (Letter(x) & PaperMoney(x) -> Valid(x)).",
            "all x (Number(x) & PaperMoney(x) -> Valid(x)).",
            "all x (Crumpled(x) & PaperMoney(x) -> Valid(x)).",
            "all x (Smear(x) & PaperMoney(x) -> Valid(x)).",
            "all x (Dirty(x) & PaperMoney(x) -> Valid(x)).",
            "all x (Old(x) & PaperMoney(x) -> Valid(x)).",
            "all x (PieceToPieceStuck(x) & PaperMoney(x) -> Valid(x)).",
            "-Torn(x) | Reprint(x) & Used(x)."
        ],
        "conclusion": "all x (Torn(x) -> Reprint(x) & Used(x)).",
        "id": "518370a1-3253-4a23-bde0-52b08c0d9355"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Lending is a form of credit extension whereby the lender delivers or commits to deliver a sum of money to the customer for a specified purpose in a specified period of time under an agreement on the principle of repayment of principal and interest.\n\nGoals:\nLending is a form of credit.\n\nPredicates:\nLending(x) | Credit(x) | Extension(x) | Deliver(x) | Commit(x) | Customer(x) | Purpose(x) | Agreement(x) | Repayment(x) | Principal(x) | Interest(x) | Form(x).\n\nExplanation:\nLending(x): x is lending.\nCredit(x): x is credit.\nExtension(x): x is an extension.\nDeliver(x): x delivers.\nCommit(x): x commits.\nCustomer(x): x is a customer.\nPurpose(x): x is a purpose.\nAgreement(x): x is an agreement.\nRepayment(x): x is repayment.\nPrincipal(x): x is principal.\nInterest(x): x is interest.\nForm(x): x is a form.\n\nPremises:\nall x (Lending(x) -> (Extension(x) & Deliver(x) & Commit(x) & Customer(x) & Purpose(x) & Agreement(x) & Repayment(x) & Principal(x) & Interest(x))).\nall x (Extension(x) -> Credit(x)).\nall x (Form(x) -> Credit(x)).\n\nConclusion:\nall x (Lending(x) -> Form(x)).",
        "premises": [
            "all x (Lending(x) -> (Extension(x) & Deliver(x) & Commit(x) & Customer(x) & Purpose(x) & Agreement(x) & Repayment(x) & Principal(x) & Interest(x))).",
            "all x (Extension(x) -> Credit(x)).",
            "all x (Form(x) -> Credit(x))."
        ],
        "conclusion": "all x (Lending(x) -> Form(x)).",
        "id": "edabaddf-054f-4dc3-a486-345bcdc94a02"
    },
    {
        "raw": "Rules:\n1.Article 7 of the Circular No. 39/2016/TT-NHNN prescribes that a credit institution shall consider granting a loan to a customer who fully meets the following requirements: \nThe customer is a juridical person who has legal personality in accordance with laws.\nThe client is an individual aged 18 years or older and has full legal capacity as prescribed by law or aged 15 to under 18 without loss or restriction of legal capacity in accordance with law.\nDemand for loans for legal purposes.\nHaving a feasible plan on the use of capital.\nHaving financial capability to repay debts.\nIn case a customer borrows loans from a credit institution at the lending interest rate specified in Clause 2, Article 13 of this Circular, the credit institution shall assess such customer as having a transparent and healthy financial status.\nGoals:\nCan you get bank loans if you are under 18?\n###\nPredicates:\nJuridicalPerson(x) | LegalPersonality(x) | Individual(x) | Age(x,y) | FullLegalCapacity(x) | LegalPurposes(x) | FeasiblePlan(x) | FinancialCapability(x) | TransparentFinancialStatus(x) | HealthyFinancialStatus(x) | Loan(x) | Bank(x) | CreditInstitution(x).\n\nExplanation:\nJuridicalPerson(x): x is a juridical person.\nLegalPersonality(x): x has legal personality.\nIndividual(x): x is an individual.\nAge(x,y): x has age y.\nFullLegalCapacity(x): x has full legal capacity.\nLegalPurposes(x): x has demand for loans for legal purposes.\nFeasiblePlan(x): x has a feasible plan on the use of capital.\nFinancialCapability(x): x has financial capability to repay debts.\nTransparentFinancialStatus(x): x has a transparent financial status.\nHealthyFinancialStatus(x): x has a healthy financial status.\nLoan(x): x is a loan.\nBank(x): x is a bank.\nCreditInstitution(x): x is a credit institution.\n\nPremises:\nall x (JuridicalPerson(x) -> LegalPersonality(x)).\nall x (Individual(x) -> (Age(x,18) | (Age(x,y) & y>15 & y<18 & FullLegalCapacity(x)))).\nall x (Loan(x) -> (LegalPurposes(x) & FeasiblePlan(x) & FinancialCapability(x))).\nall x (CreditInstitution(x) -> (Age(x,18) | (Age(x,y) & y>15 & y<18 & FullLegalCapacity(x)))).\nall x (Loan(x) -> CreditInstitution(x)).\n-Age(x,18) | Loan(x).\n\nConclusion:\n~all x (Age(x,y) & y<18 -> Loan(x)).",
        "premises": [
            "all x (JuridicalPerson(x) -> LegalPersonality(x)).",
            "all x (Individual(x) -> (Age(x,18) | (Age(x,y) & y>15 & y<18 & FullLegalCapacity(x)))).",
            "all x (Loan(x) -> (LegalPurposes(x) & FeasiblePlan(x) & FinancialCapability(x))).",
            "all x (CreditInstitution(x) -> (Age(x,18) | (Age(x,y) & y>15 & y<18 & FullLegalCapacity(x)))).",
            "all x (Loan(x) -> CreditInstitution(x)).",
            "-Age(x,18) | Loan(x)."
        ],
        "conclusion": "~all x (Age(x,y) & y<18 -> Loan(x)).",
        "id": "d6225731-29df-4c75-a249-5f177e60b994"
    },
    {
        "raw": "Here is the output:\n\nRules:\n1. Credit institutions must publicly post at their transaction offices and on their websites (if any) at least the following contents: Savings deposit interest rate, fees (if applicable) Foreign currency in which savings deposits are received, Procedures for savings deposit transactions between credit institutions and depositors, Regulations on each type of savings deposit, Methods for depositor to access savings deposits, Actions against crumpled, torn or lost passports.\nGoals:\nPublish interest rates on savings is required.\n\nPredicates:\nPublish(x) | Required(x) | CreditInstitution(x) | TransactionOffice(x) | Website(x) | SavingsDeposit(x) | InterestRate(x) | Fee(x) | ForeignCurrency(x) | Procedure(x) | Regulation(x) | Method(x) | Passport(x) | Crumpled(x) | Torn(x) | Lost(x).\n\nExplanation:\nPublish(x): x publishes information.\nRequired(x): x is required.\nCreditInstitution(x): x is a credit institution.\nTransactionOffice(x): x is a transaction office.\nWebsite(x): x is a website.\nSavingsDeposit(x): x is a savings deposit.\nInterestRate(x): x is an interest rate.\nFee(x): x is a fee.\nForeignCurrency(x): x is a foreign currency.\nProcedure(x): x is a procedure.\nRegulation(x): x is a regulation.\nMethod(x): x is a method.\nPassport(x): x is a passport.\nCrumpled(x): x is crumpled.\nTorn(x): x is torn.\nLost(x): x is lost.\n\nPremises:\nall x (CreditInstitution(x) -> Publish(x)).\nall x (Publish(x) -> (InterestRate(x) | Fee(x) | ForeignCurrency(x) | Procedure(x) | Regulation(x) | Method(x) | Passport(x))).\nall x (TransactionOffice(x) -> Publish(x)).\nall x (Website(x) -> Publish(x)).\nall x (SavingsDeposit(x) -> (InterestRate(x) | Fee(x) | ForeignCurrency(x) | Procedure(x) | Regulation(x) | Method(x))).\nall x (Required(x) -> Publish(x)).\n\nConclusion:\nall x (SavingsDeposit(x) -> Required(Publish(InterestRate(x)))).",
        "premises": [
            "all x (CreditInstitution(x) -> Publish(x)).",
            "all x (Publish(x) -> (InterestRate(x) | Fee(x) | ForeignCurrency(x) | Procedure(x) | Regulation(x) | Method(x) | Passport(x))).",
            "all x (TransactionOffice(x) -> Publish(x)).",
            "all x (Website(x) -> Publish(x)).",
            "all x (SavingsDeposit(x) -> (InterestRate(x) | Fee(x) | ForeignCurrency(x) | Procedure(x) | Regulation(x) | Method(x))).",
            "all x (Required(x) -> Publish(x))."
        ],
        "conclusion": "all x (SavingsDeposit(x) -> Required(Publish(InterestRate(x)))).",
        "id": "1a9db09c-fb00-42ba-aa93-5ec05ecc2c6e"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. The customer shall prepare and submit an application to open a checking account.\n2. The procedures for opening a personal checking account electronically include collecting information, inspecting and verifying the client's identity, warning about prohibited acts, providing the agreement, and notifying the account details.\n\nGoals:\nOpen online bank account is possible.\n\nPredicates:\nOpen(x) | Application(x) | Submit(x) | Bank(x) | Branch(x) | Electronic(x) | Personal(x) | CheckingAccount(x) | Collect(x) | Inspect(x) | Verify(x) | Warn(x) | Provide(x) | Agree(x) | Notify(x) | Possible(x)\n\nExplanation:\nOpen(x): x opens a checking account.\nApplication(x): x is an application.\nSubmit(x): x submits an application.\nBank(x): x is a bank.\nBranch(x): x is a bank's branch.\nElectronic(x): x is electronic.\nPersonal(x): x is personal.\nCheckingAccount(x): x is a checking account.\nCollect(x): x collects information.\nInspect(x): x inspects identity.\nVerify(x): x verifies identity.\nWarn(x): x warns about prohibited acts.\nProvide(x): x provides an agreement.\nAgree(x): x agrees to the terms.\nNotify(x): x notifies account details.\nPossible(x): x is possible.\n\nPremises:\nall x (Open(x) -> (Application(x) & Submit(x))).\nall x (Submit(x) -> (Bank(x) | Branch(x))).\nall x (Electronic(x) -> (Collect(x) & Inspect(x) & Verify(x) & Warn(x) & Provide(x) & Agree(x) & Notify(x))).\nall x (Personal(x) -> CheckingAccount(x)).\nall x (CheckingAccount(x) -> Bank(x)).\nall x (Electronic(x) -> Possible(x)).\n\nConclusion:\nall x (Electronic(x) -> Possible(x)).",
        "premises": [
            "all x (Open(x) -> (Application(x) & Submit(x))).",
            "all x (Submit(x) -> (Bank(x) | Branch(x))).",
            "all x (Electronic(x) -> (Collect(x) & Inspect(x) & Verify(x) & Warn(x) & Provide(x) & Agree(x) & Notify(x))).",
            "all x (Personal(x) -> CheckingAccount(x)).",
            "all x (CheckingAccount(x) -> Bank(x)).",
            "all x (Electronic(x) -> Possible(x))."
        ],
        "conclusion": "all x (Electronic(x) -> Possible(x)).",
        "id": "1ba59967-2eb6-4a3c-971c-6a5f97bd4205"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1. State Bank branches, Central Banking Department, collecting-exchanging units shall be responsible for immediately collecting, exchanging for customers who have demand, without limitation on quantity, requiring no procedures, documents for money not eligible for circulation.\n2. Money not eligible for circulation includes banknotes which have changed color, faded in their image, patterns, letters, digits, are crumpled, smeared, dirty, old, torn or glued but the note is still intact.\n3. Coins which are worn, rusted, damaged partly or wholly the image, pattern, letters and digits and the plated layer on the money are not eligible for circulation.\n4. Money with technical errors due to printing and coining process of the manufacturer such as folded printing paper which loses picture or printing color, printing ink and other errors in printing and minting process are not eligible for circulation.\n\nGoals:\nThere is no limit on the number of exchange of money not qualified for circulation.\n\nPredicates:\nCollect(x) | Exchange(x) | Limit(x) | Eligible(x) | Circulation(x) | Demand(x) | Procedure(x) | Document(x) | Error(x) | Printing(x) | Minting(x) | Manufacturer(x) | StateBank(x) | Branch(x) | Department(x) | Unit(x).\n\nExplanation:\nCollect(x): x collects money.\nExchange(x): x exchanges money.\nLimit(x): x has a limit.\nEligible(x): x is eligible for circulation.\nCirculation(x): x is in circulation.\nDemand(x): x has demand.\nProcedure(x): x requires a procedure.\nDocument(x): x requires a document.\nError(x): x has an error.\nPrinting(x): x is related to printing.\nMinting(x): x is related to minting.\nManufacturer(x): x is the manufacturer.\nStateBank(x): x is the State Bank.\nBranch(x): x is a branch.\nDepartment(x): x is a department.\nUnit(x): x is a unit.\n\nPremises:\nall x (Collect(x) -> (~Limit(x) & Demand(x))).\nall x (Exchange(x) -> (~Procedure(x) & ~Document(x))).\nall x (Eligible(x) -> ~Error(x)).\nall x (~Eligible(x) -> (Error(x) | Printing(x) | Minting(x) | Manufacturer(x))).\nall x (StateBank(x) -> (Branch(x) | Department(x) | Unit(x))).\n\nConclusion:\n~all x (Limit(x)).",
        "premises": [
            "all x (Collect(x) -> (~Limit(x) & Demand(x))).",
            "all x (Exchange(x) -> (~Procedure(x) & ~Document(x))).",
            "all x (Eligible(x) -> ~Error(x)).",
            "all x (~Eligible(x) -> (Error(x) | Printing(x) | Minting(x) | Manufacturer(x))).",
            "all x (StateBank(x) -> (Branch(x) | Department(x) | Unit(x)))."
        ],
        "conclusion": "~all x (Limit(x)).",
        "id": "dbdd0aa6-c943-4640-b2e5-25f55d68c88b"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1. Illegal destruction of money.\n2. Burning one's own money is a violation of the law.\n3. A fine of between VND 10,000,000 and 15,000,000 shall be imposed for acts of illegally sabotaging or destroying Vietnam dong.\n4. Additional penalties: Confiscate all the exhibits and instrumentalities of the violations.\n\nGoals:\nBurning self-made money is legal.\n\nPredicates:\nDestroy(x) | Illegal(x) | Burn(x) | Make(x) | Own(x) | Fine(x) | Confiscate(x) | VietnamDong(x) | SelfMade(x) | Legal(x).\n\nExplanation:\nDestroy(x): x destroys money.\nIllegal(x): x is illegal.\nBurn(x): x burns money.\nMake(x): x makes money.\nOwn(x): x owns money.\nFine(x): x is fined.\nConfiscate(x): x is confiscated.\nVietnamDong(x): x is Vietnam dong.\nSelfMade(x): x is self-made money.\nLegal(x): x is legal.\n\nPremises:\nall x (Destroy(x) -> Illegal(x)).\nall x (Burn(x) -> Destroy(x)).\nall x (Make(x) -> Own(x)).\nall x (Own(x) -> SelfMade(x)).\nall x (Fine(x) -> Illegal(x)).\nall x (Confiscate(x) -> Illegal(x)).\nall x (VietnamDong(x) -> Destroy(x) -> Illegal(x)).\n-Illegal(x) | Fine(x) | Confiscate(x).\n\nConclusion:\n-all x (Burn(x) -> Legal(x)).",
        "premises": [
            "all x (Destroy(x) -> Illegal(x)).",
            "all x (Burn(x) -> Destroy(x)).",
            "all x (Make(x) -> Own(x)).",
            "all x (Own(x) -> SelfMade(x)).",
            "all x (Fine(x) -> Illegal(x)).",
            "all x (Confiscate(x) -> Illegal(x)).",
            "all x (VietnamDong(x) -> Destroy(x) -> Illegal(x)).",
            "-Illegal(x) | Fine(x) | Confiscate(x)."
        ],
        "conclusion": "-all x (Burn(x) -> Legal(x)).",
        "id": "2bc3743b-8eea-4526-9094-fb077be0ff9f"
    },
    {
        "raw": "Here is the output:\n\nRules:\n1. Credit institutions shall provide guidelines for procedures for taking and paying out electronic savings deposits via checking accounts of depositors opened at credit institutions.\n2. Credit institutions must ensure the full retention of information relating to the receipt and payment of saving deposits by electronic means.\n\nGoals:\nWithdrawal of savings account without bank procedures is allowed.\n\nPredicates:\nGuideline(x) | Procedure(x) | Electronic(x) | SavingsDeposit(x) | CheckingAccount(x) | Depositor(x) | CreditInstitution(x) | Law(x) | Regulation(x) | Accurate(x) | Safe(x) | Retention(x) | Information(x) | Receipt(x) | Payment(x) | Withdrawal(x) | Allowed(x) | BankProcedure(x).\n\nExplanation:\nGuideline(x): x provides guidelines.\nProcedure(x): x is a procedure.\nElectronic(x): x is electronic.\nSavingsDeposit(x): x is a savings deposit.\nCheckingAccount(x): x is a checking account.\nDepositor(x): x is a depositor.\nCreditInstitution(x): x is a credit institution.\nLaw(x): x is a law.\nRegulation(x): x is a regulation.\nAccurate(x): x is accurate.\nSafe(x): x is safe.\nRetention(x): x ensures retention.\nInformation(x): x is information.\nReceipt(x): x is a receipt.\nPayment(x): x is a payment.\nWithdrawal(x): x is a withdrawal.\nAllowed(x): x is allowed.\nBankProcedure(x): x is a bank procedure.\n\nPremises:\nall x (CreditInstitution(x) -> Guideline(x)).\nall x (Guideline(x) -> Procedure(x)).\nall x (Procedure(x) -> Electronic(x)).\nall x (Electronic(x) -> SavingsDeposit(x)).\nall x (SavingsDeposit(x) -> CheckingAccount(x)).\nall x (CheckingAccount(x) -> Depositor(x)).\nall x (Depositor(x) -> CreditInstitution(x)).\nall x (CreditInstitution(x) -> Law(x)).\nall x (Law(x) -> Regulation(x)).\nall x (Regulation(x) -> Accurate(x)).\nall x (Accurate(x) -> Safe(x)).\nall x (Safe(x) -> Retention(x)).\nall x (Retention(x) -> Information(x)).\nall x (Information(x) -> Receipt(x)).\nall x (Receipt(x) -> Payment(x)).\n-Withdrawal(x) | BankProcedure(x).\n\nConclusion:\nall x (Withdrawal(x) -> Allowed(x)).",
        "premises": [
            "all x (CreditInstitution(x) -> Guideline(x)).",
            "all x (Guideline(x) -> Procedure(x)).",
            "all x (Procedure(x) -> Electronic(x)).",
            "all x (Electronic(x) -> SavingsDeposit(x)).",
            "all x (SavingsDeposit(x) -> CheckingAccount(x)).",
            "all x (CheckingAccount(x) -> Depositor(x)).",
            "all x (Depositor(x) -> CreditInstitution(x)).",
            "all x (CreditInstitution(x) -> Law(x)).",
            "all x (Law(x) -> Regulation(x)).",
            "all x (Regulation(x) -> Accurate(x)).",
            "all x (Accurate(x) -> Safe(x)).",
            "all x (Safe(x) -> Retention(x)).",
            "all x (Retention(x) -> Information(x)).",
            "all x (Information(x) -> Receipt(x)).",
            "all x (Receipt(x) -> Payment(x)).",
            "-Withdrawal(x) | BankProcedure(x)."
        ],
        "conclusion": "all x (Withdrawal(x) -> Allowed(x)).",
        "id": "7893bac9-b762-4845-b819-66eaad53cf99"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1. Clause 7 Article 1 of Circular No. 02/2019/TT-NHNN amending Circular No 23/23/THNH1N on guidelines for opening and use of checking accounts at payment service providers issued by the State Bank of Vietnam, which provides for the following documents required for opening of checking account: \n2. An application form for opening a checking account made using the form provided by the bank/foreign bank's branch where the checking account is opened and in accordance with Clause 1 Article 13 hereof \n3. The account holder's citizen identification card or ID card or unexpired passport, birth certificate (if the account holder is a Vietnamese citizen aged under 14 years ), entry visa or document proving exemption from entry visa (if he/she is a foreigner) \n4. If the checking accounts are opened by the guardian or legal representative, apart from the documents specified in Point a and b\n\nGoals:\nCan a bank account be opened without identification?\n\nPredicates:\nOpen(x) | ApplicationForm(x) | Identification(x) | AccountHolder(x) | Citizen(x) | IDCard(x) | Passport(x) | BirthCertificate(x) | Visa(x) | Guardian(x) | LegalRepresentative(x) | Bank(x) | StateBank(x) | Vietnam(x) | Required(x) | Without(x) | Legal(x)\n\nExplanation:\nOpen(x): x can open a bank account.\nApplicationForm(x): x is an application form.\nIdentification(x): x is an identification document.\nAccountHolder(x): x is an account holder.\nCitizen(x): x is a citizen.\nIDCard(x): x is an ID card.\nPassport(x): x is a passport.\nBirthCertificate(x): x is a birth certificate.\nVisa(x): x is a visa.\nGuardian(x): x is a guardian.\nLegalRepresentative(x): x is a legal representative.\nBank(x): x is a bank.\nStateBank(x): x is the State Bank.\nVietnam(x): x is in Vietnam.\nRequired(x): x is required.\nWithout(x): x is without something.\nLegal(x): x is legal.\n\nPremises:\nall x (Open(x) -> (ApplicationForm(x) & Identification(x))).\nall x (Identification(x) -> (IDCard(x) | Passport(x) | BirthCertificate(x) | Visa(x))).\nall x (AccountHolder(x) -> (Citizen(x) | Guardian(x) | LegalRepresentative(x))).\nall x (Bank(x) -> StateBank(x)).\nall x (StateBank(x) -> Vietnam(x)).\n-Open(x) | Required(Identification(x)).\nall x (Without(Identification(x)) -> -Legal(x)).\n\nConclusion:\nall x (-Legal(Open(x)) | Required(Identification(x))).",
        "premises": [
            "all x (Open(x) -> (ApplicationForm(x) & Identification(x))).",
            "all x (Identification(x) -> (IDCard(x) | Passport(x) | BirthCertificate(x) | Visa(x))).",
            "all x (AccountHolder(x) -> (Citizen(x) | Guardian(x) | LegalRepresentative(x))).",
            "all x (Bank(x) -> StateBank(x)).",
            "all x (StateBank(x) -> Vietnam(x)).",
            "-Open(x) | Required(Identification(x)).",
            "all x (Without(Identification(x)) -> -Legal(x))."
        ],
        "conclusion": "all x (-Legal(Open(x)) | Required(Identification(x))).",
        "id": "507d7ebc-666c-4df8-90ec-453a4ab9aff5"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. The legal representative of a credit institution must reside in Vietnam.\n2. In case of absence from Vietnam, he/she must authorize in writing another person who is manager or executive of the credit institution residing in Vietnam to exercise his/her rights and fulfill his/ her obligations.\n\nGoals:\nA legal representative in a credit institution must reside in Vietnam.\n\nPredicates:\nReside(x,y) | Representative(x,y) | CreditInstitution(x) | Authorize(x,y,z) | Manager(x,y) | Executive(x,y) | Vietnam(x) | Legal(x) | Institution(x).\n\nExplanation:\nReside(x,y): x resides in y.\nRepresentative(x,y): x is the legal representative of y.\nCreditInstitution(x): x is a credit institution.\nAuthorize(x,y,z): x authorizes y to z.\nManager(x,y): x is a manager of y.\nExecutive(x,y): x is an executive of y.\nVietnam(x): x is in Vietnam.\nLegal(x): x is legal.\nInstitution(x): x is an institution.\n\nPremises:\nall x (Representative(x,y) -> (Reside(x,Vietnam) | exists z (Authorize(x,z,y) & (Manager(z,y) | Executive(z,y)) & Reside(z,Vietnam)))).\nall x (CreditInstitution(x) -> Institution(x)).\nall x (Representative(x,y) -> Legal(x)).\nall x (Institution(x) -> exists y (CreditInstitution(y) & Representative(x,y))).\n\nConclusion:\nall x (Representative(x,y) -> Reside(x,Vietnam)).",
        "premises": [
            "all x (Representative(x,y) -> (Reside(x,Vietnam) | exists z (Authorize(x,z,y) & (Manager(z,y) | Executive(z,y)) & Reside(z,Vietnam)))).",
            "all x (CreditInstitution(x) -> Institution(x)).",
            "all x (Representative(x,y) -> Legal(x)).",
            "all x (Institution(x) -> exists y (CreditInstitution(y) & Representative(x,y)))."
        ],
        "conclusion": "all x (Representative(x,y) -> Reside(x,Vietnam)).",
        "id": "05986d5a-46ec-4155-afee-ddb82890daee"
    },
    {
        "raw": "Here is the output:\n\nRules:\n1. Vietnamese citizens aged 18 years or older and having full legal capacity as prescribed by law can make savings deposit transactions.\n2. Vietnamese citizens aged between full 15 years and under 18 years who have neither restricted nor lost their civil act capacity as prescribed by law can make savings deposit transactions.\n3. Vietnamese citizens with limited legal capacity or lost legal capacity as prescribed by law or under 15 years old shall make savings deposit transactions through their legal representatives.\n4. Vietnamese citizens having limited cognition and behavior control as prescribed shall make saving deposit transactions via their guardians.\n\nGoals:\nThe person who is legally incapacitated is entitled to deposit money.\n\nPredicates:\nAge(x,y) | Capacity(x) | Legal(x) | Incapacitated(x) | Deposit(x) | Representative(x) | Guardian(x) | Vietnamese(x) | Savings(x).\n\nExplanation:\nAge(x,y): x is y years old.\nCapacity(x): x has full legal capacity.\nLegal(x): x is legally entitled.\nIncapacitated(x): x is legally incapacitated.\nDeposit(x): x can make savings deposit transactions.\nRepresentative(x): x is a legal representative.\nGuardian(x): x is a guardian.\nVietnamese(x): x is a Vietnamese citizen.\nSavings(x): x is a savings deposit transaction.\n\nPremises:\nall x (Age(x,18) & Capacity(x) -> Deposit(x)).\nall x (Age(x,15) & Capacity(x) -> Deposit(x)).\nall x (Incapacitated(x) -> Representative(x) & Deposit(x)).\nall x (Incapacitated(x) -> Guardian(x) & Deposit(x)).\nall x (Vietnamese(x) -> Savings(x)).\n\nConclusion:\nall x (Incapacitated(x) -> Deposit(x)).",
        "premises": [
            "all x (Age(x,18) & Capacity(x) -> Deposit(x)).",
            "all x (Age(x,15) & Capacity(x) -> Deposit(x)).",
            "all x (Incapacitated(x) -> Representative(x) & Deposit(x)).",
            "all x (Incapacitated(x) -> Guardian(x) & Deposit(x)).",
            "all x (Vietnamese(x) -> Savings(x))."
        ],
        "conclusion": "all x (Incapacitated(x) -> Deposit(x)).",
        "id": "dc4d41d8-283a-48ab-9e3a-2d9937d4e69c"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1. Poor household members, ethnic minority people living in areas with difficult socio-economic conditions, people living areas with extremely difficult socioeconomic conditions, people living on island communes and island districts and some other entities are eligible for certain benefits.\n2. Specifically, persons living in poor households according to the poverty line, ethnic minority persons living in disadvantaged areas, people living in areas facing extreme socio-economical difficulties, people who live in island commune and island district and some others are eligible.\n\nGoals:\nThe applicant is eligible for a health insurance card when having a household registration in a severely disadvantaged area.\n\nPredicates:\nPoor(x) | EthnicMinority(x) | DifficultArea(x) | ExtremelyDifficultArea(x) | IslandCommune(x) | IslandDistrict(x) | Eligible(x) | HealthInsurance(x) | HouseholdRegistration(x) | SeverelyDisadvantagedArea(x) | IncomeCriteria(x) | MultidimensionalPovertyLine(x) | HealthInsuranceDeficit(x).\n\nExplanation:\nPoor(x): x is a poor household member.\nEthnicMinority(x): x is an ethnic minority person.\nDifficultArea(x): x lives in an area with difficult socio-economic conditions.\nExtremelyDifficultArea(x): x lives in an area with extremely difficult socio-economic conditions.\nIslandCommune(x): x lives in an island commune.\nIslandDistrict(x): x lives in an island district.\nEligible(x): x is eligible for certain benefits.\nHealthInsurance(x): x has a health insurance card.\nHouseholdRegistration(x): x has a household registration.\nSeverelyDisadvantagedArea(x): x lives in a severely disadvantaged area.\nIncomeCriteria(x): x meets the income criteria.\nMultidimensionalPovertyLine(x): x meets the multidimensional poverty line.\nHealthInsuranceDeficit(x): x has a health insurance deficit.\n\nPremises:\nall x (Poor(x) -> Eligible(x)).\nall x (EthnicMinority(x) -> Eligible(x)).\nall x (DifficultArea(x) -> Eligible(x)).\nall x (ExtremelyDifficultArea(x) -> Eligible(x)).\nall x (IslandCommune(x) -> Eligible(x)).\nall x (IslandDistrict(x) -> Eligible(x)).\nall x (Eligible(x) -> HealthInsurance(x)).\nall x (HouseholdRegistration(x) -> SeverelyDisadvantagedArea(x)).\nall x (SeverelyDisadvantagedArea(x) -> IncomeCriteria(x)).\nall x (IncomeCriteria(x) -> MultidimensionalPovertyLine(x)).\nall x (MultidimensionalPovertyLine(x) -> HealthInsuranceDeficit(x)).\n-HealthInsurance(x) | Eligible(x).\n\nConclusion:\nall x (HouseholdRegistration(x) -> HealthInsurance(x)).",
        "premises": [
            "all x (Poor(x) -> Eligible(x)).",
            "all x (EthnicMinority(x) -> Eligible(x)).",
            "all x (DifficultArea(x) -> Eligible(x)).",
            "all x (ExtremelyDifficultArea(x) -> Eligible(x)).",
            "all x (IslandCommune(x) -> Eligible(x)).",
            "all x (IslandDistrict(x) -> Eligible(x)).",
            "all x (Eligible(x) -> HealthInsurance(x)).",
            "all x (HouseholdRegistration(x) -> SeverelyDisadvantagedArea(x)).",
            "all x (SeverelyDisadvantagedArea(x) -> IncomeCriteria(x)).",
            "all x (IncomeCriteria(x) -> MultidimensionalPovertyLine(x)).",
            "all x (MultidimensionalPovertyLine(x) -> HealthInsuranceDeficit(x)).",
            "-HealthInsurance(x) | Eligible(x)."
        ],
        "conclusion": "all x (HouseholdRegistration(x) -> HealthInsurance(x)).",
        "id": "57ea0a2c-e5a3-45bd-accd-b58b09932847"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1.Article 11 and Article 12 of the Decree No. 15/2018/ND-CP providing guidance on the Law of Food safety.\n2.The Certificate of fulfillment of food safety conditions is issued to the applicant.\n3.Every food manufacturer and seller must obtain the Certificate of fulfillment of food safety conditions when operating, except for the case in Clause 1 Article 12 of this Decree.\n4.The conditions for issuance of the Certificate of fulfillment of food safety conditions are specified in Clause 1 Article 34 of the Law of Food safety.\n5.Manufacturers of dietary supplements shall comply with requirements specified in Article 28 of this Decree.\n6.The establishment is not required to obtain the Certificate of fulfillment of food safety conditions in certain cases.\n\nGoals:\nThe company's cafeteria must have a Certificate of food safety.\n\nPredicates:\nCertificate(x) | FoodSafety(x) | Manufacturer(x) | Seller(x) | Operating(x) | Except(x) | Condition(x) | Law(x) | DietarySupplement(x) | Requirement(x) | Establishment(x) | Case(x) | Cafeteria(x) | Company(x) | Must(x).\n\nExplanation:\nCertificate(x): x has a Certificate of fulfillment of food safety conditions.\nFoodSafety(x): x is related to food safety.\nManufacturer(x): x is a food manufacturer.\nSeller(x): x is a food seller.\nOperating(x): x is operating.\nExcept(x): x is an exception.\nCondition(x): x is a condition.\nLaw(x): x is related to the Law of Food safety.\nDietarySupplement(x): x is a dietary supplement.\nRequirement(x): x is a requirement.\nEstablishment(x): x is an establishment.\nCase(x): x is a case.\nCafeteria(x): x is a cafeteria.\nCompany(x): x is a company.\nMust(x): x must have something.\n\nPremises:\nall x (Manufacturer(x) & Operating(x) -> Certificate(x)).\nall x (Seller(x) & Operating(x) -> Certificate(x)).\nall x (Except(x) -> ~Certificate(x)).\nall x (Condition(x) -> Certificate(x)).\nall x (DietarySupplement(x) -> Requirement(x)).\nall x (Establishment(x) & Case(x) -> ~Certificate(x)).\nall x (Cafeteria(x) -> Establishment(x)).\nall x (Company(x) -> Establishment(x)).\n~Case(x) | Certificate(x).\n\nConclusion:\nall x (Cafeteria(x) & Company(x) -> Certificate(x)).",
        "premises": [
            "all x (Manufacturer(x) & Operating(x) -> Certificate(x)).",
            "all x (Seller(x) & Operating(x) -> Certificate(x)).",
            "all x (Except(x) -> ~Certificate(x)).",
            "all x (Condition(x) -> Certificate(x)).",
            "all x (DietarySupplement(x) -> Requirement(x)).",
            "all x (Establishment(x) & Case(x) -> ~Certificate(x)).",
            "all x (Cafeteria(x) -> Establishment(x)).",
            "all x (Company(x) -> Establishment(x)).",
            "~Case(x) | Certificate(x)."
        ],
        "conclusion": "all x (Cafeteria(x) & Company(x) -> Certificate(x)).",
        "id": "5474fafd-fcaa-4998-bc7d-181156cf0638"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Article 26 of the Law on Social Insurance 2014 stipulates that the period of enjoying the sickness regime is counted on working days, excluding public holidays, New Year holidays and weekends.\n2. The period of sickness regime entitlement is 30 days if they have paid social insurance premiums for under 15 years, 40 days if they have paid social premiums for between full 15 and under 30 years, 60 days for full 30 or more.\n3. During the Tet holiday, employees are entitled to a full paid leave.\n4. Employees who take leave to enjoy their sickness benefits are only entitled to 75% of their salary as the basis for payment of social insurance premiums.\n\nGoals:\nIs there a sickness benefit during Tet holiday?\n\nPredicates:\nSicknessBenefit(x) | TetHoliday(x) | PaidLeave(x) | WorkingDay(x) | PublicHoliday(x) | NewYearHoliday(x) | Weekend(x) | PaidSocialInsurancePremium(x) | Entitled(x) | FullPaidLeave(x) | Salary(x) | SocialInsurancePremium(x).\n\nExplanation:\nSicknessBenefit(x): x is entitled to sickness benefit.\nTetHoliday(x): x is during Tet holiday.\nPaidLeave(x): x is entitled to paid leave.\nWorkingDay(x): x is a working day.\nPublicHoliday(x): x is a public holiday.\nNewYearHoliday(x): x is a New Year holiday.\nWeekend(x): x is a weekend.\nPaidSocialInsurancePremium(x): x has paid social insurance premium.\nEntitled(x): x is entitled to something.\nFullPaidLeave(x): x is entitled to full paid leave.\nSalary(x): x is a salary.\nSocialInsurancePremium(x): x is a social insurance premium.\n\nPremises:\nall x (TetHoliday(x) -> PublicHoliday(x)).\nall x (PublicHoliday(x) -> ~WorkingDay(x)).\nall x (PaidSocialInsurancePremium(x) -> Entitled(x, SicknessBenefit)).\nall x (Entitled(x, FullPaidLeave) -> TetHoliday(x)).\nall x (Entitled(x, SicknessBenefit) -> ~FullPaidLeave(x)).\nall x (Salary(x) -> SocialInsurancePremium(x)).\n\nConclusion:\n~all x (TetHoliday(x) -> ~SicknessBenefit(x)).",
        "premises": [
            "all x (TetHoliday(x) -> PublicHoliday(x)).",
            "all x (PublicHoliday(x) -> ~WorkingDay(x)).",
            "all x (PaidSocialInsurancePremium(x) -> Entitled(x, SicknessBenefit)).",
            "all x (Entitled(x, FullPaidLeave) -> TetHoliday(x)).",
            "all x (Entitled(x, SicknessBenefit) -> ~FullPaidLeave(x)).",
            "all x (Salary(x) -> SocialInsurancePremium(x))."
        ],
        "conclusion": "~all x (TetHoliday(x) -> ~SicknessBenefit(x)).",
        "id": "54707371-b963-40a7-a2d4-e8a783e78781"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1.Disabled people are people who have one or more of their body parts or have a functional impairment in the form of a disability that makes it difficult for them to work, live and study.\n2.Article 44, Clauses 1 and 2 of the Law on the disabled in Article 45 of the Government's Decree No. 108/2013/ND-CP dated November 17,2003 stipulates that...\n3.Bases for determining the level of disability specified in Article 4 of Decree No. 28/2012 of April 10,2002, detailing and guiding a number of articles of the Law on Persons with Disabilities...\n\nGoals:\nIs heart disease entitled to disability benefits for people with heart disease?\n\nPredicates:\nDisable(x) | HeartDisease(x) | Entitled(x) | Benefit(x) | SelfServing(x) | WorkingCapacity(x) | Impairment(x) | MedicalExamination(x) | Council(x) | StateBudget(x) | Funding(x) | Certificate(x) | Decentralization(x).\n\nExplanation:\nDisable(x): x is a disabled person.\nHeartDisease(x): x has heart disease.\nEntitled(x): x is entitled to disability benefits.\nBenefit(x): x receives disability benefits.\nSelfServing(x): x has self-serving capacity.\nWorkingCapacity(x): x has working capacity.\nImpairment(x): x has impairment.\nMedicalExamination(x): x undergoes medical examination.\nCouncil(x): x is a council.\nStateBudget(x): x is the state budget.\nFunding(x): x provides funding.\nCertificate(x): x is a certificate.\nDecentralization(x): x is decentralization.\n\nPremises:\nall x (Disable(x) -> (Impairment(x) & (SelfServing(x) | WorkingCapacity(x)))).\nall x (HeartDisease(x) -> Disable(x)).\nall x (Disable(x) -> (Entitled(x) <-> (Impairment(x) & MedicalExamination(x)))).\nall x (MedicalExamination(x) -> Council(x)).\nall x (Council(x) -> Impairment(x)).\nall x (Impairment(x) -> StateBudget(x)).\nall x (StateBudget(x) -> Funding(x)).\nall x (Funding(x) -> Certificate(x)).\nall x (Certificate(x) -> Decentralization(x)).\n\nConclusion:\nall x (HeartDisease(x) -> Entitled(x)).",
        "premises": [
            "all x (Disable(x) -> (Impairment(x) & (SelfServing(x) | WorkingCapacity(x)))).",
            "all x (HeartDisease(x) -> Disable(x)).",
            "all x (Disable(x) -> (Entitled(x) <-> (Impairment(x) & MedicalExamination(x)))).",
            "all x (MedicalExamination(x) -> Council(x)).",
            "all x (Council(x) -> Impairment(x)).",
            "all x (Impairment(x) -> StateBudget(x)).",
            "all x (StateBudget(x) -> Funding(x)).",
            "all x (Funding(x) -> Certificate(x)).",
            "all x (Certificate(x) -> Decentralization(x))."
        ],
        "conclusion": "all x (HeartDisease(x) -> Entitled(x)).",
        "id": "6f354fa6-f9c2-439d-9759-2ace00b873d8"
    },
    {
        "raw": "Rules:\n1. New medicine practices or methods are determined according to Article 2 of the Circular No. 07/2015/TT-BYT.\n2. New medicine practices or methods are stipulated in Clause 1 Article 69 of the Law on Medical Examination and Treatment.\n3. New medicine practices or methods are stipulated in Clause 2 Article 69 of the Law on Medical Examination and Treatment.\n4. New medicine practices or methods are stipulated in Clause 3 Article 69 of the Law on Medical Examination and Treatment.\n\nGoals:\nThere are new techniques and methods in medical examination and treatment as prescribed by law.\n\nPredicates:\nNewPractice(x) | Research(x) | Completed(x) | Accepted(x) | Applied(x) | Issued(x) | Evaluated(x) | Proposed(x) | Granted(x) | Permitted(x) | Reviewed(x) | Assessed(x) | Classified(x) | Special(x) | TypeI(x) | Healthcare(x) | MinistryHealth(x) | Vietnam(x) | Law(x) | Prescribed(x)\n\nExplanation:\nNewPractice(x): x is a new medicine practice or method.\nResearch(x): x is researched.\nCompleted(x): x is completed.\nAccepted(x): x is accepted.\nApplied(x): x is applied.\nIssued(x): x is issued.\nEvaluated(x): x is evaluated.\nProposed(x): x is proposed.\nGranted(x): x is granted.\nPermitted(x): x is permitted.\nReviewed(x): x is reviewed.\nAssessed(x): x is assessed.\nClassified(x): x is classified.\nSpecial(x): x is special.\nTypeI(x): x is type I.\nHealthcare(x): x is a healthcare establishment.\nMinistryHealth(x): x is the Ministry of Health.\nVietnam(x): x is in Vietnam.\nLaw(x): x is according to the law.\nPrescribed(x): x is prescribed by law.\n\nPremises:\nall x (NewPractice(x) -> (Research(x) & Completed(x) & Accepted(x) & Applied(x) & Issued(x))).\nall x (Research(x) -> Evaluated(x)).\nall x (Completed(x) -> Accepted(x)).\nall x (Accepted(x) -> Applied(x)).\nall x (Applied(x) -> Issued(x)).\nall x (Issued(x) -> Evaluated(x)).\nall x (Evaluated(x) -> Proposed(x)).\nall x (Proposed(x) -> Granted(x)).\nall x (Granted(x) -> Permitted(x)).\nall x (Permitted(x) -> Reviewed(x)).\nall x (Reviewed(x) -> Assessed(x)).\nall x (Assessed(x) -> Classified(x)).\nall x (Classified(x) -> (Special(x) | TypeI(x))).\nall x (Special(x) -> Healthcare(x)).\nall x (TypeI(x) -> Healthcare(x)).\nall x (Healthcare(x) -> MinistryHealth(x)).\nall x (MinistryHealth(x) -> Vietnam(x)).\nall x (Vietnam(x) -> Law(x)).\nall x (Law(x) -> Prescribed(x)).\n\nConclusion:\nall x (NewPractice(x) -> Prescribed(x)).",
        "premises": [
            "all x (NewPractice(x) -> (Research(x) & Completed(x) & Accepted(x) & Applied(x) & Issued(x))).",
            "all x (Research(x) -> Evaluated(x)).",
            "all x (Completed(x) -> Accepted(x)).",
            "all x (Accepted(x) -> Applied(x)).",
            "all x (Applied(x) -> Issued(x)).",
            "all x (Issued(x) -> Evaluated(x)).",
            "all x (Evaluated(x) -> Proposed(x)).",
            "all x (Proposed(x) -> Granted(x)).",
            "all x (Granted(x) -> Permitted(x)).",
            "all x (Permitted(x) -> Reviewed(x)).",
            "all x (Reviewed(x) -> Assessed(x)).",
            "all x (Assessed(x) -> Classified(x)).",
            "all x (Classified(x) -> (Special(x) | TypeI(x))).",
            "all x (Special(x) -> Healthcare(x)).",
            "all x (TypeI(x) -> Healthcare(x)).",
            "all x (Healthcare(x) -> MinistryHealth(x)).",
            "all x (MinistryHealth(x) -> Vietnam(x)).",
            "all x (Vietnam(x) -> Law(x)).",
            "all x (Law(x) -> Prescribed(x))."
        ],
        "conclusion": "all x (NewPractice(x) -> Prescribed(x)).",
        "id": "d532c08f-20c7-48e8-94d0-7366ce837326"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Employees working under labor contracts with a term of under 3 months are participants.\n2. Part-time officials at commune, village and residential group levels are participants.\n3. Persons participating in production, business and service activities, including non-salaried cooperative members working in cooperatives or unions of cooperatives are participants.\n4. Self-employed workers are participants.\n5. Employees working abroad for a certain period of time who have not yet participated in compulsory social insurance or have received lump-sum social insurance are participants.\n6. Other participants are participants.\n\nGoals:\nShe can continue to participate in social insurance as an individual.\n\nPredicates:\nParticipate(x) | LaborContract(x) | Term(x) | Month(x) | Official(x) | Commune(x) | Village(x) | ResidentialGroup(x) | Production(x) | Business(x) | Service(x) | Cooperative(x) | Union(x) | SelfEmployed(x) | WorkAbroad(x) | CompulsorySocialInsurance(x) | LumpSum(x) | Individual(x) | Birth(x) | Address(x) | Province(x) | Enterprise(x) | IndustrialPark(x) | ChildCare(x) | Continue(x).\n\nExplanation:\nParticipate(x): x participates in social insurance.\nLaborContract(x): x has a labor contract.\nTerm(x): x has a term.\nMonth(x): x is a month.\nOfficial(x): x is an official.\nCommune(x): x is a commune.\nVillage(x): x is a village.\nResidentialGroup(x): x is a residential group.\nProduction(x): x participates in production.\nBusiness(x): x participates in business.\nService(x): x participates in service.\nCooperative(x): x is a cooperative.\nUnion(x): x is a union.\nSelfEmployed(x): x is self-employed.\nWorkAbroad(x): x works abroad.\nCompulsorySocialInsurance(x): x has compulsory social insurance.\nLumpSum(x): x has received lump-sum social insurance.\nIndividual(x): x is an individual.\nBirth(x): x is born.\nAddress(x): x has an address.\nProvince(x): x is a province.\nEnterprise(x): x is an enterprise.\nIndustrialPark(x): x is an industrial park.\nChildCare(x): x is for child care.\nContinue(x): x can continue.\n\nPremises:\nall x (LaborContract(x) & Term(x) < 3 & Month(x) -> Participate(x)).\nall x (Official(x) & Commune(x) -> Participate(x)).\nall x (Official(x) & Village(x) -> Participate(x)).\nall x (Official(x) & ResidentialGroup(x) -> Participate(x)).\nall x (Production(x) | Business(x) | Service(x) -> Participate(x)).\nall x (Cooperative(x) | Union(x) -> Participate(x)).\nall x (SelfEmployed(x) -> Participate(x)).\nall x (WorkAbroad(x) & !CompulsorySocialInsurance(x) -> Participate(x)).\nall x (WorkAbroad(x) & LumpSum(x) -> Participate(x)).\nall x (Birth(x) & Address(x) & Province(x) & Enterprise(x) & IndustrialPark(x) & ChildCare(x) -> Continue(x)).\nall x (Continue(x) -> Individual(x)).\n\nConclusion:\nall x (Birth(x) & Address(x) & Province(x) & Enterprise(x) & IndustrialPark(x) & ChildCare(x) -> Participate(x)).",
        "premises": [
            "all x (LaborContract(x) & Term(x) < 3 & Month(x) -> Participate(x)).",
            "all x (Official(x) & Commune(x) -> Participate(x)).",
            "all x (Official(x) & Village(x) -> Participate(x)).",
            "all x (Official(x) & ResidentialGroup(x) -> Participate(x)).",
            "all x (Production(x) | Business(x) | Service(x) -> Participate(x)).",
            "all x (Cooperative(x) | Union(x) -> Participate(x)).",
            "all x (SelfEmployed(x) -> Participate(x)).",
            "all x (WorkAbroad(x) & !CompulsorySocialInsurance(x) -> Participate(x)).",
            "all x (WorkAbroad(x) & LumpSum(x) -> Participate(x)).",
            "all x (Birth(x) & Address(x) & Province(x) & Enterprise(x) & IndustrialPark(x) & ChildCare(x) -> Continue(x)).",
            "all x (Continue(x) -> Individual(x))."
        ],
        "conclusion": "all x (Birth(x) & Address(x) & Province(x) & Enterprise(x) & IndustrialPark(x) & ChildCare(x) -> Participate(x)).",
        "id": "493e5e87-1286-42f4-8a97-82472b5c70e6"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Employees participating in compulsory social insurance are Vietnamese citizens, including employees working under indefinite-term employment contracts, employment contracts with a term of full three months or more, officials and public employees, defense workers, police workers, officers and professional soldiers of the People's Army, officers, professional non-commissioned officers, officers, technical non-commanders of the people's police.\n2. Employers participating in compulsory social insurance include state agencies, non-business units, people's armed forces units, political organizations, socio-political organizations, professional-socio-politico-professional organizations, social-professional organization, other social organizations, foreign agencies and organizations, international organizations operating in the Vietnamese territory, enterprises, cooperatives, individual business households, cooperative groups, other organizations and individuals that hire, employ and pay wages to employees.\n\nGoals:\nCompany hiring accounting service company but not paying social insurance is legal.\n\nPredicates:\nEmployee(x) | VietnameseCitizen(x) | CompulsorySocialInsurance(x) | Employer(x) | Hire(x) | Employ(x) | PayWages(x) | AccountingServiceCompany(x) | Company(x) | Legal(x) | StateAgency(x) | NonBusinessUnit(x) | PeoplesArmedForcesUnit(x) | PoliticalOrganization(x) | SocioPoliticalOrganization(x) | ProfessionalSocioPoliticoProfessionalOrganization(x) | SocialProfessionalOrganization(x) | OtherSocialOrganization(x) | ForeignAgency(x) | InternationalOrganization(x) | Enterprise(x) | Cooperative(x) | IndividualBusinessHousehold(x) | CooperativeGroup(x) | OtherOrganization(x) | Individual(x) | VietnameseTerritory(x).\n\nExplanation:\nEmployee(x): x is an employee.\nVietnameseCitizen(x): x is a Vietnamese citizen.\nCompulsorySocialInsurance(x): x participates in compulsory social insurance.\nEmployer(x): x is an employer.\nHire(x): x hires employees.\nEmploy(x): x employs employees.\nPayWages(x): x pays wages to employees.\nAccountingServiceCompany(x): x is an accounting service company.\nCompany(x): x is a company.\nLegal(x): x is legal.\nStateAgency(x): x is a state agency.\nNonBusinessUnit(x): x is a non-business unit.\nPeoplesArmedForcesUnit(x): x is a people's armed forces unit.\nPoliticalOrganization(x): x is a political organization.\nSocioPoliticalOrganization(x): x is a socio-political organization.\nProfessionalSocioPoliticoProfessionalOrganization(x): x is a professional-socio-politico-professional organization.\nSocialProfessionalOrganization(x): x is a social-professional organization.\nOtherSocialOrganization(x): x is an other social organization.\nForeignAgency(x): x is a foreign agency.\nInternationalOrganization(x): x is an international organization.\nEnterprise(x): x is an enterprise.\nCooperative(x): x is a cooperative.\nIndividualBusinessHousehold(x): x is an individual business household.\nCooperativeGroup(x): x is a cooperative group.\nOtherOrganization(x): x is an other organization.\nIndividual(x): x is an individual.\nVietnameseTerritory(x): x is in the Vietnamese territory.\n\nPremises:\nall x (Employee(x) -> VietnameseCitizen(x)).\nall x (CompulsorySocialInsurance(x) -> Employer(x)).\nall x (Employer(x) -> (StateAgency(x) | NonBusinessUnit(x) | PeoplesArmedForcesUnit(x) | PoliticalOrganization(x) | SocioPoliticalOrganization(x) | ProfessionalSocioPoliticoProfessionalOrganization(x) | SocialProfessionalOrganization(x) | OtherSocialOrganization(x) | ForeignAgency(x) | InternationalOrganization(x) | Enterprise(x) | Cooperative(x) | IndividualBusinessHousehold(x) | CooperativeGroup(x) | OtherOrganization(x) | Individual(x))).\nall x (Hire(x) -> Employ(x)).\nall x (Employ(x) -> PayWages(x)).\nall x (AccountingServiceCompany(x) -> Company(x)).\nall x (Company(x) -> Enterprise(x)).\n-Hire(x) | PayWages(x).\n\nConclusion:\n-Legal(x).",
        "premises": [
            "all x (Employee(x) -> VietnameseCitizen(x)).",
            "all x (CompulsorySocialInsurance(x) -> Employer(x)).",
            "all x (Employer(x) -> (StateAgency(x) | NonBusinessUnit(x) | PeoplesArmedForcesUnit(x) | PoliticalOrganization(x) | SocioPoliticalOrganization(x) | ProfessionalSocioPoliticoProfessionalOrganization(x) | SocialProfessionalOrganization(x) | OtherSocialOrganization(x) | ForeignAgency(x) | InternationalOrganization(x) | Enterprise(x) | Cooperative(x) | IndividualBusinessHousehold(x) | CooperativeGroup(x) | OtherOrganization(x) | Individual(x))).",
            "all x (Hire(x) -> Employ(x)).",
            "all x (Employ(x) -> PayWages(x)).",
            "all x (AccountingServiceCompany(x) -> Company(x)).",
            "all x (Company(x) -> Enterprise(x)).",
            "-Hire(x) | PayWages(x)."
        ],
        "conclusion": "-Legal(x).",
        "id": "bdd62613-2791-4c38-8208-196087b2726a"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Employees working under indefinite-term labor contracts or labor contracts with a term of full three months or more are obliged to participate in compulsory social insurance.\n\nGoals:\nIs it possible to have enough years of social insurance participation, continue working but not to pay any more?\n\nPredicates:\nEmployee(x) | LaborContract(x) | IndefiniteTerm(x) | ThreeMonths(x) | Obliged(x) | Participate(x) | Compulsory(x) | SocialInsurance(x) | EnoughYears(x) | ContinueWorking(x) | Pay(x)\n\nExplanation:\nEmployee(x): x is an employee.\nLaborContract(x): x is a labor contract.\nIndefiniteTerm(x): x is an indefinite-term labor contract.\nThreeMonths(x): x is a labor contract with a term of full three months or more.\nObliged(x): x is obliged to participate in compulsory social insurance.\nParticipate(x): x participates in social insurance.\nCompulsory(x): x is compulsory social insurance.\nSocialInsurance(x): x is social insurance.\nEnoughYears(x): x has enough years of social insurance participation.\nContinueWorking(x): x continues working.\nPay(x): x pays social insurance.\n\nPremises:\nall x (Employee(x) & LaborContract(x) & (IndefiniteTerm(x) | ThreeMonths(x)) -> Obliged(x)).\nall x (Obliged(x) -> Participate(x) & Compulsory(x)).\nall x (Participate(x) -> SocialInsurance(x)).\nall x (EnoughYears(x) -> ~Pay(x)).\nall x (ContinueWorking(x) -> Employee(x)).\n\nConclusion:\nall x (EnoughYears(x) & ContinueWorking(x) -> ~Pay(x)).",
        "premises": [
            "all x (Employee(x) & LaborContract(x) & (IndefiniteTerm(x) | ThreeMonths(x)) -> Obliged(x)).",
            "all x (Obliged(x) -> Participate(x) & Compulsory(x)).",
            "all x (Participate(x) -> SocialInsurance(x)).",
            "all x (EnoughYears(x) -> ~Pay(x)).",
            "all x (ContinueWorking(x) -> Employee(x))."
        ],
        "conclusion": "all x (EnoughYears(x) & ContinueWorking(x) -> ~Pay(x)).",
        "id": "2b92d223-d013-4bab-a31d-70189fbf1718"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. When you have worked at the Company and are eligible for compulsory social insurance, you must participate in compulsory social security and no longer participate in voluntary social security because you are not eligible as prescribed by the Law on Social Security.\n2. The maternity benefit only applies to participants in compulsory social insurance, participants in voluntary social insurance are not entitled to the maternity benefit\n\nGoals:\nIs it possible to switch from voluntary social insurance to compulsory social insurance?\n\n###\nPredicates:\nWork(x) | Company(x) | Eligible(x) | Compulsory(x) | Voluntary(x) | Maternity(x) | Switch(x) | Law(x) | SocialSecurity(x) | SocialInsurance(x).\n\nExplanation:\nWork(x): x works at the Company.\nCompany(x): x is the Company.\nEligible(x): x is eligible for social insurance.\nCompulsory(x): x participates in compulsory social insurance.\nVoluntary(x): x participates in voluntary social insurance.\nMaternity(x): x is entitled to maternity benefit.\nSwitch(x): x switches from voluntary to compulsory social insurance.\nLaw(x): x is according to the Law on Social Security.\nSocialSecurity(x): x is social security.\nSocialInsurance(x): x is social insurance.\n\nPremises:\nall x (Work(x) & Eligible(x) -> Compulsory(x)).\nall x (Compulsory(x) -> Maternity(x)).\nall x (Voluntary(x) -> -Maternity(x)).\nall x (Eligible(x) -> (Compulsory(x) | Voluntary(x))).\nall x (Switch(x) -> (Voluntary(x) & Compulsory(x))).\n\nConclusion:\nall x (Switch(x) -> Compulsory(x)).",
        "premises": [
            "all x (Work(x) & Eligible(x) -> Compulsory(x)).",
            "all x (Compulsory(x) -> Maternity(x)).",
            "all x (Voluntary(x) -> -Maternity(x)).",
            "all x (Eligible(x) -> (Compulsory(x) | Voluntary(x))).",
            "all x (Switch(x) -> (Voluntary(x) & Compulsory(x)))."
        ],
        "conclusion": "all x (Switch(x) -> Compulsory(x)).",
        "id": "dc3ca2e6-3505-4157-94cb-8cdff143296b"
    },
    {
        "raw": "Rules:\n1. Citizens entitled to postponement of conscription are specified in Article 3 of the Government's Decree No. 38/2007/ND-CP.\n2. Citizens studying in schools of the national education system are entitled to postponement of conscription.\n3. Citizens studying abroad at overseas schools with training duration of twelve months or more are entitled to postponement of conscription.\n4. Citizens who are not entitled to postponement of conscription shall be examined and conscripted into the army.\n\nGoals:\nIs the secondary education required military service?\n\nPredicates:\nPostpone(x) | Conscript(x) | Citizen(x) | Study(x) | School(x) | NationalEducationSystem(x) | Abroad(x) | Duration(x) | MilitaryService(x) | Required(x) | SecondaryEducation(x).\n\nExplanation:\nPostpone(x): x is entitled to postponement of conscription.\nConscript(x): x is conscripted into the army.\nCitizen(x): x is a citizen.\nStudy(x): x is studying.\nSchool(x): x is a school.\nNationalEducationSystem(x): x is part of the national education system.\nAbroad(x): x is studying abroad.\nDuration(x): x has a training duration of twelve months or more.\nMilitaryService(x): x is required to perform military service.\nRequired(x): x is required to do something.\nSecondaryEducation(x): x is secondary education.\n\nPremises:\nall x (Citizen(x) & Study(x) & NationalEducationSystem(x) -> Postpone(x)).\nall x (Citizen(x) & Study(x) & Abroad(x) & Duration(x) -> Postpone(x)).\nall x (~Postpone(x) -> Conscript(x)).\nall x (Conscript(x) -> MilitaryService(x)).\nall x (SecondaryEducation(x) -> Study(x)).\nall x (Study(x) -> ~Required(x) | Postpone(x)).\n\nConclusion:\n~all x (SecondaryEducation(x) -> MilitaryService(x)).",
        "premises": [
            "all x (Citizen(x) & Study(x) & NationalEducationSystem(x) -> Postpone(x)).",
            "all x (Citizen(x) & Study(x) & Abroad(x) & Duration(x) -> Postpone(x)).",
            "all x (~Postpone(x) -> Conscript(x)).",
            "all x (Conscript(x) -> MilitaryService(x)).",
            "all x (SecondaryEducation(x) -> Study(x)).",
            "all x (Study(x) -> ~Required(x) | Postpone(x))."
        ],
        "conclusion": "~all x (SecondaryEducation(x) -> MilitaryService(x)).",
        "id": "31b9c53f-ee37-40ff-9f81-8934835f0e96"
    },
    {
        "raw": "Rules:\n1. Patient pays costs to health facility without health insurance card or at a facility that does not sign the contract for medical services covered by health insurance.\n2. Patient brings documents to the social insurance agency for direct payment based on benefits of health insurance and technical levels.\n3. Social insurance agency directly pays patients actual costs within the scope of payment of health fund but not exceeding the level specified.\n4. Dossier of direct payment includes written request, copy of health insurance card, document with valid photo, hospital discharge paper, prescription or medical book.\n5. Person following payment procedures on behalf of patient must have power of attorney or certificate of legal representation.\n\nGoals:\nGet out-of-line medical care at University of Medicine and Pharmacy Hospital without health insurance card.\n\nPredicates:\nPay(x) | Facility(x) | Contract(x) | Insurance(x) | Document(x) | Benefit(x) | TechnicalLevel(x) | HospitalGrade(x) | Payment(x) | Scope(x) | Level(x) | Dossier(x) | Request(x) | Photo(x) | Discharge(x) | Prescription(x) | Representation(x) | Attorney(x) | University(x) | Medicine(x) | Pharmacy(x) | Hospital(x) | OutOfLine(x) | MedicalCare(x) | Forget(x) | Carry(x).\n\nExplanation:\nPay(x): x pays costs.\nFacility(x): x is a health facility.\nContract(x): x signs a contract for medical services.\nInsurance(x): x has health insurance.\nDocument(x): x has valid documents.\nBenefit(x): x has benefits of health insurance.\nTechnicalLevel(x): x has technical levels of medical examination and treatment.\nHospitalGrade(x): x is a hospital grade.\nPayment(x): x makes a payment.\nScope(x): x is within the scope of payment.\nLevel(x): x is within the level specified.\nDossier(x): x has a dossier for direct payment.\nRequest(x): x makes a written request.\nPhoto(x): x has a valid photo.\nDischarge(x): x has a hospital discharge paper.\nPrescription(x): x has a prescription or medical book.\nRepresentation(x): x has legal representation.\nAttorney(x): x has power of attorney.\nUniversity(x): x is the University of Medicine and Pharmacy.\nMedicine(x): x is related to medicine.\nPharmacy(x): x is related to pharmacy.\nHospital(x): x is a hospital.\nOutOfLine(x): x is out of line medical care.\nMedicalCare(x): x receives medical care.\nForget(x): x forgets to carry health insurance card.\nCarry(x): x carries health insurance card.\n\nPremises:\nall x (Pay(x) -> (Facility(x) & ~Contract(x))).\nall x (Document(x) -> Benefit(x) & TechnicalLevel(x) & HospitalGrade(x)).\nall x (Payment(x) -> Scope(x) & Level(x)).\nall x (Dossier(x) -> Request(x) & Photo(x) & Discharge(x) & Prescription(x)).\nall x (Representation(x) -> Attorney(x)).\nall x (University(x) -> Hospital(x)).\nall x (OutOfLine(x) -> ~Carry(x)).\nall x (MedicalCare(x) -> University(x)).\n\nConclusion:\nall x (OutOfLine(x) -> ~Pay(x)).",
        "premises": [
            "all x (Pay(x) -> (Facility(x) & ~Contract(x))).",
            "all x (Document(x) -> Benefit(x) & TechnicalLevel(x) & HospitalGrade(x)).",
            "all x (Payment(x) -> Scope(x) & Level(x)).",
            "all x (Dossier(x) -> Request(x) & Photo(x) & Discharge(x) & Prescription(x)).",
            "all x (Representation(x) -> Attorney(x)).",
            "all x (University(x) -> Hospital(x)).",
            "all x (OutOfLine(x) -> ~Carry(x)).",
            "all x (MedicalCare(x) -> University(x))."
        ],
        "conclusion": "all x (OutOfLine(x) -> ~Pay(x)).",
        "id": "70b60076-ec55-431f-9b3e-c0b440d90dbe"
    },
    {
        "raw": "Rules:\n1. An employee is entitled to the maternity regime when falling into one of the following cases: a) A female employee is pregnant, b) A woman gives birth, c) An employee adopts an under-four-month child, d) An employee puts an intrauterine device or takes sterilization measures.\n2. The employees specified at Point b and c, Clause 1 of this Article must pay social insurance for full six months or more within twelve months before giving birth or adopting their children.\n3. If your wife has participated in social insurance for full 6 months within 12 months, she is entitled to take leave for 6 months before and after childbirth.\n4. In case of giving birth to twins or more, the mother is entitled to an additional leave of 01 month for each child from the second child onwards.\n5. The maternity leave period before childbirth must not exceed 2 months.\n6. Your wife will also get five one-day, five-day check-ups throughout the pregnancy.\n7. If your wife gives birth to a child at the same place of initial medical care indicated in the health insurance card, she will enjoy the prescribed benefits.\n\nGoals:\nIs there any other benefit in addition to social insurance and health insurance?\n\nPredicates:\nPregnant(x) | GiveBirth(x) | Adopt(x) | Sterilization(x) | SocialInsurance(x) | HealthInsurance(x) | Entitled(x) | MaternityLeave(x) | Pay(x) | FullSixMonths(x) | TwelveMonths(x) | Twins(x) | AdditionalLeave(x) | CheckUps(x) | PrescribedBenefits(x) | InitialMedicalCare(x) | HealthInsuranceCard(x) | OtherBenefits(x)\n\nExplanation:\nPregnant(x): x is pregnant.\nGiveBirth(x): x gives birth.\nAdopt(x): x adopts a child.\nSterilization(x): x undergoes sterilization.\nSocialInsurance(x): x has social insurance.\nHealthInsurance(x): x has health insurance.\nEntitled(x): x is entitled to maternity benefits.\nMaternityLeave(x): x takes maternity leave.\nPay(x): x pays social insurance.\nFullSixMonths(x): x pays social insurance for full six months.\nTwelveMonths(x): x pays social insurance within twelve months.\nTwins(x): x gives birth to twins or more.\nAdditionalLeave(x): x is entitled to additional leave.\nCheckUps(x): x gets prenatal check-ups.\nPrescribedBenefits(x): x enjoys prescribed benefits.\nInitialMedicalCare(x): x gives birth at the initial medical care.\nHealthInsuranceCard(x): x has a health insurance card.\nOtherBenefits(x): x has other benefits in addition to social insurance and health insurance.\n\nPremises:\nall x (Pregnant(x) | GiveBirth(x) | Adopt(x) | Sterilization(x) -> Entitled(x)).\nall x (Entitled(x) -> SocialInsurance(x)).\nall x (SocialInsurance(x) -> Pay(x)).\nall x (Pay(x) -> FullSixMonths(x) & TwelveMonths(x)).\nall x (GiveBirth(x) & Twins(x) -> AdditionalLeave(x)).\nall x (GiveBirth(x) -> CheckUps(x)).\nall x (GiveBirth(x) & InitialMedicalCare(x) & HealthInsuranceCard(x) -> PrescribedBenefits(x)).\n-OtherBenefits(x) | SocialInsurance(x) & HealthInsurance(x).\n\nConclusion:\nall x (-OtherBenefits(x)).",
        "premises": [
            "all x (Pregnant(x) | GiveBirth(x) | Adopt(x) | Sterilization(x) -> Entitled(x)).",
            "all x (Entitled(x) -> SocialInsurance(x)).",
            "all x (SocialInsurance(x) -> Pay(x)).",
            "all x (Pay(x) -> FullSixMonths(x) & TwelveMonths(x)).",
            "all x (GiveBirth(x) & Twins(x) -> AdditionalLeave(x)).",
            "all x (GiveBirth(x) -> CheckUps(x)).",
            "all x (GiveBirth(x) & InitialMedicalCare(x) & HealthInsuranceCard(x) -> PrescribedBenefits(x)).",
            "-OtherBenefits(x) | SocialInsurance(x) & HealthInsurance(x)."
        ],
        "conclusion": "all x (-OtherBenefits(x)).",
        "id": "7a81af60-1f5d-43ac-bb43-b4afe8ed0d87"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1.Participants who are unable to participate in compulsory social insurance (because they do not work) can participate in voluntary social insurance.\n\nGoals:\nParticipate in both compulsory and voluntary insurance at the same time is possible.\n\n###\nPredicates:\nParticipateCompulsory(x) | ParticipateVoluntary(x) | Work(x) | Possible(x) | Compulsory(x) | Voluntary(x) | SameTime(x).\n\nExplanation:\nParticipateCompulsory(x): x participates in compulsory social insurance.\nParticipateVoluntary(x): x participates in voluntary social insurance.\nWork(x): x works.\nPossible(x): x is possible.\nCompulsory(x): x is compulsory social insurance.\nVoluntary(x): x is voluntary social insurance.\nSameTime(x): x participates in both at the same time.\n\nPremises:\nall x (~Work(x) -> ParticipateVoluntary(x)).\nall x (ParticipateCompulsory(x) -> Work(x)).\nall x (ParticipateVoluntary(x) -> ~ParticipateCompulsory(x)).\nall x (ParticipateCompulsory(x) -> Compulsory(x)).\nall x (ParticipateVoluntary(x) -> Voluntary(x)).\n\nConclusion:\n~all x (~SameTime(x)).",
        "premises": [
            "all x (~Work(x) -> ParticipateVoluntary(x)).",
            "all x (ParticipateCompulsory(x) -> Work(x)).",
            "all x (ParticipateVoluntary(x) -> ~ParticipateCompulsory(x)).",
            "all x (ParticipateCompulsory(x) -> Compulsory(x)).",
            "all x (ParticipateVoluntary(x) -> Voluntary(x))."
        ],
        "conclusion": "~all x (~SameTime(x)).",
        "id": "86f1fdbc-28b7-4306-a744-f9ebcd7d1cdb"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Compulsory health insurance is required at the current employer according to the 2014 Law on Health Insurance.\n2. The poor household health insurance card is no longer valid and must be returned to the People's Committee of the commune where it was issued.\n3. Maternity benefits can be obtained using the employer's health insurance card when giving birth.\n4. Using a poor household health insurance card does not entitle one to maternity benefits.\n\nGoals:\nChildbirth with poor household health insurance card is entitled to maternity benefits.\n\nPredicates:\nCompulsory(x) | HealthInsurance(x) | Employer(x) | Valid(x) | Return(x) | PeopleCommittee(x) | Commune(x) | Issued(x) | MaternityBenefits(x) | Entitled(x) | PoorHousehold(x) | Childbirth(x).\n\nExplanation:\nCompulsory(x): x is compulsory.\nHealthInsurance(x): x is health insurance.\nEmployer(x): x is the employer.\nValid(x): x is valid.\nReturn(x): x must be returned.\nPeopleCommittee(x): x is the People's Committee.\nCommune(x): x is the commune.\nIssued(x): x was issued.\nMaternityBenefits(x): x is entitled to maternity benefits.\nEntitled(x): x is entitled.\nPoorHousehold(x): x is a poor household.\nChildbirth(x): x is childbirth.\n\nPremises:\nall x (Compulsory(x) & HealthInsurance(x) -> Employer(x)).\nall x (PoorHousehold(x) -> ~Valid(x)).\nall x (Return(x) -> PeopleCommittee(x) & Commune(x) & Issued(x)).\nall x (Childbirth(x) & Employer(x) -> MaternityBenefits(x)).\nall x (PoorHousehold(x) & Childbirth(x) -> ~MaternityBenefits(x)).\n\nConclusion:\n~all x (Childbirth(x) & PoorHousehold(x) -> MaternityBenefits(x)).",
        "premises": [
            "all x (Compulsory(x) & HealthInsurance(x) -> Employer(x)).",
            "all x (PoorHousehold(x) -> ~Valid(x)).",
            "all x (Return(x) -> PeopleCommittee(x) & Commune(x) & Issued(x)).",
            "all x (Childbirth(x) & Employer(x) -> MaternityBenefits(x)).",
            "all x (PoorHousehold(x) & Childbirth(x) -> ~MaternityBenefits(x))."
        ],
        "conclusion": "~all x (Childbirth(x) & PoorHousehold(x) -> MaternityBenefits(x)).",
        "id": "4ef9ba76-3299-4ec9-84de-5a0ac6f31bd6"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1. According to the 2014 Law on Health Insurance amended and supplemented, when your health insurance card takes effect, you will be paid for your childbirth costs as if you were receiving regular medical care.\n2. If the hospital is located at the place of initial registration specified in the card or at the level of technical services, the social insurance agency shall pay the patient at the following rate: * 100% of the costs: - When the patient receives medical services at the commune level - Total cost of a medical service is lower than 15% of base pay (under VND 172,500 in 2015) at all levels. - Having participated in health insurance for 5 consecutive years or more, having co-payments for medical expenses in a year larger than 6 months' base salary (over VND 6,900,000 in 2015) and being granted a certificate of non-co-payment by the social insurance agency in the year. * Other cases shall be entitled to 80% of the medical examination and treatment costs.\n\nGoals:\nIs there any benefit for the employee who has 6 months to buy health insurance?\n\nPredicates:\nHealthInsurance(x) | Effect(x) | MedicalCare(x) | Registration(x) | TechnicalServices(x) | SocialInsuranceAgency(x) | Patient(x) | MedicalServices(x) | BasePay(x) | CoPayment(x) | Certificate(x) | Benefit(x) | Employee(x) | Buy(x) | Year(x) | Month(x)\n\nExplanation:\nHealthInsurance(x): x has health insurance.\nEffect(x): x takes effect.\nMedicalCare(x): x receives medical care.\nRegistration(x): x is registered.\nTechnicalServices(x): x has technical services.\nSocialInsuranceAgency(x): x is the social insurance agency.\nPatient(x): x is a patient.\nMedicalServices(x): x receives medical services.\nBasePay(x): x is the base pay.\nCoPayment(x): x has co-payment.\nCertificate(x): x has a certificate.\nBenefit(x): x has a benefit.\nEmployee(x): x is an employee.\nBuy(x): x buys health insurance.\nYear(x): x is a year.\nMonth(x): x is a month.\n\nPremises:\nall x (HealthInsurance(x) -> Effect(x)).\nall x (Effect(x) -> MedicalCare(x)).\nall x (Registration(x) -> TechnicalServices(x)).\nall x (TechnicalServices(x) -> SocialInsuranceAgency(x)).\nall x (SocialInsuranceAgency(x) -> Patient(x)).\nall x (Patient(x) -> MedicalServices(x)).\nall x (MedicalServices(x) -> (BasePay(x) | CoPayment(x))).\nall x ((BasePay(x) & CoPayment(x)) -> Certificate(x)).\nall x (Certificate(x) -> Benefit(x)).\nall x (Employee(x) -> (Buy(x) & Year(x) & Month(x))).\nall x (Year(x) & Month(x) -> 6).\n\nConclusion:\nall x (Employee(x) -> Benefit(x)).",
        "premises": [
            "all x (HealthInsurance(x) -> Effect(x)).",
            "all x (Effect(x) -> MedicalCare(x)).",
            "all x (Registration(x) -> TechnicalServices(x)).",
            "all x (TechnicalServices(x) -> SocialInsuranceAgency(x)).",
            "all x (SocialInsuranceAgency(x) -> Patient(x)).",
            "all x (Patient(x) -> MedicalServices(x)).",
            "all x (MedicalServices(x) -> (BasePay(x) | CoPayment(x))).",
            "all x ((BasePay(x) & CoPayment(x)) -> Certificate(x)).",
            "all x (Certificate(x) -> Benefit(x)).",
            "all x (Employee(x) -> (Buy(x) & Year(x) & Month(x))).",
            "all x (Year(x) & Month(x) -> 6)."
        ],
        "conclusion": "all x (Employee(x) -> Benefit(x)).",
        "id": "4b7f4894-0434-4998-b807-74e051d6f7f4"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. A person is a member of multiple entities prescribed in Article 12 of the Law on Health insurance, the first group of entities shall be the first groups of entities in order of the groups prescribed in the Law in Article 2 of the law in health insurance.\n2. A person only uses one health insurance card.\n3. If a person is a public servant, she shall pay in the first group of subjects.\n4. If a person is a police relative, she must return the health insurance card to the Public Security Department, the social insurance agency will return the collected health insurance premium to the public security Department.\n\nGoals:\nIs it possible to not participate in health insurance at work when your spouse serves in the police?\n\nPredicates:\nMember(x,y) | FirstGroup(x) | HealthInsuranceCard(x) | PublicServant(x) | PoliceRelative(x) | ReturnCard(x,y) | ReturnPremium(x,y) | Participate(x) | Spouse(x,y) | ServePolice(x) | Work(x)\n\nExplanation:\nMember(x,y): x is a member of entity y.\nFirstGroup(x): x is the first group of entities.\nHealthInsuranceCard(x): x uses one health insurance card.\nPublicServant(x): x is a public servant.\nPoliceRelative(x): x is a police relative.\nReturnCard(x,y): x returns the health insurance card to y.\nReturnPremium(x,y): x returns the collected health insurance premium to y.\nParticipate(x): x participates in health insurance.\nSpouse(x,y): x is the spouse of y.\nServePolice(x): x serves in the police.\nWork(x): x is at work.\n\nPremises:\nall x (Member(x,y) -> FirstGroup(y)).\nall x (PublicServant(x) -> FirstGroup(x)).\nall x (PoliceRelative(x) -> ReturnCard(x,y) & ReturnPremium(x,y)).\nall x (ReturnCard(x,y) -> ~Participate(x)).\nall x (Spouse(x,y) & ServePolice(y) -> PoliceRelative(x)).\nall x (Work(x) -> Participate(x)).\n\nConclusion:\n~all x (Spouse(x,y) & ServePolice(y) -> Participate(x)).",
        "premises": [
            "all x (Member(x,y) -> FirstGroup(y)).",
            "all x (PublicServant(x) -> FirstGroup(x)).",
            "all x (PoliceRelative(x) -> ReturnCard(x,y) & ReturnPremium(x,y)).",
            "all x (ReturnCard(x,y) -> ~Participate(x)).",
            "all x (Spouse(x,y) & ServePolice(y) -> PoliceRelative(x)).",
            "all x (Work(x) -> Participate(x))."
        ],
        "conclusion": "~all x (Spouse(x,y) & ServePolice(y) -> Participate(x)).",
        "id": "fa04eca7-4055-4299-9d44-093b8f7b206a"
    },
    {
        "raw": "Rules:\n1. The Citizen Identification Card is changed in the following cases: a/The cases specified in Clause 1, Article 21 of this Law, b/This card is damaged beyond use, c) Information about last name, middle name, first name and identity characteristics is changed, d) Gender and hometown is re-determined, dd) There is an error in information on the Citizen Identification card, e) At the request of the citizen.\n2. The Citizen Identification Card is reissued in the following cases: a/It is lost, b/Its Vietnamese nationality is restored in accordance with the Law on Vietnamese Nationality.\n3. Changing permanent residence requires applying for a new Citizen Identification Card.\n\nGoals:\nIs it necessary to renew citizenship when changing permanent residence?\n\nPredicates:\nChange(x) | Damage(x) | InformationChange(x) | GenderChange(x) | Error(x) | Request(x) | Lost(x) | NationalityRestore(x) | PermanentResidenceChange(x) | Renew(x) | Necessary(x) | Citizen(x) | IdentityCard(x).\n\nExplanation:\nChange(x): x changes the Citizen Identification Card.\nDamage(x): x damages the Citizen Identification Card.\nInformationChange(x): x changes information on the Citizen Identification Card.\nGenderChange(x): x changes gender.\nError(x): x has an error in information on the Citizen Identification Card.\nRequest(x): x requests to change the Citizen Identification Card.\nLost(x): x loses the Citizen Identification Card.\nNationalityRestore(x): x restores Vietnamese nationality.\nPermanentResidenceChange(x): x changes permanent residence.\nRenew(x): x renews the Citizen Identification Card.\nNecessary(x): x is necessary.\nCitizen(x): x is a citizen.\nIdentityCard(x): x is a Citizen Identification Card.\n\nPremises:\nall x (Change(x) -> (Damage(x) | InformationChange(x) | GenderChange(x) | Error(x) | Request(x))).\nall x (Lost(x) -> Renew(x)).\nall x (NationalityRestore(x) -> Renew(x)).\nall x (PermanentResidenceChange(x) -> Renew(x)).\nall x (Citizen(x) -> IdentityCard(x)).\nall x (Renew(x) -> Necessary(x)).\n\nConclusion:\nall x (PermanentResidenceChange(x) -> Necessary(x)).",
        "premises": [
            "all x (Change(x) -> (Damage(x) | InformationChange(x) | GenderChange(x) | Error(x) | Request(x))).",
            "all x (Lost(x) -> Renew(x)).",
            "all x (NationalityRestore(x) -> Renew(x)).",
            "all x (PermanentResidenceChange(x) -> Renew(x)).",
            "all x (Citizen(x) -> IdentityCard(x)).",
            "all x (Renew(x) -> Necessary(x))."
        ],
        "conclusion": "all x (PermanentResidenceChange(x) -> Necessary(x)).",
        "id": "3777135a-b0cb-4ea1-bee8-13a57c92d958"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. The commune-level People's Committee of the last place of residence of the deceased shall register the death.\n2. If the last place of residence of the deceased is unidentifiable, the People's Committee of commune where the deceased died or his/her body was discovered shall register his/hers death.\n3. Citizens' places of residence include their permanent and temporary residence.\n4. In case the place of permanent or temporary residence of a citizen cannot be determined, his/her place of residence is his/hers current place of stay.\n\nGoals:\nIs death registration allowed at the place of death temporary residence?\n\nPredicates:\nRegister(x) | Death(x) | Residence(x) | Permanent(x) | Temporary(x) | Last(x) | Unidentifiable(x) | Died(x) | Discovered(x) | Current(x) | Stay(x) | Allowed(x) | Place(x).\n\nExplanation:\nRegister(x): x registers death.\nDeath(x): x is death.\nResidence(x): x is a place of residence.\nPermanent(x): x is a permanent residence.\nTemporary(x): x is a temporary residence.\nLast(x): x is the last place of residence.\nUnidentifiable(x): x is unidentifiable.\nDied(x): x died.\nDiscovered(x): x's body was discovered.\nCurrent(x): x is the current place of stay.\nStay(x): x is a place of stay.\nAllowed(x): x is allowed.\nPlace(x): x is a place.\n\nPremises:\nall x (Death(x) -> Register(Last(x))).\nall x (Unidentifiable(Last(x)) -> Register(Place(Died(x) | Discovered(x)))).\nall x (Residence(x) -> (Permanent(x) | Temporary(x))).\nall x (Unidentifiable(Residence(x)) -> Current(Stay(x))).\nall x (Register(x) -> Residence(x)).\nall x (Temporary(x) -> Residence(x)).\n-Register(Place(Died(x))) | Allowed(Place(Died(x))).\n\nConclusion:\nall x (Death(x) -> Allowed(Place(Died(x)))).",
        "premises": [
            "all x (Death(x) -> Register(Last(x))).",
            "all x (Unidentifiable(Last(x)) -> Register(Place(Died(x) | Discovered(x)))).",
            "all x (Residence(x) -> (Permanent(x) | Temporary(x))).",
            "all x (Unidentifiable(Residence(x)) -> Current(Stay(x))).",
            "all x (Register(x) -> Residence(x)).",
            "all x (Temporary(x) -> Residence(x)).",
            "-Register(Place(Died(x))) | Allowed(Place(Died(x)))."
        ],
        "conclusion": "all x (Death(x) -> Allowed(Place(Died(x)))).",
        "id": "80e16e72-c33f-4904-940e-453ebbd7490e"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Entities applying self-printed invoices prescribed in Point a Clause 1 Article 6 of Circular No. 153/2010/TT-BTC are not required to have accounting software.\n2. Entities applying self-printed invoices specified at Point b, Clause 1, Article 6 must have accounting software associated with sale software.\n3. Before creating self-printed invoices, organizations shall issue decisions on the use of self-print invoices to their managing tax offices and take responsibility for these decisions.\n4. The ordinal numbers on invoices are automatically numbered.\n5. Invoice-printing software applications must satisfy confidentiality requirements by decentralizing the use right to users.\n\nGoals:\nInvoice creation and printing software do not require approval by tax offices.\n\nPredicates:\nApply(x) | AccountingSoftware(x) | SaleSoftware(x) | Decision(x) | Issue(x) | Responsibility(x) | AutoNumber(x) | Confidentiality(x) | Decentralize(x) | Approval(x) | TaxOffice(x) | Required(x) | Invoice(x) | Printing(x) | Software(x).\n\nExplanation:\nApply(x): x applies self-printed invoices.\nAccountingSoftware(x): x has accounting software.\nSaleSoftware(x): x has sale software.\nDecision(x): x makes a decision.\nIssue(x): x issues a decision.\nResponsibility(x): x takes responsibility.\nAutoNumber(x): x has automatic numbering.\nConfidentiality(x): x satisfies confidentiality requirements.\nDecentralize(x): x decentralizes use rights.\nApproval(x): x has approval.\nTaxOffice(x): x is a tax office.\nRequired(x): x is required.\nInvoice(x): x is an invoice.\nPrinting(x): x is printing software.\nSoftware(x): x is software.\n\nPremises:\nall x (Apply(x) & Pointa(x) -> ~Required(x)).\nall x (Apply(x) & Pointb(x) -> AccountingSoftware(x) & SaleSoftware(x)).\nall x (Decision(x) -> Issue(x) & Responsibility(x)).\nall x (Invoice(x) -> AutoNumber(x)).\nall x (Software(x) -> Confidentiality(x) & Decentralize(x)).\n~all x (Approval(x) -> TaxOffice(x)).\n\nConclusion:\nall x (Software(x) -> ~Required(x)).",
        "premises": [
            "all x (Apply(x) & Pointa(x) -> ~Required(x)).",
            "all x (Apply(x) & Pointb(x) -> AccountingSoftware(x) & SaleSoftware(x)).",
            "all x (Decision(x) -> Issue(x) & Responsibility(x)).",
            "all x (Invoice(x) -> AutoNumber(x)).",
            "all x (Software(x) -> Confidentiality(x) & Decentralize(x)).",
            "~all x (Approval(x) -> TaxOffice(x))."
        ],
        "conclusion": "all x (Software(x) -> ~Required(x)).",
        "id": "39cee6c8-c086-4a40-88fb-03f281469e5e"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Organizations other than enterprises but having business activities, business households and individuals, extra-small enterprises, enterprises in geographical areas with difficult or extremely difficult socio-economic conditions which are not eligible for self-printing invoices may buy invoices from tax offices.\n2. Ineligible organizations may buy invoices from tax offices under Clause 1, Article 11 of this Circular.\n\nGoals:\nIf unable to print invoices by themselves, may purchase invoices from tax offices.\n\nPredicates:\nIneligible(x) | Print(x) | Buy(x) | TaxOffice(x) | SelfPrint(x) | Business(x) | Difficult(x) | ExtremelyDifficult(x) | Area(x) | Enterprise(x) | Organization(x) | Individual(x) | Household(x) | Eligible(x) | Purchase(x).\n\nExplanation:\nIneligible(x): x is not eligible for self-printing invoices.\nPrint(x): x prints invoices.\nBuy(x): x buys invoices.\nTaxOffice(x): x is a tax office.\nSelfPrint(x): x prints invoices by themselves.\nBusiness(x): x has business activities.\nDifficult(x): x is in a difficult socio-economic condition.\nExtremelyDifficult(x): x is in an extremely difficult socio-economic condition.\nArea(x): x is in a geographical area.\nEnterprise(x): x is an enterprise.\nOrganization(x): x is an organization.\nIndividual(x): x is an individual.\nHousehold(x): x is a business household.\nEligible(x): x is eligible for self-printing invoices.\nPurchase(x): x purchases invoices.\n\nPremises:\nall x (Ineligible(x) -> ~SelfPrint(x)).\nall x (Ineligible(x) -> (Business(x) | Individual(x) | Household(x) | Enterprise(x))).\nall x (Ineligible(x) -> (Difficult(x) | ExtremelyDifficult(x))).\nall x (Ineligible(x) -> Area(x)).\nall x (Ineligible(x) -> ~Eligible(x)).\nall x (Ineligible(x) -> Buy(x)).\nall x (Buy(x) -> TaxOffice(x)).\nall x (Buy(x) -> Purchase(x)).\n\nConclusion:\nall x (~SelfPrint(x) -> Buy(x)).",
        "premises": [
            "all x (Ineligible(x) -> ~SelfPrint(x)).",
            "all x (Ineligible(x) -> (Business(x) | Individual(x) | Household(x) | Enterprise(x))).",
            "all x (Ineligible(x) -> (Difficult(x) | ExtremelyDifficult(x))).",
            "all x (Ineligible(x) -> Area(x)).",
            "all x (Ineligible(x) -> ~Eligible(x)).",
            "all x (Ineligible(x) -> Buy(x)).",
            "all x (Buy(x) -> TaxOffice(x)).",
            "all x (Buy(x) -> Purchase(x))."
        ],
        "conclusion": "all x (~SelfPrint(x) -> Buy(x)).",
        "id": "84996f9b-d0fe-4f40-a860-cb6537aa06e6"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1.Article 5 of the regulations provides for the principles of creating invoices.\n2. Organizations may use ordered invoices and electronic invoices simultaneously.\n\nGoals:\nOur company can use both print invoices and electronic invoices.\n\nPredicates:\nCreate(x) | Principle(x) | Invoice(x) | Organization(x) | Ordered(x) | Electronic(x) | Print(x) | Company(x) | Use(x) | Simultaneous(x) | Possible(x) | Regulation(x).\n\nExplanation:\nCreate(x): x creates invoices.\nPrinciple(x): x is a principle.\nInvoice(x): x is an invoice.\nOrganization(x): x is an organization.\nOrdered(x): x is an ordered invoice.\nElectronic(x): x is an electronic invoice.\nPrint(x): x is a print invoice.\nCompany(x): x is our company.\nUse(x): x uses invoices.\nSimultaneous(x): x uses simultaneously.\nPossible(x): x is possible.\nRegulation(x): x is a regulation.\n\nPremises:\nall x (Create(x) -> Principle(x)).\nall x (Organization(x) -> (Use(x) & Simultaneous(x))).\nall x (Ordered(x) -> Invoice(x)).\nall x (Electronic(x) -> Invoice(x)).\nall x (Print(x) -> Invoice(x)).\nCompany(x).\nall x (Invoice(x) -> Regulation(x)).\nall x (Regulation(x) -> Possible(x)).\n\nConclusion:\nPossible(Company(x)).",
        "premises": [
            "all x (Create(x) -> Principle(x)).",
            "all x (Organization(x) -> (Use(x) & Simultaneous(x))).",
            "all x (Ordered(x) -> Invoice(x)).",
            "all x (Electronic(x) -> Invoice(x)).",
            "all x (Print(x) -> Invoice(x)).",
            "Company(x).",
            "all x (Invoice(x) -> Regulation(x)).",
            "all x (Regulation(x) -> Possible(x))."
        ],
        "conclusion": "Possible(Company(x)).",
        "id": "133acf38-3607-43eb-9f2d-70c6898e4a59"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1.Individuals earning income from salaries or wages who authorize their employers to register for tax are specified in Clause 4 Article 5 of Circular No. 95/2016/TT-BTC.\n2.Individuals earning incomes from salaries and wages at employers may authorize employers to apply for taxpayer registration or registration of dependants with tax authorities on behalf of the individuals.\n3.Individuals shall provide documents of individuals and dependants as prescribed in Clause 9 and Clause 10 Article 7 of this Circular to authorized employers, employers shall carry out taxpayer registration and dependant registration as authorized by individuals.\n4.An individual who simultaneously pays personal income tax through many income-paying agencies may authorize tax registration at only one income-benefiting agency to be granted a tax identification number.\n5.Each individual shall notify his/her TIN to other income-paying bodies for use in tax declaration and payment.\n\nGoals:\nThe employee is entitled to authorize the work team to pay personal tax.\n\nPredicates:\nAuthorize(x) | Employer(x) | Individual(x) | Tax(x) | Register(x) | Salary(x) | Wage(x) | Agency(x) | Document(x) | Dependents(x) | TIN(x) | Notify(x) | Entitled(x) | WorkTeam(x).\n\nExplanation:\nAuthorize(x): x authorizes someone.\nEmployer(x): x is an employer.\nIndividual(x): x is an individual.\nTax(x): x is related to tax.\nRegister(x): x registers for tax.\nSalary(x): x earns a salary.\nWage(x): x earns a wage.\nAgency(x): x is an agency.\nDocument(x): x is a document.\nDependents(x): x is a dependent.\nTIN(x): x has a tax identification number.\nNotify(x): x notifies someone.\nEntitled(x): x is entitled to do something.\nWorkTeam(x): x is a work team.\n\nPremises:\nall x (Individual(x) & Salary(x) & Wage(x) -> Authorize(Employer(x))).\nall x (Authorize(Employer(x)) -> Register(Tax(x))).\nall x (Register(Tax(x)) -> Agency(x)).\nall x (Agency(x) -> Document(x)).\nall x (Document(x) -> Dependents(x)).\nall x (Dependents(x) -> TIN(x)).\nall x (TIN(x) -> Notify(x)).\nall x (Notify(x) -> Entitled(x)).\n-Entitled(x) | WorkTeam(x).\n\nConclusion:\nall x (Individual(x) & Salary(x) & Wage(x) -> Entitled(WorkTeam(x))).",
        "premises": [
            "all x (Individual(x) & Salary(x) & Wage(x) -> Authorize(Employer(x))).",
            "all x (Authorize(Employer(x)) -> Register(Tax(x))).",
            "all x (Register(Tax(x)) -> Agency(x)).",
            "all x (Agency(x) -> Document(x)).",
            "all x (Document(x) -> Dependents(x)).",
            "all x (Dependents(x) -> TIN(x)).",
            "all x (TIN(x) -> Notify(x)).",
            "all x (Notify(x) -> Entitled(x)).",
            "-Entitled(x) | WorkTeam(x)."
        ],
        "conclusion": "all x (Individual(x) & Salary(x) & Wage(x) -> Entitled(WorkTeam(x))).",
        "id": "f9a2c172-ef1b-4839-9c9a-032d4485a0ad"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. A taxpayer's commitment to fulfill tax liabilities is restored upon reactivation of TIN if the taxpayer is an enterprise, business entity, or household business that has been notified by the tax authority that the taxpayer does not operate at the registered address.\n2. The business registration authority has not issued a decision on revocation of the certificate of enterprise registration or certificate of household business registration.\n3. Another regulatory authority has not issued a document on revocation of the license for establishment.\n\nGoals:\nThe taxpayer's commitment to fulfill tax liabilities after receiving the notification from the tax authority is restored.\n\nPredicates:\nReactivate(x) | Commitment(x) | Fulfill(x) | TaxLiabilities(x) | Notify(x) | Operate(x) | RegisteredAddress(x) | BusinessEntity(x) | HouseholdBusiness(x) | Revocation(x) | Certificate(x) | License(x) | Establishment(x) | Restored(x) | TaxAuthority(x).\n\nExplanation:\nReactivate(x): x reactivates TIN.\nCommitment(x): x makes a commitment.\nFulfill(x): x fulfills tax liabilities.\nTaxLiabilities(x): x has tax liabilities.\nNotify(x): x is notified.\nOperate(x): x operates.\nRegisteredAddress(x): x is at the registered address.\nBusinessEntity(x): x is a business entity.\nHouseholdBusiness(x): x is a household business.\nRevocation(x): x is revoked.\nCertificate(x): x has a certificate.\nLicense(x): x has a license.\nEstablishment(x): x is an establishment.\nRestored(x): x is restored.\nTaxAuthority(x): x is the tax authority.\n\nPremises:\nall x (Reactivate(x) -> (Commitment(x) & Notify(x) & BusinessEntity(x) & ~Revocation(x))).\nall x (Commitment(x) -> Fulfill(x)).\nall x (Fulfill(x) -> TaxLiabilities(x)).\nall x (Notify(x) -> TaxAuthority(x)).\nall x (BusinessEntity(x) -> ~Revocation(x)).\nall x (HouseholdBusiness(x) -> ~Revocation(x)).\nall x (Establishment(x) -> ~Revocation(x)).\nall x (Restored(x) -> Reactivate(x)).\n\nConclusion:\nall x (Notify(x) -> Restored(x)).",
        "premises": [
            "all x (Reactivate(x) -> (Commitment(x) & Notify(x) & BusinessEntity(x) & ~Revocation(x))).",
            "all x (Commitment(x) -> Fulfill(x)).",
            "all x (Fulfill(x) -> TaxLiabilities(x)).",
            "all x (Notify(x) -> TaxAuthority(x)).",
            "all x (BusinessEntity(x) -> ~Revocation(x)).",
            "all x (HouseholdBusiness(x) -> ~Revocation(x)).",
            "all x (Establishment(x) -> ~Revocation(x)).",
            "all x (Restored(x) -> Reactivate(x))."
        ],
        "conclusion": "all x (Notify(x) -> Restored(x)).",
        "id": "38693347-2dba-4022-8e4c-67c5211b8da6"
    },
    {
        "raw": "Here is the parsed output:\n\nRules:\n1. Reactivation of TIN upon request for resuming operation as prescribed in Point c Clause 1 Article 20 of Circular No. 95/2016/TT-BTC on guidelines for taxpayer registration.\n2. The taxpayer being business entity, other entity, household business that has submitted an application for TIC deactivation to the tax authority but has not received a notification of TTC deactivate and wishes to resume operation shall have its TID reactivated.\n\nGoals:\nTaxpayer's TIN is restored when the request for resuming operations is made.\n\nPredicates:\nReactivate(x) | Request(x) | Resume(x) | Submit(x) | Receive(x) | Deactivate(x) | Restore(x) | BusinessEntity(x) | OtherEntity(x) | HouseholdBusiness(x) | TaxAuthority(x) | Taxpayer(x) | TID(x) | TIC(x) | TTC(x) | Notification(x).\n\nExplanation:\nReactivate(x): x's TIN is reactivated.\nRequest(x): x makes a request.\nResume(x): x wishes to resume operation.\nSubmit(x): x submits an application.\nReceive(x): x receives a notification.\nDeactivate(x): x's TIC is deactivated.\nRestore(x): x's TIN is restored.\nBusinessEntity(x): x is a business entity.\nOtherEntity(x): x is an other entity.\nHouseholdBusiness(x): x is a household business.\nTaxAuthority(x): x is the tax authority.\nTaxpayer(x): x is a taxpayer.\nTID(x): x is a TID.\nTIC(x): x is a TIC.\nTTC(x): x is a TTC.\nNotification(x): x is a notification.\n\nPremises:\nall x (Request(x) & Resume(x) & Submit(x) & ~Receive(x) -> Reactivate(x)).\nall x (BusinessEntity(x) | OtherEntity(x) | HouseholdBusiness(x) -> Taxpayer(x)).\nall x (Taxpayer(x) -> ~Deactivate(x)).\nall x (Reactivate(x) -> Restore(x)).\nall x (Restore(x) -> TID(x)).\nall x (TID(x) -> ~TIC(x)).\nall x (TIC(x) -> TTC(x)).\n~Reactivate(x) | Restore(x).\n\nConclusion:\nall x (Request(x) -> Restore(x)).",
        "premises": [
            "all x (Request(x) & Resume(x) & Submit(x) & ~Receive(x) -> Reactivate(x)).",
            "all x (BusinessEntity(x) | OtherEntity(x) | HouseholdBusiness(x) -> Taxpayer(x)).",
            "all x (Taxpayer(x) -> ~Deactivate(x)).",
            "all x (Reactivate(x) -> Restore(x)).",
            "all x (Restore(x) -> TID(x)).",
            "all x (TID(x) -> ~TIC(x)).",
            "all x (TIC(x) -> TTC(x)).",
            "~Reactivate(x) | Restore(x)."
        ],
        "conclusion": "all x (Request(x) -> Restore(x)).",
        "id": "c15cda2d-998a-413a-b925-111c720100ad"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Persons regularly entering Vietnam for work purposes are not entitled to duty-free luggage quotas for each entry but enjoy duty-exempt luggage quotans once every 90 days.\n2. The entitlement to duty-free quotas for regular entrants shall be subject to the Prime Minister's Decision.\n\nGoals:\nSelling hand luggage without customs is tax evasion.\n\nPredicates:\nEnter(x) | Work(x) | DutyFree(x) | Luggage(x) | Quota(x) | Days(x) | PrimeMinister(x) | Decision(x) | Sell(x) | Customs(x) | TaxEvasion(x) | HandLuggage(x) | Vietnam(x) | InternationalFlight(x) | Train(x) | SeagoingShip(x) | Driver(x) | Worker(x) | NeighboringCountry(x).\n\nExplanation:\nEnter(x): x enters Vietnam.\nWork(x): x is for work purposes.\nDutyFree(x): x is duty-free.\nLuggage(x): x is luggage.\nQuota(x): x is a quota.\nDays(x): x is a period of days.\nPrimeMinister(x): x is the Prime Minister.\nDecision(x): x is a decision.\nSell(x): x sells.\nCustoms(x): x is customs.\nTaxEvasion(x): x is tax evasion.\nHandLuggage(x): x is hand luggage.\nVietnam(x): x is in Vietnam.\nInternationalFlight(x): x is an international flight.\nTrain(x): x is a train.\nSeagoingShip(x): x is a seagoing ship.\nDriver(x): x is a driver.\nWorker(x): x is a worker.\nNeighboringCountry(x): x is a neighboring country.\n\nPremises:\nall x (Enter(x) & Work(x) -> ~DutyFree(x)).\nall x (Enter(x) & Work(x) -> Quota(x) & Days(x) = 90).\nall x (Quota(x) -> PrimeMinister(x) & Decision(x)).\nall x (Sell(x) & Luggage(x) & ~Customs(x) -> TaxEvasion(x)).\nall x (HandLuggage(x) -> Luggage(x)).\nall x (InternationalFlight(x) -> Enter(x) & Work(x)).\nall x (Train(x) -> Enter(x) & Work(x)).\nall x (SeagoingShip(x) -> Enter(x) & Work(x)).\nall x (Driver(x) -> Enter(x) & Work(x)).\nall x (Worker(x) -> Enter(x) & Work(x)).\nall x (NeighboringCountry(x) -> Enter(x) & Work(x)).\n\nConclusion:\nall x (Sell(x) & HandLuggage(x) & ~Customs(x) -> TaxEvasion(x)).",
        "premises": [
            "all x (Enter(x) & Work(x) -> ~DutyFree(x)).",
            "all x (Enter(x) & Work(x) -> Quota(x) & Days(x) = 90).",
            "all x (Quota(x) -> PrimeMinister(x) & Decision(x)).",
            "all x (Sell(x) & Luggage(x) & ~Customs(x) -> TaxEvasion(x)).",
            "all x (HandLuggage(x) -> Luggage(x)).",
            "all x (InternationalFlight(x) -> Enter(x) & Work(x)).",
            "all x (Train(x) -> Enter(x) & Work(x)).",
            "all x (SeagoingShip(x) -> Enter(x) & Work(x)).",
            "all x (Driver(x) -> Enter(x) & Work(x)).",
            "all x (Worker(x) -> Enter(x) & Work(x)).",
            "all x (NeighboringCountry(x) -> Enter(x) & Work(x))."
        ],
        "conclusion": "all x (Sell(x) & HandLuggage(x) & ~Customs(x) -> TaxEvasion(x)).",
        "id": "6473199d-f793-4959-81c2-21226cb73cc9"
    },
    {
        "raw": "Rules:\n1. Taxpayers are residents, including individuals, groups of individuals, and households that manufacture and sell goods and services in all business lines as prescribed by law.\n2. Taxpayers mentioned do not include businesspeople with turnover of VND 100 million/year or less.\n3. Individuals doing business with less than VND 100 million/year are not liable to personal income tax.\n4. If revenue is above VND 100 million/year, a flat tax on revenue will be applied.\n\nGoals:\nTaxes on selling groceries at home.\n\nPredicates:\nTaxpayer(x) | Resident(x) | Individual(x) | Group(x) | Household(x) | Manufacture(x) | Sell(x) | Goods(x) | Services(x) | Business(x) | Law(x) | Revenue(x) | VND(x) | Year(x) | Liable(x) | PersonalIncomeTax(x) | FlatTax(x) | Assessment(x) | LocalTrade(x) | Grocery(x) | Home(x).\n\nExplanation:\nTaxpayer(x): x is a taxpayer.\nResident(x): x is a resident.\nIndividual(x): x is an individual.\nGroup(x): x is a group of individuals.\nHousehold(x): x is a household.\nManufacture(x): x manufactures goods.\nSell(x): x sells goods or services.\nGoods(x): x is a good.\nServices(x): x is a service.\nBusiness(x): x is a business.\nLaw(x): x is prescribed by law.\nRevenue(x): x is revenue.\nVND(x): x is Vietnamese dong.\nYear(x): x is a year.\nLiable(x): x is liable to tax.\nPersonalIncomeTax(x): x is personal income tax.\nFlatTax(x): x is a flat tax.\nAssessment(x): x is an assessment.\nLocalTrade(x): x is a local trade.\nGrocery(x): x is a grocery.\nHome(x): x is at home.\n\nPremises:\nall x (Taxpayer(x) -> (Resident(x) & (Individual(x) | Group(x) | Household(x)))).\nall x (Manufacture(x) -> Business(x)).\nall x (Sell(x) -> Business(x)).\nall x (Goods(x) -> Business(x)).\nall x (Services(x) -> Business(x)).\nall x (Business(x) -> Law(x)).\nall x (Revenue(x) < VND(100000000) -> ~Liable(x)).\nall x (Revenue(x) >= VND(100000000) -> FlatTax(x)).\nall x (Sell(x) & Home(x) -> Grocery(x)).\n~Liable(x) | FlatTax(x).\n\nConclusion:\n~Liable(x).",
        "premises": [
            "all x (Taxpayer(x) -> (Resident(x) & (Individual(x) | Group(x) | Household(x)))).",
            "all x (Manufacture(x) -> Business(x)).",
            "all x (Sell(x) -> Business(x)).",
            "all x (Goods(x) -> Business(x)).",
            "all x (Services(x) -> Business(x)).",
            "all x (Business(x) -> Law(x)).",
            "all x (Revenue(x) < VND(100000000) -> ~Liable(x)).",
            "all x (Revenue(x) >= VND(100000000) -> FlatTax(x)).",
            "all x (Sell(x) & Home(x) -> Grocery(x)).",
            "~Liable(x) | FlatTax(x)."
        ],
        "conclusion": "~Liable(x).",
        "id": "52c3e0e4-7096-44e3-bb8a-6cb0010fcd38"
    },
    {
        "raw": "Rules:\n1. Goods brought abroad for sale at overseas fairs and exhibitions are not liable to excise tax.\n2. The establishment must fully fill the following procedures: \n   - An invitation or registration paper for participation in an overseas trade fair or exhibitions.\n   - The export goods declaration with the customs office's certification that the goods have been exported.\n   - A list of goods sold at the fair or exhibition.\n   - Money payment documents for goods sold at trade fairs or exhibitions.\n3. If the value of cash-collected goods is higher than the prescribed level, the seller shall declare such to the customs office and produce a document evidencing the remittance of money into the bank under current regulations.\n\nGoals:\nSelling goods at a fair or exhibition abroad is not taxed.\n\nPredicates:\nTaxFree(x) | Goods(x) | Fair(x) | Exhibition(x) | Abroad(x) | Invitation(x) | Registration(x) | ExportDeclaration(x) | CustomsOffice(x) | Certification(x) | ListGoods(x) | PaymentDocuments(x) | Value(x) | PrescribedLevel(x) | Declaration(x) | Remittance(x) | Bank(x) | Regulations(x).\n\nExplanation:\nTaxFree(x): x is tax-free.\nGoods(x): x is goods.\nFair(x): x is a fair.\nExhibition(x): x is an exhibition.\nAbroad(x): x is abroad.\nInvitation(x): x is an invitation.\nRegistration(x): x is a registration.\nExportDeclaration(x): x is an export declaration.\nCustomsOffice(x): x is a customs office.\nCertification(x): x is a certification.\nListGoods(x): x is a list of goods.\nPaymentDocuments(x): x is payment documents.\nValue(x): x is a value.\nPrescribedLevel(x): x is a prescribed level.\nDeclaration(x): x is a declaration.\nRemittance(x): x is a remittance.\nBank(x): x is a bank.\nRegulations(x): x is regulations.\n\nPremises:\nall x (Goods(x) & Fair(x) & Exhibition(x) & Abroad(x) -> TaxFree(x)).\nall x (TaxFree(x) -> (Invitation(x) & Registration(x) & ExportDeclaration(x) & CustomsOffice(x) & Certification(x) & ListGoods(x) & PaymentDocuments(x))).\nall x (Value(x) > PrescribedLevel(x) -> (Declaration(x) & Remittance(x) & Bank(x) & Regulations(x))).\n\nConclusion:\nall x (Goods(x) & Fair(x) & Exhibition(x) & Abroad(x) -> ~Tax(x)).",
        "premises": [
            "all x (Goods(x) & Fair(x) & Exhibition(x) & Abroad(x) -> TaxFree(x)).",
            "all x (TaxFree(x) -> (Invitation(x) & Registration(x) & ExportDeclaration(x) & CustomsOffice(x) & Certification(x) & ListGoods(x) & PaymentDocuments(x))).",
            "all x (Value(x) > PrescribedLevel(x) -> (Declaration(x) & Remittance(x) & Bank(x) & Regulations(x)))."
        ],
        "conclusion": "all x (Goods(x) & Fair(x) & Exhibition(x) & Abroad(x) -> ~Tax(x)).",
        "id": "2fa34069-cac5-4419-9da6-8d84ab0710e9"
    },
    {
        "raw": "Here is the output:\n\nRules:\n1. Taxpayers shall determine by themselves whether they are subjects to make monthly or quarterly tax declaration in order to make tax declaration as prescribed.\n\nGoals:\nDeclare VAT quarterly is possible.\n\nPredicates:\nTaxpayer(x) | Declare(x) | Monthly(x) | Quarterly(x) | VAT(x) | Possible(x) | Subject(x).\n\nExplanation:\nTaxpayer(x): x is a taxpayer.\nDeclare(x): x declares tax.\nMonthly(x): x declares tax monthly.\nQuarterly(x): x declares tax quarterly.\nVAT(x): x is VAT.\nPossible(x): x is possible.\nSubject(x): x is subject to make tax declaration.\n\nPremises:\nall x (Taxpayer(x) -> (Declare(x) & (Monthly(x) | Quarterly(x)))).\nall x (Declare(x) -> Subject(x)).\nall x (VAT(x) -> Declare(x)).\nall x (Quarterly(x) -> Possible(x)).\n\nConclusion:\nall x (VAT(x) -> Possible(x)).",
        "premises": [
            "all x (Taxpayer(x) -> (Declare(x) & (Monthly(x) | Quarterly(x)))).",
            "all x (Declare(x) -> Subject(x)).",
            "all x (VAT(x) -> Declare(x)).",
            "all x (Quarterly(x) -> Possible(x))."
        ],
        "conclusion": "all x (VAT(x) -> Possible(x)).",
        "id": "b97c3e4f-6c35-4e68-923e-c6823c7c63de"
    },
    {
        "raw": "Rules:\n1. Business establishments that have fully complied with regulations on accounting, invoices and documents are eligible for tax credit method.\n2. Eligible business establishments include those earning annual revenue of VND one billion or more, voluntarily registering for tax credit method, foreign organizations and individuals providing goods and services, enterprises and cooperatives earning less than VND 1 billion, newly established enterprises from investment projects, and new enterprises or cooperatives with investment projects.\n3. Business establishments not eligible for tax credit method include business households and individuals paying tax by direct calculation method.\n\nGoals:\nThe enterprise is eligible for tax deduction method.\n\nPredicates:\nEligible(x) | Comply(x) | Accounting(x) | Invoices(x) | Documents(x) | Revenue(x) | Register(x) | Foreign(x) | Goods(x) | Services(x) | Cooperatives(x) | Investment(x) | Project(x) | Approval(x) | Authority(x) | BusinessHouseholds(x) | Individuals(x) | DirectCalculation(x) | TaxDeduction(x) | VAT(x).\n\nExplanation:\nEligible(x): x is eligible for tax credit method.\nComply(x): x complies with regulations.\nAccounting(x): x has accounting.\nInvoices(x): x has invoices.\nDocuments(x): x has documents.\nRevenue(x): x earns revenue.\nRegister(x): x registers for tax credit method.\nForeign(x): x is a foreign organization or individual.\nGoods(x): x provides goods.\nServices(x): x provides services.\nCooperatives(x): x is a cooperative.\nInvestment(x): x has an investment project.\nProject(x): x has an approved investment project.\nApproval(x): x has approval from a competent authority.\nAuthority(x): x is a competent authority.\nBusinessHouseholds(x): x is a business household.\nIndividuals(x): x is an individual.\nDirectCalculation(x): x pays tax by direct calculation method.\nTaxDeduction(x): x is eligible for tax deduction method.\nVAT(x): x is subject to VAT.\n\nPremises:\nall x (Eligible(x) -> (Comply(x) & (Revenue(x) | Register(x) | Foreign(x)))).\nall x (Comply(x) -> (Accounting(x) & Invoices(x) & Documents(x))).\nall x (Revenue(x) -> VNDOneBillion(x)).\nall x (Register(x) -> Voluntary(x)).\nall x (Foreign(x) -> Goods(x) | Services(x)).\nall x (Cooperatives(x) -> Investment(x)).\nall x (Investment(x) -> Project(x)).\nall x (Project(x) -> Approval(x)).\nall x (Approval(x) -> Authority(x)).\nall x (BusinessHouseholds(x) -> DirectCalculation(x)).\nall x (Individuals(x) -> DirectCalculation(x)).\n-TaxDeduction(x) | Eligible(x).\n\nConclusion:\nall x (Eligible(x) -> TaxDeduction(x)).",
        "premises": [
            "all x (Eligible(x) -> (Comply(x) & (Revenue(x) | Register(x) | Foreign(x)))).",
            "all x (Comply(x) -> (Accounting(x) & Invoices(x) & Documents(x))).",
            "all x (Revenue(x) -> VNDOneBillion(x)).",
            "all x (Register(x) -> Voluntary(x)).",
            "all x (Foreign(x) -> Goods(x) | Services(x)).",
            "all x (Cooperatives(x) -> Investment(x)).",
            "all x (Investment(x) -> Project(x)).",
            "all x (Project(x) -> Approval(x)).",
            "all x (Approval(x) -> Authority(x)).",
            "all x (BusinessHouseholds(x) -> DirectCalculation(x)).",
            "all x (Individuals(x) -> DirectCalculation(x)).",
            "-TaxDeduction(x) | Eligible(x)."
        ],
        "conclusion": "all x (Eligible(x) -> TaxDeduction(x)).",
        "id": "b53b7956-d273-456d-a7b9-54f59ca6794f"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1. The chairman needs to inform the members if he/she changes his/her residence.\n2. Failing to notify members of the new place of residence in case of change is prohibited.\n\nGoals:\nInforming members when changing residence is necessary.\n\nPredicates:\nNotify(x) | ChangeResidence(x) | Inform(x) | Member(x) | TontineHolder(x) | Obligation(x) | Penalty(x) | Fine(x) | Organization(x) | Individual(x) | Residence(x) | TontineGroup(x).\n\nExplanation:\nNotify(x): x notifies someone.\nChangeResidence(x): x changes his/her residence.\nInform(x): x informs someone.\nMember(x): x is a member.\nTontineHolder(x): x is a tontine holder.\nObligation(x): x has an obligation.\nPenalty(x): x faces a penalty.\nFine(x): x is fined.\nOrganization(x): x is an organization.\nIndividual(x): x is an individual.\nResidence(x): x is a residence.\nTontineGroup(x): x is a tontine group.\n\nPremises:\nall x (TontineHolder(x) -> Obligation(x)).\nall x (Obligation(x) -> Notify(x)).\nall x (ChangeResidence(x) -> Obligation(x)).\nall x (Notify(x) -> Inform(x)).\nall x (Inform(x) -> Member(x)).\n-Fine(x) | Penalty(x).\nall x (Penalty(x) -> Fine(x)).\n\nConclusion:\nall x (ChangeResidence(x) -> Notify(x)).",
        "premises": [
            "all x (TontineHolder(x) -> Obligation(x)).",
            "all x (Obligation(x) -> Notify(x)).",
            "all x (ChangeResidence(x) -> Obligation(x)).",
            "all x (Notify(x) -> Inform(x)).",
            "all x (Inform(x) -> Member(x)).",
            "-Fine(x) | Penalty(x).",
            "all x (Penalty(x) -> Fine(x))."
        ],
        "conclusion": "all x (ChangeResidence(x) -> Notify(x)).",
        "id": "b8ab422f-0f14-408d-9711-d829f1ea3f48"
    },
    {
        "raw": "Rules:\n1. Parents have the right to recognize their children, even in case the children have died, according to Article 91 of the 2014 Law on Marriage and Family.\n2. In cases where a married person acknowledges a child, the child recognition need not be consented by the other person.\n3. Children have the right to recognize their parents even in case the parents have died.\n4. Adult children who have adopted their fathers without the consent of their mothers, adopted their mothers without the permission of their fathers.\n\nGoals:\nIs it lawful for a parent to recognize a child in case of death or not?\n\nPredicates:\nRecognize(x,y) | Lawful(x) | Parent(x) | Child(x) | Death(x) | Married(x) | Consent(x) | Adult(x) | Father(x) | Mother(x).\n\nExplanation:\nRecognize(x,y): x recognizes y.\nLawful(x): x is lawful.\nParent(x): x is a parent.\nChild(x): x is a child.\nDeath(x): x has died.\nMarried(x): x is married.\nConsent(x): x gives consent.\nAdult(x): x is an adult.\nFather(x): x is a father.\nMother(x): x is a mother.\n\nPremises:\nall x all y (Parent(x) & Child(y) & Death(y) -> Recognize(x,y)).\nall x all y (Married(x) & Recognize(x,y) -> -Consent(y)).\nall x all y (Child(x) & Parent(y) & Death(y) -> Recognize(x,y)).\nall x all y (Adult(x) & Father(y) & Recognize(x,y) -> -Consent(Mother(z))).\nall x all y (Adult(x) & Mother(y) & Recognize(x,y) -> -Consent(Father(z))).\nall x (Recognize(x,y) -> Lawful(x)).\n\nConclusion:\nall x all y (Parent(x) & Child(y) & Death(y) -> Lawful(Recognize(x,y))).",
        "premises": [
            "all x all y (Parent(x) & Child(y) & Death(y) -> Recognize(x,y)).",
            "all x all y (Married(x) & Recognize(x,y) -> -Consent(y)).",
            "all x all y (Child(x) & Parent(y) & Death(y) -> Recognize(x,y)).",
            "all x all y (Adult(x) & Father(y) & Recognize(x,y) -> -Consent(Mother(z))).",
            "all x all y (Adult(x) & Mother(y) & Recognize(x,y) -> -Consent(Father(z))).",
            "all x (Recognize(x,y) -> Lawful(x))."
        ],
        "conclusion": "all x all y (Parent(x) & Child(y) & Death(y) -> Lawful(Recognize(x,y))).",
        "id": "4725c77b-b97f-4cd7-925a-f4971c7fad39"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Common property of husband and wife includes property created by husband and/or wife, incomes generated from labor, production and business activities and other lawful incomes of husband as of the marriage period, property jointly inherited or donated by husband or wife and other property agreed upon by husband as common property.\n2. Gold borrowed by mother-in-law is a common property of husband and wife.\n\nGoals:\nGold can be reclaimed without papers.\n\n###\nPredicates:\nHusband(x) | Wife(x) | MotherInLaw(x) | Gold(x) | Borrow(x) | CommonProperty(x) | Labor(x) | Production(x) | Business(x) | LawfulIncome(x) | MarriagePeriod(x) | Inherit(x) | Donate(x) | Agree(x) | Reclaim(x) | Papers(x).\n\nExplanation:\nHusband(x): x is a husband.\nWife(x): x is a wife.\nMotherInLaw(x): x is a mother-in-law.\nGold(x): x is gold.\nBorrow(x): x borrows gold.\nCommonProperty(x): x is a common property.\nLabor(x): x is labor.\nProduction(x): x is production.\nBusiness(x): x is business.\nLawfulIncome(x): x is a lawful income.\nMarriagePeriod(x): x is during the marriage period.\nInherit(x): x inherits property.\nDonate(x): x donates property.\nAgree(x): x agrees on property.\nReclaim(x): x reclaims gold.\nPapers(x): x has papers.\n\nPremises:\nall x (Husband(x) & Wife(x) -> CommonProperty(x)).\nall x (MotherInLaw(x) & Borrow(x) -> CommonProperty(x)).\nall x (CommonProperty(x) -> (Labor(x) | Production(x) | Business(x) | LawfulIncome(x))).\nall x (MarriagePeriod(x) -> CommonProperty(x)).\nall x (Inherit(x) -> CommonProperty(x)).\nall x (Donate(x) -> CommonProperty(x)).\nall x (Agree(x) -> CommonProperty(x)).\nall x (Reclaim(x) -> (Gold(x) & Papers(x))).\n\nConclusion:\nall x (Borrow(x) -> Reclaim(x)).",
        "premises": [
            "all x (Husband(x) & Wife(x) -> CommonProperty(x)).",
            "all x (MotherInLaw(x) & Borrow(x) -> CommonProperty(x)).",
            "all x (CommonProperty(x) -> (Labor(x) | Production(x) | Business(x) | LawfulIncome(x))).",
            "all x (MarriagePeriod(x) -> CommonProperty(x)).",
            "all x (Inherit(x) -> CommonProperty(x)).",
            "all x (Donate(x) -> CommonProperty(x)).",
            "all x (Agree(x) -> CommonProperty(x)).",
            "all x (Reclaim(x) -> (Gold(x) & Papers(x)))."
        ],
        "conclusion": "all x (Borrow(x) -> Reclaim(x)).",
        "id": "a5b711e6-fec4-427a-b585-7813856759d9"
    },
    {
        "raw": "Here is the output:\n\nRules:\n1. According to Clause 2 Article 17, Clause 1 Article 18 of the Law on the Elderly, the persons aged 80 years or older without monthly pension, social insurance benefits or social insurance benefit shall be bought health insurance cards by the State if they are not on monthly pension or social security benefits or monthly social insurance allowance.\n\nGoals:\nIs the monthly death benefit covered by health insurance?\n\n###\nPredicates:\nAged(x) | Pension(x) | Benefits(x) | Insurance(x) | State(x) | Covered(x) | Monthly(x) | DeathBenefit(x) | HealthInsurance(x).\n\nExplanation:\nAged(x): x is 80 years or older.\nPension(x): x has monthly pension.\nBenefits(x): x has social insurance benefits.\nInsurance(x): x has health insurance.\nState(x): x is the State.\nCovered(x): x is covered by health insurance.\nMonthly(x): x is monthly.\nDeathBenefit(x): x is death benefit.\nHealthInsurance(x): x is health insurance.\n\nPremises:\nall x (Aged(x) & ~Pension(x) & ~Benefits(x) -> Insurance(x)).\nall x (Insurance(x) -> Covered(x)).\nall x (State(x) -> Insurance(x)).\nall x (Monthly(x) -> ~DeathBenefit(x)).\n~Covered(DeathBenefit).\n\nConclusion:\n~Covered(DeathBenefit).",
        "premises": [
            "all x (Aged(x) & ~Pension(x) & ~Benefits(x) -> Insurance(x)).",
            "all x (Insurance(x) -> Covered(x)).",
            "all x (State(x) -> Insurance(x)).",
            "all x (Monthly(x) -> ~DeathBenefit(x)).",
            "~Covered(DeathBenefit)."
        ],
        "conclusion": "~Covered(DeathBenefit).",
        "id": "d8436917-cdb6-434e-bf1a-4f2d92eee212"
    },
    {
        "raw": "Here is the output:\n\nRules:\n1. You're not guilty of a crime if you're buying and selling in the first place.\n2. If you've heard about this car and you're not sure if it's a fake, you should call the police and find out what's going on.\n\nGoals:\nIs it a crime to buy and sell car in the nature of a crime?\n\nPredicates:\nCrime(x) | Buy(x) | Sell(x) | Fake(x) | CallPolice(x) | Guilty(x) | Car(x) | Nature(x).\n\nExplanation:\nCrime(x): x is a crime.\nBuy(x): x buys.\nSell(x): x sells.\nFake(x): x is fake.\nCallPolice(x): x calls the police.\nGuilty(x): x is guilty.\nCar(x): x is a car.\nNature(x): x is in the nature of.\n\nPremises:\nall x (Buy(x) & Sell(x) -> -Guilty(x)).\nall x (Fake(x) -> Crime(x)).\nall x (CallPolice(x) -> -Fake(x)).\nall x (Car(x) -> Nature(x)).\n-Guilty(x) | CallPolice(x).\n\nConclusion:\nall x (Buy(x) & Sell(x) -> -Crime(x)).",
        "premises": [
            "all x (Buy(x) & Sell(x) -> -Guilty(x)).",
            "all x (Fake(x) -> Crime(x)).",
            "all x (CallPolice(x) -> -Fake(x)).",
            "all x (Car(x) -> Nature(x)).",
            "-Guilty(x) | CallPolice(x)."
        ],
        "conclusion": "all x (Buy(x) & Sell(x) -> -Crime(x)).",
        "id": "0b825725-dbf3-44be-b0e2-159759f3ff46"
    },
    {
        "raw": "Rules:\n1.The National Center for Judicial Records shall issue judicial records cards to Vietnamese citizens whose places of permanent or temporary residence are unidentifiable.\n2.Foreigners residing in Vietnam may file their applications with provincial-level Justice Departments of localities where they reside.\n3.Foreigners who have already left Vietnam shall file their application with the National Center for Judicial Records.\n4.Individuals requesting the issue of judicial records card No. 1 may authorize others to carry out procedures for the issuation of judicial document cards.\n5.A dossier of request for issuance of a judicial record card comprises several documents.\n\nGoals:\nIs it possible to authorize another person to request issuance of Criminal record number 1?\n\nPredicates:\nIssue(x) | Residence(x) | Vietnamese(x) | Foreigner(x) | JusticeDepartment(x) | Authorize(x) | Procedure(x) | JudicialRecord(x) | NationalCenter(x) | Ministry(x) | Dossier(x) | Document(x) | Permanent(x) | Temporary(x) | PoliceOffice(x) | Passport(x) | PowerOfAttorney(x) | Notarized(x) | Certified(x) | Father(x) | Mother(x) | Spouse(x) | Child(x) | WrittenAuthorization(x) | Possible(x)\n\nExplanation:\nIssue(x): x issues a judicial record card.\nResidence(x): x has a place of permanent or temporary residence.\nVietnamese(x): x is a Vietnamese citizen.\nForeigner(x): x is a foreigner.\nJusticeDepartment(x): x is a provincial-level Justice Department.\nAuthorize(x): x authorizes another person.\nProcedure(x): x carries out a procedure.\nJudicialRecord(x): x is a judicial record card.\nNationalCenter(x): x is the National Center for Judicial Records.\nMinistry(x): x is the Ministry of Justice.\nDossier(x): x is a dossier of request.\nDocument(x): x is a document.\nPermanent(x): x is a permanent residence.\nTemporary(x): x is a temporary residence.\nPoliceOffice(x): x is a police office.\nPassport(x): x is a passport.\nPowerOfAttorney(x): x is a power of attorney.\nNotarized(x): x is notarized.\nCertified(x): x is certified.\nFather(x): x is a father.\nMother(x): x is a mother.\nSpouse(x): x is a spouse.\nChild(x): x is a child.\nWrittenAuthorization(x): x is a written authorization.\nPossible(x): x is possible.\n\nPremises:\nall x (Residence(x) -> (Vietnamese(x) | Foreigner(x))).\nall x (Foreigner(x) -> (JusticeDepartment(x) | NationalCenter(x))).\nall x (Authorize(x) -> Procedure(x)).\nall x (Procedure(x) -> JudicialRecord(x)).\nall x (JudicialRecord(x) -> NationalCenter(x)).\nall x (Dossier(x) -> (Document(x) & PowerOfAttorney(x))).\nall x (PowerOfAttorney(x) -> (Notarized(x) | Certified(x))).\nall x (Father(x) | Mother(x) | Spouse(x) | Child(x) -> WrittenAuthorization(x)).\n-Authorize(x) | WrittenAuthorization(x).\n\nConclusion:\nall x (Authorize(x) -> Possible(x)).",
        "premises": [
            "all x (Residence(x) -> (Vietnamese(x) | Foreigner(x))).",
            "all x (Foreigner(x) -> (JusticeDepartment(x) | NationalCenter(x))).",
            "all x (Authorize(x) -> Procedure(x)).",
            "all x (Procedure(x) -> JudicialRecord(x)).",
            "all x (JudicialRecord(x) -> NationalCenter(x)).",
            "all x (Dossier(x) -> (Document(x) & PowerOfAttorney(x))).",
            "all x (PowerOfAttorney(x) -> (Notarized(x) | Certified(x))).",
            "all x (Father(x) | Mother(x) | Spouse(x) | Child(x) -> WrittenAuthorization(x)).",
            "-Authorize(x) | WrittenAuthorization(x)."
        ],
        "conclusion": "all x (Authorize(x) -> Possible(x)).",
        "id": "fe3b1bfa-7f90-4dce-a1f7-008bf0e5d5f5"
    },
    {
        "raw": "Rules:\n1. You can file a divorce application without a marriage license.\n2. To obtain a marriage certificate for use as a divorce file, you need to contact the civil status office where you previously registered your marriage to obtain a copy.\n3. The divorce file should state why the original marriage certificate is not available.\n4. During the court process, your spouse will be required to submit the original.\n5. Household registration: Contact the police authority of the ward or commune where you and your spouse reside to confirm that your spouse is a permanent resident of the locality.\n6. Birth registration: Contact the civil status authority where you registered your child's birth to apply for a copy.\n7. The place of settlement: The district-level People's Court of the locality where the husband resides or works.\n8. You and your spouse may reach an agreement to request the Court of the area where you reside or work to settle the case.\n\nGoals:\nIs it possible to divorce without an original marriage certificate?\n\nPredicates:\nDivorce(x) | MarriageLicense(x) | MarriageCertificate(x) | Copy(x) | CivilStatusOffice(x) | Original(x) | Spouse(x) | HouseholdRegistration(x) | PoliceAuthority(x) | PermanentResident(x) | BirthRegistration(x) | Court(x) | Settlement(x) | Agreement(x) | Husband(x) | Wife(x) | Reside(x) | Work(x) | Possible(x)\n\nExplanation:\nDivorce(x): x is a divorce.\nMarriageLicense(x): x is a marriage license.\nMarriageCertificate(x): x is a marriage certificate.\nCopy(x): x is a copy.\nCivilStatusOffice(x): x is a civil status office.\nOriginal(x): x is an original.\nSpouse(x): x is a spouse.\nHouseholdRegistration(x): x is a household registration.\nPoliceAuthority(x): x is a police authority.\nPermanentResident(x): x is a permanent resident.\nBirthRegistration(x): x is a birth registration.\nCourt(x): x is a court.\nSettlement(x): x is a settlement.\nAgreement(x): x is an agreement.\nHusband(x): x is a husband.\nWife(x): x is a wife.\nReside(x): x resides.\nWork(x): x works.\nPossible(x): x is possible.\n\nPremises:\nall x (Divorce(x) -> ~MarriageLicense(x)).\nall x (MarriageCertificate(x) -> Copy(x)).\nall x (Copy(x) -> CivilStatusOffice(x)).\nall x (Original(x) -> Spouse(x)).\nall x (Spouse(x) -> HouseholdRegistration(x)).\nall x (HouseholdRegistration(x) -> PoliceAuthority(x)).\nall x (PoliceAuthority(x) -> PermanentResident(x)).\nall x (BirthRegistration(x) -> Court(x)).\nall x (Court(x) -> Settlement(x)).\nall x (Settlement(x) -> Agreement(x)).\nall x (Agreement(x) -> (Husband(x) & Wife(x))).\nall x (Husband(x) -> Reside(x)).\nall x (Wife(x) -> Reside(x)).\nall x (Reside(x) -> Work(x)).\n-Possible(x) | Divorce(x).\n\nConclusion:\nall x (Divorce(x) -> Possible(x)).",
        "premises": [
            "all x (Divorce(x) -> ~MarriageLicense(x)).",
            "all x (MarriageCertificate(x) -> Copy(x)).",
            "all x (Copy(x) -> CivilStatusOffice(x)).",
            "all x (Original(x) -> Spouse(x)).",
            "all x (Spouse(x) -> HouseholdRegistration(x)).",
            "all x (HouseholdRegistration(x) -> PoliceAuthority(x)).",
            "all x (PoliceAuthority(x) -> PermanentResident(x)).",
            "all x (BirthRegistration(x) -> Court(x)).",
            "all x (Court(x) -> Settlement(x)).",
            "all x (Settlement(x) -> Agreement(x)).",
            "all x (Agreement(x) -> (Husband(x) & Wife(x))).",
            "all x (Husband(x) -> Reside(x)).",
            "all x (Wife(x) -> Reside(x)).",
            "all x (Reside(x) -> Work(x)).",
            "-Possible(x) | Divorce(x)."
        ],
        "conclusion": "all x (Divorce(x) -> Possible(x)).",
        "id": "3b17b2c1-d9eb-47c7-979b-bac41de9ea28"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1. If you are interested in unemployment benefits being handled by a Labor, War Invalids and Social Affairs Center, please contact the Center directly for specific guidance.\n2. The company's employees shall bring the social insurance book and copies of birth certificate and decision on resignation to the Center for settlement.\n\nGoals:\nUnemployment insurance is authorized to do this for you.\n\nPredicates:\nInterested(x) | Contact(x) | Handle(x) | Bring(x) | Settlement(x) | Authorized(x) | LaborCenter(x) | Employee(x) | SocialInsurance(x) | BirthCertificate(x) | Resignation(x).\n\nExplanation:\nInterested(x): x is interested in unemployment benefits.\nContact(x): x contacts the Labor Center.\nHandle(x): x handles unemployment benefits.\nBring(x): x brings required documents.\nSettlement(x): x settles unemployment benefits.\nAuthorized(x): x is authorized to handle unemployment benefits.\nLaborCenter(x): x is the Labor, War Invalids and Social Affairs Center.\nEmployee(x): x is a company employee.\nSocialInsurance(x): x is social insurance.\nBirthCertificate(x): x is a birth certificate.\nResignation(x): x is a decision on resignation.\n\nPremises:\nall x (Interested(x) -> Contact(x)).\nall x (Contact(x) -> Handle(x)).\nall x (Handle(x) -> Bring(x)).\nall x (Bring(x) -> Settlement(x)).\nall x (Settlement(x) -> Authorized(x)).\nall x (LaborCenter(x) -> Handle(x)).\nall x (Employee(x) -> Bring(x)).\nall x (SocialInsurance(x) -> Bring(x)).\nall x (BirthCertificate(x) -> Bring(x)).\nall x (Resignation(x) -> Bring(x)).\n-Authorized(x) | LaborCenter(x).\n\nConclusion:\nall x (Authorized(x)).",
        "premises": [
            "all x (Interested(x) -> Contact(x)).",
            "all x (Contact(x) -> Handle(x)).",
            "all x (Handle(x) -> Bring(x)).",
            "all x (Bring(x) -> Settlement(x)).",
            "all x (Settlement(x) -> Authorized(x)).",
            "all x (LaborCenter(x) -> Handle(x)).",
            "all x (Employee(x) -> Bring(x)).",
            "all x (SocialInsurance(x) -> Bring(x)).",
            "all x (BirthCertificate(x) -> Bring(x)).",
            "all x (Resignation(x) -> Bring(x)).",
            "-Authorized(x) | LaborCenter(x)."
        ],
        "conclusion": "all x (Authorized(x)).",
        "id": "c134d882-f74b-41ed-88bf-deb6676cbbb6"
    },
    {
        "raw": "Rules:\n1.Article 14 of Law on Adoption provides for the following conditions for adopters: a) Have full civil act capacity, b) be 20 years or older than the adopted child, c) have health, economic and accommodation conditions to ensure the care for, nurture and education of the adopted children, d) have good moral qualities.\n2. The following persons must not adopt children: a/They are restricted in some rights of fathers and/or mothers toward their minor children, b/Their serving administrative handling decisions at education or medical establishments, c/Those serving imprisonment penalties, d/There is no criminal record remission for one of the crimes of intentionally infringing upon the lives, health, dignity or honor of other persons.\n3. In case a stepfather adopts a stepchild of his/her wife or a stepmother adopts his/hers stepchild or a natural aunt or uncle adopts the niece or nephew, the provisions of Points b and c, Clause 1 of this Article shall not apply.\n\nGoals:\nDo single people get adopted?\n\nPredicates:\nAdopter(x) | CivilCapacity(x) | Age(x) | Health(x) | Economic(x) | Accommodation(x) | Moral(x) | Restricted(x) | Administrative(x) | Imprisonment(x) | CriminalRecord(x) | Adopt(x) | Single(x)\n\nExplanation:\nAdopter(x): x is an adopter.\nCivilCapacity(x): x has full civil act capacity.\nAge(x): x is 20 years or older than the adopted child.\nHealth(x): x has health conditions.\nEconomic(x): x has economic conditions.\nAccommodation(x): x has accommodation conditions.\nMoral(x): x has good moral qualities.\nRestricted(x): x is restricted in some rights.\nAdministrative(x): x is serving administrative handling decisions.\nImprisonment(x): x is serving imprisonment penalties.\nCriminalRecord(x): x has no criminal record remission.\nAdopt(x): x adopts a child.\nSingle(x): x is single.\n\nPremises:\nall x (Adopter(x) -> (CivilCapacity(x) & Age(x) & Health(x) & Economic(x) & Accommodation(x) & Moral(x))).\nall x (~Restricted(x) & ~Administrative(x) & ~Imprisonment(x) & ~CriminalRecord(x) -> Adopter(x)).\nall x (Adopter(x) -> Adopt(x)).\nall x (Single(x) -> Adopter(x)).\n\nConclusion:\nall x (Single(x) -> Adopt(x)).",
        "premises": [
            "all x (Adopter(x) -> (CivilCapacity(x) & Age(x) & Health(x) & Economic(x) & Accommodation(x) & Moral(x))).",
            "all x (~Restricted(x) & ~Administrative(x) & ~Imprisonment(x) & ~CriminalRecord(x) -> Adopter(x)).",
            "all x (Adopter(x) -> Adopt(x)).",
            "all x (Single(x) -> Adopter(x))."
        ],
        "conclusion": "all x (Single(x) -> Adopt(x)).",
        "id": "4f6a9b65-564d-45fb-a258-719994b43e47"
    },
    {
        "raw": "Here is the transformed output:\n\nRules:\n1. A sibling gives a child to a younger sibling for adoption, the younger sibling must change his/her last name and not have his/ her birth name written on the birth certificate.\n2. The birth certificate only says adoptive mother, not biological mother.\n\nGoals:\nAdopt and have another child is possible.\n\nPredicates:\nAdopt(x,y) | ChangeName(x) | BirthCertificate(x,y) | AdoptiveMother(x) | BiologicalMother(x) | HaveChild(x,y) | Possible(x) | Sibling(x,y) | YoungerSibling(x,y).\n\nExplanation:\nAdopt(x,y): x adopts y.\nChangeName(x): x changes his/her last name.\nBirthCertificate(x,y): y's birth certificate says x as mother.\nAdoptiveMother(x): x is an adoptive mother.\nBiologicalMother(x): x is a biological mother.\nHaveChild(x,y): x has a child y.\nPossible(x): x is possible.\nSibling(x,y): x and y are siblings.\nYoungerSibling(x,y): x is younger sibling of y.\n\nPremises:\nall x,y (Adopt(x,y) -> ChangeName(x)).\nall x,y (Adopt(x,y) -> BirthCertificate(x,y)).\nall x,y (BirthCertificate(x,y) -> AdoptiveMother(x)).\nall x,y (BirthCertificate(x,y) -> -BiologicalMother(x)).\nall x,y (Sibling(x,y) -> YoungerSibling(y,x)).\nall x,y (Adopt(x,y) & HaveChild(x,z) -> Possible(HaveChild(x,z))).\n\nConclusion:\nall x,y (Adopt(x,y) & HaveChild(x,z) -> Possible(HaveChild(x,z))).",
        "premises": [
            "all x,y (Adopt(x,y) -> ChangeName(x)).",
            "all x,y (Adopt(x,y) -> BirthCertificate(x,y)).",
            "all x,y (BirthCertificate(x,y) -> AdoptiveMother(x)).",
            "all x,y (BirthCertificate(x,y) -> -BiologicalMother(x)).",
            "all x,y (Sibling(x,y) -> YoungerSibling(y,x)).",
            "all x,y (Adopt(x,y) & HaveChild(x,z) -> Possible(HaveChild(x,z)))."
        ],
        "conclusion": "all x,y (Adopt(x,y) & HaveChild(x,z) -> Possible(HaveChild(x,z))).",
        "id": "cb5661bd-324e-4172-9aff-613a3842d0a0"
    },
    {
        "raw": "Rules:\n1. According to provisions in point b clause 2 Article 28 of Law on Adoption 2010, a case shall be considered, settled.\n2. Pursuant to Article 31 of this Law, the couple should prepare papers for adoption.\n3. The documents must be consularly legalized by the Vietnamese Embassy in the UK, translated into Vietnamese and certified by the Vietnam Embassy in Britain or Vietnamese district Justice Offices.\n4. The dossier is made in 02 sets.\n5. The family in Vietnam should prepare additional documents.\n6. Vietnam is in the process of elaborating a Decree detailing the implementation of a number of articles of the Adoption Law.\n\nGoals:\nAdopting a niece or nephew over 14 years old is legal.\n\nPredicates:\nAdopt(x) | Legal(x) | Age(x,y) | NieceNephew(x) | Over14(x) | Vietnam(x) | UK(x) | Embassy(x) | Certified(x) | Set(x) | Family(x) | Paper(x) | Decree(x) | Law(x).\n\nExplanation:\nAdopt(x): x adopts a child.\nLegal(x): x is legal.\nAge(x,y): x has age y.\nNieceNephew(x): x is a niece or nephew.\nOver14(x): x is over 14 years old.\nVietnam(x): x is in Vietnam.\nUK(x): x is in the UK.\nEmbassy(x): x is the Vietnamese Embassy.\nCertified(x): x is certified.\nSet(x): x is a set.\nFamily(x): x is a family.\nPaper(x): x is a paper.\nDecree(x): x is a Decree.\nLaw(x): x is a Law.\n\nPremises:\nall x (Adopt(x) -> Legal(x)).\nall x (Legal(x) -> (Paper(x) & Certified(x))).\nall x (Paper(x) -> (Embassy(x) | Family(x))).\nall x (Certified(x) -> (UK(x) | Vietnam(x))).\nall x (Family(x) -> Vietnam(x)).\nall x (NieceNephew(x) -> Family(x)).\nall x (Age(x,14) -> Over14(x)).\nall x (Over14(x) -> Adopt(x)).\n\nConclusion:\nall x (NieceNephew(x) & Over14(x) -> Legal(x)).",
        "premises": [
            "all x (Adopt(x) -> Legal(x)).",
            "all x (Legal(x) -> (Paper(x) & Certified(x))).",
            "all x (Paper(x) -> (Embassy(x) | Family(x))).",
            "all x (Certified(x) -> (UK(x) | Vietnam(x))).",
            "all x (Family(x) -> Vietnam(x)).",
            "all x (NieceNephew(x) -> Family(x)).",
            "all x (Age(x,14) -> Over14(x)).",
            "all x (Over14(x) -> Adopt(x))."
        ],
        "conclusion": "all x (NieceNephew(x) & Over14(x) -> Legal(x)).",
        "id": "543e7524-21e8-4d98-a4a5-e881fac0d570"
    },
    {
        "raw": "Here is the output:\n\nRules:\n1. Clause 2, Article 28 of Decree No. 158/2005/ND-CP rejects requests for change of natural parents' declaration to adoptive parents' in birth certificates and birth registers of adopted children in certain cases.\n2. One of the cases is changing the declaration of one parent to the declaration about an adoptive parent or adoptive mother, while keeping the declaration on the other parent.\n\nGoals:\nIs it possible to change the name of the natural mother with the name adopted mother in birth after adoption?\n\nPredicates:\nReject(x) | Change(x) | NaturalParent(x) | AdoptiveParent(x) | AdoptiveMother(x) | BirthCertificate(x) | BirthRegister(x) | AdoptedChild(x) | Declaration(x) | Parent(x) | Mother(x) | Adopted(x) | Possible(x).\n\nExplanation:\nReject(x): x rejects a request.\nChange(x): x changes a declaration.\nNaturalParent(x): x is a natural parent.\nAdoptiveParent(x): x is an adoptive parent.\nAdoptiveMother(x): x is an adoptive mother.\nBirthCertificate(x): x is a birth certificate.\nBirthRegister(x): x is a birth register.\nAdoptedChild(x): x is an adopted child.\nDeclaration(x): x is a declaration.\nParent(x): x is a parent.\nMother(x): x is a mother.\nAdopted(x): x is adopted.\nPossible(x): x is possible.\n\nPremises:\nall x (Reject(x) <-> (Change(x) & (NaturalParent(x) <-> AdoptiveParent(x)))).\nall x (AdoptiveMother(x) -> AdoptiveParent(x)).\nall x (BirthCertificate(x) & BirthRegister(x) -> AdoptedChild(x)).\nall x (Declaration(x) -> Parent(x)).\nall x (Mother(x) -> Parent(x)).\nall x (Adopted(x) -> AdoptedChild(x)).\n-Change(x) | -AdoptiveMother(x).\n\nConclusion:\nall x (Change(x) -> Possible(x)).",
        "premises": [
            "all x (Reject(x) <-> (Change(x) & (NaturalParent(x) <-> AdoptiveParent(x)))).",
            "all x (AdoptiveMother(x) -> AdoptiveParent(x)).",
            "all x (BirthCertificate(x) & BirthRegister(x) -> AdoptedChild(x)).",
            "all x (Declaration(x) -> Parent(x)).",
            "all x (Mother(x) -> Parent(x)).",
            "all x (Adopted(x) -> AdoptedChild(x)).",
            "-Change(x) | -AdoptiveMother(x)."
        ],
        "conclusion": "all x (Change(x) -> Possible(x)).",
        "id": "9eaf2ce2-1667-415b-992c-6ee52b86cb7c"
    },
    {
        "raw": "Here is the result:\n\nRules:\n1. Persons from full 16 to under 18 years old are adopted if they are adopted by stepfather, stepmother, or natural aunt, uncle.\nGoals:\nAdopting 18-year-old stepchild is okay.\n\nPredicates:\nAdopt(x,y) | Age(x,y) | Stepfather(x) | Stepmother(x) | Aunt(x) | Uncle(x) | Natural(x) | Okay(x) | Wife(x) | Stepchild(x).\n\nExplanation:\nAdopt(x,y): x adopts y.\nAge(x,y): x is y years old.\nStepfather(x): x is a stepfather.\nStepmother(x): x is a stepmother.\nAunt(x): x is an aunt.\nUncle(x): x is an uncle.\nNatural(x): x is natural.\nOkay(x): x is okay.\nWife(x): x is a wife.\nStepchild(x): x is a stepchild.\n\nPremises:\nall x all y (Adopt(x,y) -> (Age(y,16) & Age(y,18) & (Stepfather(x) | Stepmother(x) | Aunt(x) | Uncle(x)))).\n-Adopt(x,y) | -(Age(y,18)).\nall x (Wife(x) -> -Stepfather(x)).\nall x (Stepchild(x) -> -Natural(x)).\n\nConclusion:\n-Okay(x).",
        "premises": [
            "all x all y (Adopt(x,y) -> (Age(y,16) & Age(y,18) & (Stepfather(x) | Stepmother(x) | Aunt(x) | Uncle(x)))).",
            "-Adopt(x,y) | -(Age(y,18)).",
            "all x (Wife(x) -> -Stepfather(x)).",
            "all x (Stepchild(x) -> -Natural(x))."
        ],
        "conclusion": "-Okay(x).",
        "id": "10c5df0a-71f0-4437-a3cc-a06f2cc48d75"
    },
    {
        "raw": "Here is the output:\n\nRules:\n1. The following persons shall still be entitled to an estate equal to two-thirds of the share of an at-law heir, if the estate is distributed at law, if they are not entitled to the estate or are entitled to less than two-three shares of that share, unless they are the persons who refuse to receive the estate as provided for in Article 642 or they are persons who are not allowed to inherit the estate under Clause 1, Article 63 of this Code: \n2. The minor children, their parents, spouse, Grown-up children have no working capacity.\n\nGoals:\nIs the disabled person inheritable estate?\n\nPredicates:\nEntitled(x) | Inherit(x) | Refuse(x) | Allowed(x) | Minor(x) | Parent(x) | Spouse(x) | GrownUp(x) | WorkingCapacity(x) | Disabled(x) | InheritEstate(x).\n\nExplanation:\nEntitled(x): x is entitled to an estate.\nInherit(x): x inherits an estate.\nRefuse(x): x refuses to receive the estate.\nAllowed(x): x is allowed to inherit the estate.\nMinor(x): x is a minor child.\nParent(x): x is a parent.\nSpouse(x): x is a spouse.\nGrownUp(x): x is a grown-up child.\nWorkingCapacity(x): x has working capacity.\nDisabled(x): x is disabled.\nInheritEstate(x): x inherits an estate.\n\nPremises:\nall x (Entitled(x) -> (Inherit(x) & ~Refuse(x) & Allowed(x))).\nall x (Minor(x) -> Entitled(x)).\nall x (Parent(x) -> Entitled(x)).\nall x (Spouse(x) -> Entitled(x)).\nall x (GrownUp(x) & ~WorkingCapacity(x) -> Entitled(x)).\nall x (Disabled(x) -> ~WorkingCapacity(x)).\n-Entitled(x) | InheritEstate(x).\n\nConclusion:\nall x (Disabled(x) -> InheritEstate(x)).",
        "premises": [
            "all x (Entitled(x) -> (Inherit(x) & ~Refuse(x) & Allowed(x))).",
            "all x (Minor(x) -> Entitled(x)).",
            "all x (Parent(x) -> Entitled(x)).",
            "all x (Spouse(x) -> Entitled(x)).",
            "all x (GrownUp(x) & ~WorkingCapacity(x) -> Entitled(x)).",
            "all x (Disabled(x) -> ~WorkingCapacity(x)).",
            "-Entitled(x) | InheritEstate(x)."
        ],
        "conclusion": "all x (Disabled(x) -> InheritEstate(x)).",
        "id": "6587158f-701a-498b-a12e-a85c329b157f"
    },
    {
        "raw": "Rules:\n1. After divorce, alimony is the obligation of parents who do not directly raise children.\n2. The persons directly raising children do not request the persons not directly raising the children to provide support for some reason.\n3. The courts should explain to them that the request for support for child raising is the interests of the children.\n4. The refusal to request financial support is voluntary and that the party concerned has the necessary capacity and conditions to rear the child.\n5. The obligation to provide financial support is provided in Clause 2 Article 107 and Article 119 of the 2014 Law on Marriage and Family.\n\nGoals:\nRefuse alimony from father after divorce.\n\nPredicates:\nAlimony(x) | Obligation(x) | Divorce(x) | Parent(x) | Raise(x) | Request(x) | Support(x) | Interest(x) | Child(x) | Capacity(x) | Condition(x) | Refuse(x) | Voluntary(x) | Necessary(x) | Law(x) | Family(x) | Marriage(x).\n\nExplanation:\nAlimony(x): x is alimony.\nObligation(x): x is an obligation.\nDivorce(x): x is a divorce.\nParent(x): x is a parent.\nRaise(x): x raises a child.\nRequest(x): x makes a request.\nSupport(x): x provides support.\nInterest(x): x is in the interest of.\nChild(x): x is a child.\nCapacity(x): x has capacity.\nCondition(x): x has condition.\nRefuse(x): x refuses.\nVoluntary(x): x is voluntary.\nNecessary(x): x is necessary.\nLaw(x): x is a law.\nFamily(x): x is a family.\nMarriage(x): x is a marriage.\n\nPremises:\nall x (Divorce(x) -> Obligation(x, Alimony(x))).\nall x (Parent(x) -> (Raise(x) | Support(x))).\nall x (Request(x) -> Interest(x, Child(x))).\nall x (Refuse(x) -> (Voluntary(x) & Necessary(x))).\nall x (Law(x) -> Family(x)).\nall x (Marriage(x) -> Family(x)).\nall x (Obligation(x, Alimony(x)) -> Parent(x)).\n-Refuse(x) | Support(x).\n\nConclusion:\nall x (Divorce(x) -> Refuse(x, Alimony(x))).",
        "premises": [
            "all x (Divorce(x) -> Obligation(x, Alimony(x))).",
            "all x (Parent(x) -> (Raise(x) | Support(x))).",
            "all x (Request(x) -> Interest(x, Child(x))).",
            "all x (Refuse(x) -> (Voluntary(x) & Necessary(x))).",
            "all x (Law(x) -> Family(x)).",
            "all x (Marriage(x) -> Family(x)).",
            "all x (Obligation(x, Alimony(x)) -> Parent(x)).",
            "-Refuse(x) | Support(x)."
        ],
        "conclusion": "all x (Divorce(x) -> Refuse(x, Alimony(x))).",
        "id": "1f9671c4-7c46-4797-8aed-c28d7a882e57"
    },
    {
        "raw": "Here is the output:\n\nRules:\n1. Security assets are existing assets or future assets which are not banned from transaction by law.\n2. Assets formed from loans, Assets in the formulation stage or being lawfully created at the time of entering into security transactions, Assets which have been formed and subject to ownership registration, but are registered under law after the time the security transactions are entered into.\n3. Organizations and individuals that build off-plan residences on their legitimate lands, organizations and individuals buying off-purpose residences in the investor's housing construction projects may mortgage such residences at credit institutions operating in Vietnam to take loans for the construction of residences or to buy the residences themselves.\n\nGoals:\nIt is good to register for the security transaction registration of future-acquired houses.\n\nPredicates:\nSecurity(x) | Existing(x) | Future(x) | Banned(x) | Law(x) | Loan(x) | Formulation(x) | Created(x) | Ownership(x) | Registered(x) | Mortgage(x) | Legitimate(x) | CreditInstitution(x) | Vietnam(x) | Good(x) | Register(x) | Transaction(x) | House(x) | Acquired(x).\n\nExplanation:\nSecurity(x): x is a security asset.\nExisting(x): x is an existing asset.\nFuture(x): x is a future asset.\nBanned(x): x is banned from transaction by law.\nLaw(x): x is according to law.\nLoan(x): x is a loan.\nFormulation(x): x is in the formulation stage.\nCreated(x): x is lawfully created.\nOwnership(x): x is subject to ownership registration.\nRegistered(x): x is registered under law.\nMortgage(x): x may mortgage.\nLegitimate(x): x is legitimate.\nCreditInstitution(x): x is a credit institution.\nVietnam(x): x is in Vietnam.\nGood(x): x is good.\nRegister(x): x is registered.\nTransaction(x): x is a transaction.\nHouse(x): x is a house.\nAcquired(x): x is acquired.\n\nPremises:\nall x (Security(x) -> (Existing(x) | Future(x))).\nall x (Future(x) -> ~Banned(x)).\nall x (Loan(x) -> Formulation(x)).\nall x (Formulation(x) -> Created(x)).\nall x (Created(x) -> Ownership(x)).\nall x (Ownership(x) -> Registered(x)).\nall x (Registered(x) -> Mortgage(x)).\nall x (Mortgage(x) -> Legitimate(x)).\nall x (Legitimate(x) -> CreditInstitution(x)).\nall x (CreditInstitution(x) -> Vietnam(x)).\nall x (Vietnam(x) -> Good(x)).\nall x (Good(x) -> Register(x)).\nall x (Register(x) -> Transaction(x)).\nall x (Transaction(x) -> House(x)).\nall x (House(x) -> Acquired(x)).\n-Register(x) | Acquired(x).\n\nConclusion:\nall x (Register(x) -> Good(x)).",
        "premises": [
            "all x (Security(x) -> (Existing(x) | Future(x))).",
            "all x (Future(x) -> ~Banned(x)).",
            "all x (Loan(x) -> Formulation(x)).",
            "all x (Formulation(x) -> Created(x)).",
            "all x (Created(x) -> Ownership(x)).",
            "all x (Ownership(x) -> Registered(x)).",
            "all x (Registered(x) -> Mortgage(x)).",
            "all x (Mortgage(x) -> Legitimate(x)).",
            "all x (Legitimate(x) -> CreditInstitution(x)).",
            "all x (CreditInstitution(x) -> Vietnam(x)).",
            "all x (Vietnam(x) -> Good(x)).",
            "all x (Good(x) -> Register(x)).",
            "all x (Register(x) -> Transaction(x)).",
            "all x (Transaction(x) -> House(x)).",
            "all x (House(x) -> Acquired(x)).",
            "-Register(x) | Acquired(x)."
        ],
        "conclusion": "all x (Register(x) -> Good(x)).",
        "id": "3eddeeea-1eeb-4c6e-a788-a6518161f087"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1. The commune-level People'S Committee of the mother's residence registers the birth for the child.\n2. If the mother's place of residence cannot be identified, the commune-level People's Committee of the father's residence registers the birth.\n3. If the places of residence of the mother and father cannot be identified, the commune-level People's Committee of the locality where the child is living in reality registers the birth.\n4. Birth registration for an abandoned child is carried out at the commune-level People's Committee of the locality where the person temporarily raising the child resides or the organization temporarily raising such child is headquartered.\n\nGoals:\nRegister birth for your child in the temporary residence.\n\nPredicates:\nRegister(x,y) | Residence(x,y) | Mother(x) | Father(x) | Child(x) | Abandoned(x) | Temporary(x) | Permanent(x) | Local(x) | Committee(x) | Headquartered(x).\n\nExplanation:\nRegister(x,y): x registers y for birth.\nResidence(x,y): x is the residence of y.\nMother(x): x is the mother.\nFather(x): x is the father.\nChild(x): x is the child.\nAbandoned(x): x is an abandoned child.\nTemporary(x): x is a temporary residence.\nPermanent(x): x is a permanent residence.\nLocal(x): x is a local committee.\nCommittee(x): x is a commune-level People's Committee.\nHeadquartered(x): x is headquartered.\n\nPremises:\nall x (Mother(x) -> Register(committee(x),child(x))).\nall x ( Father(x) & ~Residence(mother(x),y) -> Register(committee(father(x)),child(x))).\nall x (~Residence(mother(x),y) & ~Residence(father(x),y) -> Register(local(child(x)),child(x))).\nall x (Abandoned(x) -> Register(committee(temporary(x)),child(x))).\nall x (Register(x,y) -> Residence(x,y)).\nall x (Temporary(x) -> ~Permanent(x)).\nall x (Permanent(x) -> ~Temporary(x)).\n\nConclusion:\nall x (Temporary(x) -> Register(committee(x),child(x))).",
        "premises": [
            "all x (Mother(x) -> Register(committee(x),child(x))).",
            "all x ( Father(x) & ~Residence(mother(x),y) -> Register(committee(father(x)),child(x))).",
            "all x (~Residence(mother(x),y) & ~Residence(father(x),y) -> Register(local(child(x)),child(x))).",
            "all x (Abandoned(x) -> Register(committee(temporary(x)),child(x))).",
            "all x (Register(x,y) -> Residence(x,y)).",
            "all x (Temporary(x) -> ~Permanent(x)).",
            "all x (Permanent(x) -> ~Temporary(x))."
        ],
        "conclusion": "all x (Temporary(x) -> Register(committee(x),child(x))).",
        "id": "c87121d0-5e7a-45c4-b930-a8b76d23062a"
    },
    {
        "raw": "Rules:\n1. The birth registration applicant shall submit the birth certification paper issued by the medical establishment where the child is born.\n2. If a child is born outside a medical establishment, the Notice of birth shall be replaced with a Written certification of witness or a written commitment that the birth is real.\n3. Birth registration shall be carried out at the commune-level People's Committee of the place of residence of the mother.\n\nGoals:\nBirth certificate is required before birth registration.\n\nPredicates:\nBirthCert(x) | MedicalEstablishment(x) | Witness(x) | WrittenCert(x) | Commitment(x) | BirthRegistration(x) | Residence(x) | Mother(x) | Father(x) | Child(x) | Required(x) | Before(x).\n\nExplanation:\nBirthCert(x): x is a birth certificate.\nMedicalEstablishment(x): x is a medical establishment.\nWitness(x): x is a witness.\nWrittenCert(x): x is a written certification.\nCommitment(x): x is a written commitment.\nBirthRegistration(x): x is a birth registration.\nResidence(x): x is a place of residence.\nMother(x): x is the mother.\nFather(x): x is the father.\nChild(x): x is the child.\nRequired(x): x is required.\nBefore(x): x is before.\n\nPremises:\nall x (BirthRegistration(x) -> BirthCert(x) | WrittenCert(x) | Commitment(x)).\nall x (BirthCert(x) -> MedicalEstablishment(x)).\nall x (WrittenCert(x) -> Witness(x)).\nall x (Commitment(x) -> ~Witness(x)).\nall x (BirthRegistration(x) -> Residence(x) & Mother(x)).\nall x (Residence(x) & Mother(x) -> BirthCert(x)).\nall x (Residence(x) & Father(x) -> BirthCert(x) | WrittenCert(x) | Commitment(x)).\nall x (Child(x) -> BirthRegistration(x)).\n-Required(x) | Before(x) & BirthCert(x).\n\nConclusion:\nall x (BirthRegistration(x) -> Required(x) & Before(x) & BirthCert(x)).",
        "premises": [
            "all x (BirthRegistration(x) -> BirthCert(x) | WrittenCert(x) | Commitment(x)).",
            "all x (BirthCert(x) -> MedicalEstablishment(x)).",
            "all x (WrittenCert(x) -> Witness(x)).",
            "all x (Commitment(x) -> ~Witness(x)).",
            "all x (BirthRegistration(x) -> Residence(x) & Mother(x)).",
            "all x (Residence(x) & Mother(x) -> BirthCert(x)).",
            "all x (Residence(x) & Father(x) -> BirthCert(x) | WrittenCert(x) | Commitment(x)).",
            "all x (Child(x) -> BirthRegistration(x)).",
            "-Required(x) | Before(x) & BirthCert(x)."
        ],
        "conclusion": "all x (BirthRegistration(x) -> Required(x) & Before(x) & BirthCert(x)).",
        "id": "c406e75f-bf5e-4bea-a4bd-35f4ecad4f30"
    },
    {
        "raw": "Here is the output:\n\nRules:\n1. Depending on the extent of your friend's relationship with the woman, your friend may be held accountable for his or her behavior.\n2. If your friend's behavior is not serious enough to cause criminal prosecution, your friend will face administrative penalties as prescribed in Clause 1 Article 48 of Decree No. 110/2013/ND-CP.\n3. Clause 1 Article 48 of Decree No. 110/2013/ND-CP provides for administrative penalties for certain behaviors, including being married but marrying another person, being unmarried but marrying someone who is married, and so on.\n\nGoals:\nIs the State officials who is adulterous to get fired?\n\nPredicates:\nAccountable(x) | Behavior(x) | Serious(x) | Criminal(x) | Prosecution(x) | Penalty(x) | Married(x) | Marry(x) | Cohabit(x) | Relative(x) | Adoptive(x) | Government(x) | Contract(x) | CivilServant(x) | StateOfficial(x) | Adulterous(x) | Fired(x)\n\nExplanation:\nAccountable(x): x is accountable for his/her behavior.\nBehavior(x): x's behavior.\nSerious(x): x's behavior is serious.\nCriminal(x): x's behavior is criminal.\nProsecution(x): x faces criminal prosecution.\nPenalty(x): x faces administrative penalty.\nMarried(x): x is married.\nMarry(x): x marries someone.\nCohabit(x): x cohabits with someone.\nRelative(x): x is a relative.\nAdoptive(x): x is an adoptive parent or child.\nGovernment(x): x is in the government.\nContract(x): x is a contract employee.\nCivilServant(x): x is a civil servant.\nStateOfficial(x): x is a state official.\nAdulterous(x): x is adulterous.\nFired(x): x gets fired.\n\nPremises:\nall x (Accountable(x) -> Behavior(x)).\nall x (Behavior(x) -> (Serious(x) | Penalty(x))).\nall x (Serious(x) -> Criminal(x)).\nall x (Criminal(x) -> Prosecution(x)).\nall x (Penalty(x) -> (Married(x) | Marry(x) | Cohabit(x) | Relative(x) | Adoptive(x))).\nall x (Government(x) -> Contract(x)).\nall x (Contract(x) -> ~CivilServant(x)).\nall x (StateOfficial(x) -> Government(x)).\nall x (Adulterous(x) -> Married(x)).\nall x (Married(x) -> ~Fired(x)).\n\nConclusion:\n~all x (StateOfficial(x) -> (Adulterous(x) -> Fired(x))).",
        "premises": [
            "all x (Accountable(x) -> Behavior(x)).",
            "all x (Behavior(x) -> (Serious(x) | Penalty(x))).",
            "all x (Serious(x) -> Criminal(x)).",
            "all x (Criminal(x) -> Prosecution(x)).",
            "all x (Penalty(x) -> (Married(x) | Marry(x) | Cohabit(x) | Relative(x) | Adoptive(x))).",
            "all x (Government(x) -> Contract(x)).",
            "all x (Contract(x) -> ~CivilServant(x)).",
            "all x (StateOfficial(x) -> Government(x)).",
            "all x (Adulterous(x) -> Married(x)).",
            "all x (Married(x) -> ~Fired(x))."
        ],
        "conclusion": "~all x (StateOfficial(x) -> (Adulterous(x) -> Fired(x))).",
        "id": "7a0ce6b7-0f8b-4e91-9290-489dd50f4e6d"
    },
    {
        "raw": "Rules:\n1. Mortgage contracts or loan credit contracts must bear signatures of all asset users.\n2. Property mortgage contracts shall be performed through strict notarization procedures.\n3. The notary public shall check the papers proving the ownership, people's identity card, household registration and civil act capacity of the mortgagor before signing the mortgage contract.\n4. If the wife has notarized her ID on land use rights to sign a mortgage contract, the notary will check her marital status.\n\nGoals:\nIt is legal to bring a charge of forgery of the signature on the mortgage contract.\n\nPredicates:\nMortgage(x) | Loan(x) | Signature(x) | Notarization(x) | Ownership(x) | Identity(x) | Household(x) | Capacity(x) | MaritalStatus(x) | Spouse(x) | Sovereignty(x) | Certification(x) | MedicalRecord(x) | Forgery(x) | Legal(x) | Court(x) | Invalid(x).\n\nExplanation:\nMortgage(x): x is a mortgage contract.\nLoan(x): x is a loan credit contract.\nSignature(x): x is a signature.\nNotarization(x): x is a notarization procedure.\nOwnership(x): x proves ownership.\nIdentity(x): x proves identity.\nHousehold(x): x proves household registration.\nCapacity(x): x proves civil act capacity.\nMaritalStatus(x): x checks marital status.\nSpouse(x): x is a spouse.\nSovereignty(x): x has sovereignty.\nCertification(x): x is a certification.\nMedicalRecord(x): x is a medical record.\nForgery(x): x is a forgery.\nLegal(x): x is legal.\nCourt(x): x is a court.\nInvalid(x): x is invalid.\n\nPremises:\nall x (Mortgage(x) -> Signature(x)).\nall x (PropertyMortgage(x) -> Notarization(x)).\nall x (Notarization(x) -> (Ownership(x) & Identity(x) & Household(x) & Capacity(x))).\nall x (MaritalStatus(x) -> (Spouse(x) | Certification(x))).\nall x (Sovereignty(x) -> Spouse(x)).\nall x (Forgery(x) -> (Court(x) & Invalid(x))).\nall x (Legal(x) -> ~Forgery(x)).\n\nConclusion:\nall x (Forgery(x) -> Legal(x)).",
        "premises": [
            "all x (Mortgage(x) -> Signature(x)).",
            "all x (PropertyMortgage(x) -> Notarization(x)).",
            "all x (Notarization(x) -> (Ownership(x) & Identity(x) & Household(x) & Capacity(x))).",
            "all x (MaritalStatus(x) -> (Spouse(x) | Certification(x))).",
            "all x (Sovereignty(x) -> Spouse(x)).",
            "all x (Forgery(x) -> (Court(x) & Invalid(x))).",
            "all x (Legal(x) -> ~Forgery(x))."
        ],
        "conclusion": "all x (Forgery(x) -> Legal(x)).",
        "id": "00a73256-3ab7-4bd2-82cf-abf218c4589e"
    },
    {
        "raw": "Here is the output in the required format:\n\nRules:\n1. Article 82 of the 2004 Civil Procedure Code (amended in 2011) provides for the sources of evidence.\nGoals:\nThe testimony of witnesses is evidence.\n###\nPredicates:\nEvidence(x) | Source(x) | Readable(x) | Audible(x) | Visible(x) | Exhibit(x) | Testimony(x) | Witness(x) | Expertise(x) | Minute(x) | Custom(x) | Valuation(x) | Law(x) | WitnessTestimony(x).\n\nExplanation:\nEvidence(x): x is evidence.\nSource(x): x is a source.\nReadable(x): x is readable.\nAudible(x): x is audible.\nVisible(x): x is visible.\nExhibit(x): x is an exhibit.\nTestimony(x): x is a testimony.\nWitness(x): x is a witness.\nExpertise(x): x is an expertise conclusion.\nMinute(x): x is a minute on the on-site evaluation results.\nCustom(x): x is a custom.\nValuation(x): x is a property valuation and price appraisal result.\nLaw(x): x is prescribed by law.\nWitnessTestimony(x): x is the testimony of a witness.\n\nPremises:\nall x (Evidence(x) -> (Readable(x) | Audible(x) | Visible(x) | Exhibit(x) | Testimony(x) | WitnessTestimony(x) | Expertise(x) | Minute(x) | Custom(x) | Valuation(x) | Law(x))).\nall x (WitnessTestimony(x) -> Evidence(x)).\n\nConclusion:\nall x (WitnessTestimony(x) -> Evidence(x)).",
        "premises": [
            "all x (Evidence(x) -> (Readable(x) | Audible(x) | Visible(x) | Exhibit(x) | Testimony(x) | WitnessTestimony(x) | Expertise(x) | Minute(x) | Custom(x) | Valuation(x) | Law(x))).",
            "all x (WitnessTestimony(x) -> Evidence(x))."
        ],
        "conclusion": "all x (WitnessTestimony(x) -> Evidence(x)).",
        "id": "fa817187-6280-4f98-b4be-dd107672fd42"
    },
    {
        "raw": "Rules:\n1.Any adult who has sexual intercourse with children aged between full 13 years and under 16 years shall be sentenced to between one and five years of imprisonment.\n2.Marriage must be registered and performed by a competent state agency under this Law and the civil status law.\n3.Marriage which is not registered under this Clause is invalid.\n\nGoals:\nDo you live as a couple under the age of consent, and get convicted?\n\nPredicates:\nAdult(x) | SexualIntercourse(x,y) | Children(x) | Imprisonment(x) | Married(x,y) | Registered(x) | CompetentAgency(x) | Invalid(x) | Recognized(x) | Husband(x) | Wife(x) | Remarry(x,y) | Convicted(x) | LiveTogether(x,y) | UnderAge(x) | Consent(x).\n\nExplanation:\nAdult(x): x is an adult.\nSexualIntercourse(x,y): x has sexual intercourse with y.\nChildren(x): x is a child.\nImprisonment(x): x is imprisoned.\nMarried(x,y): x and y are married.\nRegistered(x): x is registered.\nCompetentAgency(x): x is a competent state agency.\nInvalid(x): x is invalid.\nRecognized(x): x is recognized by law.\nHusband(x): x is a husband.\nWife(x): x is a wife.\nRemarry(x,y): x and y remarry.\nConvicted(x): x is convicted.\nLiveTogether(x,y): x and y live together.\nUnderAge(x): x is under the age of consent.\nConsent(x): x gives consent.\n\nPremises:\nall x all y (Adult(x) & Children(y) & SexualIntercourse(x,y) -> Imprisonment(x)).\nall x all y (Married(x,y) -> Registered(x)).\nall x (Registered(x) -> CompetentAgency(x)).\nall x (Invalid(x) -> -Recognized(x)).\nall x all y (Husband(x) & Wife(y) -> Married(x,y)).\nall x all y (Remarry(x,y) -> Married(x,y)).\nall x (Convicted(x) -> Imprisonment(x)).\nall x all y (LiveTogether(x,y) & UnderAge(x) -> Convicted(x)).\nall x (UnderAge(x) -> -Consent(x)).\n\nConclusion:\nall x all y (LiveTogether(x,y) & UnderAge(x) -> Convicted(x)).",
        "premises": [
            "all x all y (Adult(x) & Children(y) & SexualIntercourse(x,y) -> Imprisonment(x)).",
            "all x all y (Married(x,y) -> Registered(x)).",
            "all x (Registered(x) -> CompetentAgency(x)).",
            "all x (Invalid(x) -> -Recognized(x)).",
            "all x all y (Husband(x) & Wife(y) -> Married(x,y)).",
            "all x all y (Remarry(x,y) -> Married(x,y)).",
            "all x (Convicted(x) -> Imprisonment(x)).",
            "all x all y (LiveTogether(x,y) & UnderAge(x) -> Convicted(x)).",
            "all x (UnderAge(x) -> -Consent(x))."
        ],
        "conclusion": "all x all y (LiveTogether(x,y) & UnderAge(x) -> Convicted(x)).",
        "id": "f4ace39b-f5bc-4fe2-a490-367a0697ae0b"
    },
    {
        "raw": "Rules:\n1. The involved parties shall submit dossiers at the dossier-receiving and result-delivering sections of the provincial/municipal Justice Services.\n2. The dossier component includes the declaration and the guardian appointment paper.\n3. Guardian letters shall be made by the guardian-appointing person, and if many persons appoint one guardian, they must all sign the guardian letters.\n4. The officer in charge of receiving dossiers shall collect fees and issue an appointment slip to the applicant if the dossier is complete and valid.\n5. The professional division shall verify the dossier and propose its solution to the director of the provincial/municipal Justice Service.\n6. The Director shall sign the Decision or reply in writing.\n7. An involved party submits the appointment form and receives the result at the request-receiving and result-notifying section of the provincial/municipal Justice Service.\n\nGoals:\nThe application for recognition of guardianship involving foreign elements is valid.\n\nPredicates:\nSubmit(x) | Dossier(x) | Complete(x) | Valid(x) | Fee(x) | AppointmentSlip(x) | Verify(x) | Propose(x) | Sign(x) | Reply(x) | Receive(x) | Result(x) | Foreign(x) | Recognition(x) | Guardianship(x) | Involve(x) | JusticeService(x) | Provincial(x) | Municipal(x).\n\nExplanation:\nSubmit(x): x submits a dossier.\nDossier(x): x is a dossier.\nComplete(x): x is complete.\nValid(x): x is valid.\nFee(x): x is a fee.\nAppointmentSlip(x): x is an appointment slip.\nVerify(x): x verifies a dossier.\nPropose(x): x proposes a solution.\nSign(x): x signs a decision.\nReply(x): x replies in writing.\nReceive(x): x receives a result.\nResult(x): x is a result.\nForeign(x): x involves foreign elements.\nRecognition(x): x is a recognition.\nGuardianship(x): x is a guardianship.\nInvolve(x): x involves something.\nJusticeService(x): x is a Justice Service.\nProvincial(x): x is provincial.\nMunicipal(x): x is municipal.\n\nPremises:\nall x (Submit(x) -> Dossier(x)).\nall x (Dossier(x) -> (Complete(x) & Valid(x))).\nall x (Complete(x) -> Fee(x)).\nall x (Valid(x) -> AppointmentSlip(x)).\nall x (Verify(x) -> Propose(x)).\nall x (Propose(x) -> Sign(x)).\nall x (Sign(x) -> Reply(x)).\nall x (Reply(x) -> Receive(x)).\nall x (Receive(x) -> Result(x)).\nall x (Result(x) -> Recognition(x)).\nall x (Recognition(x) -> Guardianship(x)).\nall x (Guardianship(x) -> Involve(x)).\nall x (Involve(x) -> Foreign(x)).\n-Involve(x) | Foreign(x).\n\nConclusion:\nall x (Submit(x) -> Foreign(x)).",
        "premises": [
            "all x (Submit(x) -> Dossier(x)).",
            "all x (Dossier(x) -> (Complete(x) & Valid(x))).",
            "all x (Complete(x) -> Fee(x)).",
            "all x (Valid(x) -> AppointmentSlip(x)).",
            "all x (Verify(x) -> Propose(x)).",
            "all x (Propose(x) -> Sign(x)).",
            "all x (Sign(x) -> Reply(x)).",
            "all x (Reply(x) -> Receive(x)).",
            "all x (Receive(x) -> Result(x)).",
            "all x (Result(x) -> Recognition(x)).",
            "all x (Recognition(x) -> Guardianship(x)).",
            "all x (Guardianship(x) -> Involve(x)).",
            "all x (Involve(x) -> Foreign(x)).",
            "-Involve(x) | Foreign(x)."
        ],
        "conclusion": "all x (Submit(x) -> Foreign(x)).",
        "id": "9b4f331e-b079-4880-82b6-0061701f791f"
    }
]